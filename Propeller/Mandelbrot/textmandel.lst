00000                 | 
00000                 | #line 1 "/home/pik33/Programowanie/P2-retromachine/Propeller/Mandelbrot/textmandel.p2asm"
00000                 | con
00000                 | 	_clkfreq = 320000000
00000                 | 	_clkmode = 16781307
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 F6 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 F1 F0 03 F6 | 	mov	ptra, objptr
00410 003 3C F1 07 F1 | 	add	ptra, #316
00414 004 14 EC 0F FB | 	rdlong	pa, #20 wz
00418 005 E8 01 90 5D |  if_ne	jmp	#skip_clock_set_
0041c 006 00 00 64 FD | 	hubset	#0
00420 007 07 80 80 FF 
00424 008 00 F0 67 FD | 	hubset	##16781304
00428 009 86 01 80 FF 
0042c 00a 1F 80 66 FD | 	waitx	##200000
00430 00b 07 80 00 FF 
00434 00c FB ED 07 F6 | 	mov	pa, ##16781307
00438 00d 00 EC 63 FD | 	hubset	pa
0043c 00e 18 EC 67 FC | 	wrlong	pa, #24
00440 00f 68 89 89 FF 
00444 010 14 00 6C FC | 	wrlong	##320000000, #20
00448 011 B8 01 90 FD | 	jmp	#skip_clock_set_
0044c 012 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 FC 07 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 08 62 FD | 	cogid	arg01
00614 084 03 08 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E3 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 F7 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 09 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D F6 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c 2B 30 61 FD |     pop	fcache_tmpb_
00638 08d F6 31 01 F1 |     add	fcache_tmpb_, pa
0063c 08e 2A 30 61 FD |     push	fcache_tmpb_
00640 08f F6 31 81 F1 |     sub	fcache_tmpb_, pa
00644 090 02 EC 47 F0 |     shr	pa, #2
00648 091 00 EC 8F F9 |     altd	pa
0064c 092 97 00 00 F6 |     mov	 0-0, ret_instr_
00650 093 01 EC 87 F1 |     sub	pa, #1
00654 094 28 EC 63 FD |     setq	pa
00658 095 98 00 00 FB |     rdlong	$0, fcache_tmpb_
0065c 096 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00660 097             | ret_instr_
00660 097 2D 00 64 FD |     ret
00664 098             | fcache_tmpb_
00664 098 00 00 00 00 |     long 0
00668 099             | builtin_bytefill_
00668 099 01 0C 56 F0 |         shr	arg03, #1 wc
0066c 09a 04 0B 42 CC |  if_c   wrbyte	arg02, arg01
00670 09b 01 08 06 C1 |  if_c   add	arg01, #1
00674 09c 00 0A FE F9 |         movbyts	arg02, #0
00678 09d             | builtin_wordfill_
00678 09d 01 0C 56 F0 |         shr	arg03, #1 wc
0067c 09e 04 0B 52 CC |  if_c   wrword	arg02, arg01
00680 09f 02 08 06 C1 |  if_c   add	arg01, #2
00684 0a0 05 0B 2A F9 |         setword	arg02, arg02, #1
00688 0a1             | builtin_longfill_
00688 0a1 04 01 88 FC |         wrfast	#0,arg01
0068c 0a2 00 0C 0E F2 |         cmp	arg03, #0 wz
00690 0a3 06 03 D8 5C |  if_nz  rep	#1, arg03
00694 0a4 17 0A 62 5D |  if_nz  wflong	arg02
00698 0a5 2D 00 64 FD |         ret
0069c 0a6             | COUNT_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | RETADDR_
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | fp
006a4 0a8 00 00 00 00 |     long 0
006a8 0a9             | pushregs_
006a8 0a9 2B EC 63 FD |     pop  pa
006ac 0aa 2B 4E 61 FD |     pop  RETADDR_
006b0 0ab 03 4C 95 FB |     tjz  COUNT_, #pushregs_done_
006b4 0ac FF 4D 8D F9 |     altd  COUNT_, #511
006b8 0ad 28 00 64 FD |     setq #0-0
006bc 0ae 61 11 66 FC |     wrlong local01, ptra++
006c0 0af             | pushregs_done_
006c0 0af 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c4 0b0 61 4D 65 FC |     wrlong COUNT_, ptra++
006c8 0b1 F8 51 01 F6 |     mov    fp, ptra
006cc 0b2 2C EC 63 FD |     jmp  pa
006d0 0b3             |  popregs_
006d0 0b3 2B EC 63 FD |     pop    pa
006d4 0b4 28 04 64 FD |     setq   #2
006d8 0b5 5F 4D 05 FB |     rdlong COUNT_, --ptra
006dc 0b6 02 4C 75 FB |     djf    COUNT_, #popregs__ret
006e0 0b7 28 4C 61 FD |     setq   COUNT_
006e4 0b8 5F 11 06 FB |     rdlong local01, --ptra
006e8 0b9             | popregs__ret
006e8 0b9 2A 4E 61 FD |     push   RETADDR_
006ec 0ba 2C EC 63 FD |     jmp    pa
006f0 0bb             | 
006f0 0bb             | divide_
006f0 0bb 3A 75 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f4 0bc 6C E0 61 FD |        wrc     itmp2_                         'store sign of y
006f8 0bd 39 73 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006fc 0be 3A 73 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
00700 0bf 01 E0 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00704 0c0 18 74 62 FD |        getqx   muldivb_                       'get quotient
00708 0c1 19 72 62 FD |        getqy   muldiva_                       'get remainder
0070c 0c2 39 73 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
00710 0c3 00 E0 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00714 0c4 3A 75 82 06 |  _ret_ negc    muldivb_,muldivb_     
00718 0c5             | __pc long 0
00718 0c5 00 00 00 00 
0071c 0c6             | __setjmp
0071c 0c6 2B 8A 61 FD |     pop __pc
00720 0c7 00 F6 05 F6 |     mov result1, #0
00724 0c8 00 F8 05 F6 |     mov result2, #0
00728 0c9 04 DD 01 F6 |     mov abortchain, arg01
0072c 0ca 04 51 61 FC |     wrlong fp, arg01
00730 0cb 04 08 06 F1 |     add arg01, #4
00734 0cc 04 F1 63 FC |     wrlong ptra, arg01
00738 0cd 04 08 06 F1 |     add arg01, #4
0073c 0ce 04 E3 61 FC |     wrlong objptr, arg01
00740 0cf 04 08 06 F1 |     add arg01, #4
00744 0d0 04 8B 61 FC |     wrlong __pc, arg01
00748 0d1 2C 8A 61 FD |     jmp __pc
0074c 0d2             | __unwind_pc long 0
0074c 0d2 00 00 00 00 
00750 0d3             | __unwind_stack
00750 0d3 2B A4 61 FD |    pop  __unwind_pc
00754 0d4             | __unwind_loop
00754 0d4 05 09 0A F2 |    cmp  arg01, arg02 wz
00758 0d5 10 00 90 AD |   if_z jmp #__unwind_stack_ret
0075c 0d6 04 F1 03 F6 |    mov   ptra, arg01
00760 0d7 6C FF BF FD |    call  #popregs_
00764 0d8 A8 08 02 F6 |    mov   arg01, fp
00768 0d9 E8 FF 9F FD |    jmp   #__unwind_loop
0076c 0da             | __unwind_stack_ret
0076c 0da 2C A4 61 FD |    jmp  __unwind_pc
00770 0db             | __longjmp
00770 0db 2B 8A 61 FD |     pop __pc
00774 0dc 00 08 0E F2 |     cmp    arg01, #0 wz
00778 0dd 30 00 90 AD |  if_z jmp #nocatch
0077c 0de 05 F7 01 F6 |     mov result1, arg02
00780 0df 01 F8 05 F6 |     mov result2, #1
00784 0e0 04 0B 02 FB |     rdlong arg02, arg01
00788 0e1 04 08 06 F1 |     add arg01, #4
0078c 0e2 04 F1 03 FB |     rdlong ptra, arg01
00790 0e3 04 08 06 F1 |     add arg01, #4
00794 0e4 04 E3 01 FB |     rdlong objptr, arg01
00798 0e5 04 08 06 F1 |     add arg01, #4
0079c 0e6 04 8B 01 FB |     rdlong __pc, arg01
007a0 0e7 A8 08 02 F6 |     mov arg01, fp
007a4 0e8 A8 FF BF FD |     call #__unwind_stack
007a8 0e9             | __longjmp_ret
007a8 0e9 2C 8A 61 FD |     jmp  __pc
007ac 0ea             | nocatch
007ac 0ea 00 0C 0E F2 |     cmp arg03, #0 wz
007b0 0eb 54 FE 9F AD |  if_z jmp #cogexit
007b4 0ec F0 FF 9F FD |     jmp #__longjmp_ret
007b8 0ed             | 
007b8 0ed             | __heap_ptr
007b8 0ed BC 68 00 00 | 	long	@__heap_base
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | itmp1_
007c0 0ef 00 00 00 00 | 	long	0
007c4 0f0             | itmp2_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | objptr
007c8 0f1 C4 78 00 00 | 	long	@objmem
007cc 0f2             | ptr___struct___bas_wrap_sender_rx_
007cc 0f2 68 41 00 00 | 	long	@__struct___bas_wrap_sender_rx
007d0 0f3             | ptr___struct___bas_wrap_sender_tx_
007d0 0f3 30 41 00 00 | 	long	@__struct___bas_wrap_sender_tx
007d4 0f4             | ptr___system__dat__
007d4 0f4 5C 66 00 00 | 	long	@__system__dat_
007d8 0f5             | ptr__hng030rm_spin2_dat__
007d8 0f5 F8 41 00 00 | 	long	@_hng030rm_spin2_dat_
007dc 0f6             | ptr__hng030rm_spin2_putchar_
007dc 0f6 50 11 00 00 | 	long	@_hng030rm_spin2_putchar
007e0 0f7             | ptr__hng030rm_spin2_putpixel1_
007e0 0f7 40 0E 00 00 | 	long	@_hng030rm_spin2_putpixel1
007e4 0f8             | ptr__hng030rm_spin2_putpixel2_
007e4 0f8 20 0F 00 00 | 	long	@_hng030rm_spin2_putpixel2
007e8 0f9             | ptr__hng030rm_spin2_putpixel4_
007e8 0f9 E8 0F 00 00 | 	long	@_hng030rm_spin2_putpixel4
007ec 0fa             | ptr__hng030rm_spin2_putpixel8_
007ec 0fa B0 10 00 00 | 	long	@_hng030rm_spin2_putpixel8
007f0 0fb             | result1
007f0 0fb 00 00 00 00 | 	long	0
007f4 0fc             | result2
007f4 0fc 01 00 00 00 | 	long	1
007f8 0fd             | result3
007f8 0fd 02 00 00 00 | 	long	2
007fc 0fe             | COG_BSS_START
007fc 0fe             | 	fit	480
007fc                 | 	orgh
007fc                 | hubentry
007fc                 | 
007fc                 | _program
007fc     0A 4C 05 F6 | 	mov	COUNT_, #10
00800     A9 00 A0 FD | 	call	#pushregs_
00804     01 00 00 FF 
00808     30 10 06 F6 | 	mov	local01, ##560
0080c     2C E2 05 F1 | 	add	objptr, #44
00810     F1 08 02 F6 | 	mov	arg01, objptr
00814                 | ' 
00814                 | ' ' initialize pointers and variables
00814                 | ' 
00814                 | ' border_ptr:=@bordercolor
00814     24 E2 85 F1 | 	sub	objptr, #36
00818     F1 08 62 FC | 	wrlong	arg01, objptr
0081c     08 00 00 FF 
00820     00 EA 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
00824                 | ' font_ptr:=@st_font
00824     04 E2 85 F1 | 	sub	objptr, #4
00828     F1 EA 61 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
0082c                 | ' hdmibase:=base
0082c     20 E2 05 F1 | 	add	objptr, #32
00830     F1 00 68 FC | 	wrlong	#0, objptr
00834     24 E2 85 F1 | 	sub	objptr, #36
00838                 | ' p1:=@putpixel1
00838     F1 08 02 F6 | 	mov	arg01, objptr
0083c     F7 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00840     08 00 00 FF 
00844     00 EA 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
00848     44 17 B0 FD | 	call	#__system___make_methodptr
0084c     DC E2 05 F1 | 	add	objptr, #220
00850     F1 F6 61 FC | 	wrlong	result1, objptr
00854     DC E2 85 F1 | 	sub	objptr, #220
00858                 | ' p2:=@putpixel2
00858     F1 08 02 F6 | 	mov	arg01, objptr
0085c     F8 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
00860     2C 17 B0 FD | 	call	#__system___make_methodptr
00864     E0 E2 05 F1 | 	add	objptr, #224
00868     F1 F6 61 FC | 	wrlong	result1, objptr
0086c     E0 E2 85 F1 | 	sub	objptr, #224
00870                 | ' p4:=@putpixel4
00870     F1 08 02 F6 | 	mov	arg01, objptr
00874     F9 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
00878     14 17 B0 FD | 	call	#__system___make_methodptr
0087c     E4 E2 05 F1 | 	add	objptr, #228
00880     F1 F6 61 FC | 	wrlong	result1, objptr
00884     E4 E2 85 F1 | 	sub	objptr, #228
00888                 | ' p8:=@putpixel8
00888     F1 08 02 F6 | 	mov	arg01, objptr
0088c     FA 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
00890     FC 16 B0 FD | 	call	#__system___make_methodptr
00894     E8 E2 05 F1 | 	add	objptr, #232
00898     F1 F6 61 FC | 	wrlong	result1, objptr
0089c     E8 E2 85 F1 | 	sub	objptr, #232
008a0                 | ' 
008a0                 | ' 
008a0                 | ' ' the mode has to be set here to enable computing the buffer length
008a0                 | ' 
008a0                 | ' setmode(mode)
008a0     08 09 02 F6 | 	mov	arg01, local01
008a4     E8 0A B0 FD | 	call	#_hng030rm_spin2_setmode
008a8     40 E2 05 F1 | 	add	objptr, #64
008ac     F1 10 02 F6 | 	mov	local01, objptr
008b0                 | ' 
008b0                 | ' vblank_ptr:=@vblank
008b0     34 E2 85 F1 | 	sub	objptr, #52
008b4     F1 10 62 FC | 	wrlong	local01, objptr
008b8     28 E2 05 F1 | 	add	objptr, #40
008bc     F1 10 02 F6 | 	mov	local01, objptr
008c0                 | ' cursor_ptr:=@cursor_x
008c0     24 E2 85 F1 | 	sub	objptr, #36
008c4     F1 10 62 FC | 	wrlong	local01, objptr
008c8     88 E2 05 F1 | 	add	objptr, #136
008cc     F1 10 02 F6 | 	mov	local01, objptr
008d0                 | ' 
008d0                 | ' fontnum_ptr:=@fontnum
008d0     78 E2 85 F1 | 	sub	objptr, #120
008d4     F1 10 62 FC | 	wrlong	local01, objptr
008d8                 | ' 
008d8                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
008d8     78 E2 05 F1 | 	add	objptr, #120
008dc     F1 00 68 FC | 	wrlong	#0, objptr
008e0     1C E2 05 F1 | 	add	objptr, #28
008e4     F1 08 02 F6 | 	mov	arg01, objptr
008e8     B4 E2 85 F1 | 	sub	objptr, #180
008ec     0F 00 00 FF 
008f0     58 EA 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
008f4     F5 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
008f8     0F 00 00 FF 
008fc     58 EA 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
00900                 | ' bytemove(@colors,@vgacolors,16)
00900     10 0C 06 F6 | 	mov	arg03, #16
00904     60 15 B0 FD | 	call	#__system____builtin_memmove
00908                 | ' 
00908                 | ' ' initialize a cursor
00908                 | ' 
00908                 | ' cursor_x:=0
00908     34 E2 05 F1 | 	add	objptr, #52
0090c     F1 00 48 FC | 	wrbyte	#0, objptr
00910                 | ' cursor_y:=0
00910     01 E2 05 F1 | 	add	objptr, #1
00914     F1 00 48 FC | 	wrbyte	#0, objptr
00918                 | ' cursor_sh:=14
00918     01 E2 05 F1 | 	add	objptr, #1
0091c     F1 1C 48 FC | 	wrbyte	#14, objptr
00920     36 E2 85 F1 | 	sub	objptr, #54
00924                 | ' 
00924                 | ' 
00924                 | ' ' start the cog
00924                 | ' 
00924                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00924     0F 00 00 FF 
00928     68 EA 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
0092c     F5 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00930     0F 00 00 FF 
00934     68 EA 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
00938     F1 0C 02 F6 | 	mov	arg03, objptr
0093c     10 F6 05 F6 | 	mov	result1, #16
00940     28 0C 62 FD | 	setq	arg03
00944     05 F7 F1 FC | 	coginit	result1, arg02 wc
00948     01 F6 65 C6 |  if_b	neg	result1, #1
0094c     28 E2 05 F1 | 	add	objptr, #40
00950     F1 F6 61 FC | 	wrlong	result1, objptr
00954     28 E2 85 F1 | 	sub	objptr, #40
00958                 | ' waitms(20)
00958     14 08 06 F6 | 	mov	arg01, #20
0095c     5C 17 B0 FD | 	call	#__system___waitms
00960                 | ' 
00960                 | ' ' clear the screen and set the colors to green on black
00960                 | ' 
00960                 | ' cls(c_green,c_black)
00960                 | ' 
00960                 | ' if (graphmode<512)
00960     C4 E2 05 F1 | 	add	objptr, #196
00964     F1 0C 02 FB | 	rdlong	arg03, objptr
00968     C4 E2 85 F1 | 	sub	objptr, #196
0096c     01 00 00 FF 
00970     00 0C 56 F2 | 	cmps	arg03, ##512 wc
00974     20 00 90 3D |  if_ae	jmp	#LR__0001
00978     FF 7F 1C FF 
0097c     E0 0B 66 F6 | 	neg	arg02, ##956301280
00980                 | '   c:=fc<<24+bc<<16+$20
00980                 | '   longfill(buf_ptr,c,buflen)
00980     F1 08 02 FB | 	rdlong	arg01, objptr
00984     30 E2 05 F1 | 	add	objptr, #48
00988     F1 0C 02 FB | 	rdlong	arg03, objptr
0098c     30 E2 85 F1 | 	sub	objptr, #48
00990     A1 00 A0 FD | 	call	#\builtin_longfill_
00994                 | ' else
00994     78 00 90 FD | 	jmp	#LR__0004
00998                 | LR__0001
00998                 | '   if (graphmode & 48) ==48
00998     C4 E2 05 F1 | 	add	objptr, #196
0099c     F1 F6 01 FB | 	rdlong	result1, objptr
009a0     C4 E2 85 F1 | 	sub	objptr, #196
009a4     30 F6 05 F5 | 	and	result1, #48
009a8     30 F6 0D F2 | 	cmp	result1, #48 wz
009ac                 | '     c:=bc
009ac     00 12 06 A6 |  if_e	mov	local02, #0
009b0     40 00 90 AD |  if_e	jmp	#LR__0003
009b4                 | '   elseif (graphmode & 48) ==32
009b4     C4 E2 05 F1 | 	add	objptr, #196
009b8     F1 F6 01 FB | 	rdlong	result1, objptr
009bc     C4 E2 85 F1 | 	sub	objptr, #196
009c0     30 F6 05 F5 | 	and	result1, #48
009c4     20 F6 0D F2 | 	cmp	result1, #32 wz
009c8     00 12 06 A6 |  if_e	mov	local02, #0
009cc     04 12 66 A0 |  if_e	shl	local02, #4
009d0                 | '     c:=bc<<4+bc
009d0     20 00 90 AD |  if_e	jmp	#LR__0002
009d4                 | '   elseif (graphmode & 48) ==16
009d4     C4 E2 05 F1 | 	add	objptr, #196
009d8     F1 F6 01 FB | 	rdlong	result1, objptr
009dc     C4 E2 85 F1 | 	sub	objptr, #196
009e0     30 F6 05 F5 | 	and	result1, #48
009e4     10 F6 0D F2 | 	cmp	result1, #16 wz
009e8     00 12 06 A6 |  if_e	mov	local02, #0
009ec     02 12 66 A0 |  if_e	shl	local02, #2
009f0                 | '     c:=bc<<6+bc<<4+bc<<2+bc
009f0                 | '   else
009f0                 | '     if bc==1
009f0                 | '       c:=255
009f0                 | '     else
009f0                 | '       c:=0
009f0     00 12 06 56 |  if_ne	mov	local02, #0
009f4                 | LR__0002
009f4                 | LR__0003
009f4     30 E2 05 F1 | 	add	objptr, #48
009f8     F1 0C 02 FB | 	rdlong	arg03, objptr
009fc     30 E2 85 F1 | 	sub	objptr, #48
00a00     02 0C 66 F0 | 	shl	arg03, #2
00a04                 | '   bytefill(buf_ptr,c,buflen*4)
00a04     F1 08 02 FB | 	rdlong	arg01, objptr
00a08     09 0B 02 F6 | 	mov	arg02, local02
00a0c     99 00 A0 FD | 	call	#\builtin_bytefill_
00a10                 | LR__0004
00a10                 | ' setwritecolors(fc,bc)
00a10     00 0A 06 F6 | 	mov	arg02, #0
00a14                 | ' 
00a14                 | ' 
00a14                 | ' write_color:=ff
00a14     38 E2 05 F1 | 	add	objptr, #56
00a18     F1 8E 69 FC | 	wrlong	#199, objptr
00a1c                 | ' write_background:=bb
00a1c     04 E2 05 F1 | 	add	objptr, #4
00a20     F1 00 68 FC | 	wrlong	#0, objptr
00a24                 | ' cursor_x:=0
00a24     08 E2 85 F1 | 	sub	objptr, #8
00a28     F1 00 48 FC | 	wrbyte	#0, objptr
00a2c                 | ' cursor_y:=0
00a2c     01 E2 05 F1 | 	add	objptr, #1
00a30     F1 00 48 FC | 	wrbyte	#0, objptr
00a34     35 E2 85 F1 | 	sub	objptr, #53
00a38                 | ' setbordercolor(0,0,128)
00a38     00 08 06 F6 | 	mov	arg01, #0
00a3c     80 0C 06 F6 | 	mov	arg03, #128
00a40     E8 06 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a44                 | ' setwritecolors(c_green,c_black)
00a44     00 0A 06 F6 | 	mov	arg02, #0
00a48                 | ' 
00a48                 | ' 
00a48                 | ' write_color:=ff
00a48     38 E2 05 F1 | 	add	objptr, #56
00a4c     F1 8E 69 FC | 	wrlong	#199, objptr
00a50                 | ' write_background:=bb
00a50     04 E2 05 F1 | 	add	objptr, #4
00a54     F1 00 68 FC | 	wrlong	#0, objptr
00a58     3C E2 85 F1 | 	sub	objptr, #60
00a5c                 | ' 
00a5c                 | ' return cog
00a5c     00 08 06 F6 | 	mov	arg01, #0
00a60     00 0C 06 F6 | 	mov	arg03, #0
00a64     C4 06 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a68                 | ' v030.start(mode,pin)
00a68                 | ' v030.setbordercolor(0,0,0)
00a68                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a68     F1 08 02 F6 | 	mov	arg01, objptr
00a6c     F6 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a70     1C 15 B0 FD | 	call	#__system___make_methodptr
00a74     FB 0A 02 F6 | 	mov	arg02, result1
00a78     00 0C 06 F6 | 	mov	arg03, #0
00a7c     00 0E 06 F6 | 	mov	arg04, #0
00a80     00 08 06 F6 | 	mov	arg01, #0
00a84     AC 16 B0 FD | 	call	#__system___basic_open
00a88     EC E2 05 F1 | 	add	objptr, #236
00a8c     99 09 E0 FF 
00a90     F1 66 6A FC | 	wrlong	##-1072483533, objptr
00a94     04 E2 05 F1 | 	add	objptr, #4
00a98     CC EC 9F FF 
00a9c     F1 34 6B FC | 	wrlong	##1071225242, objptr
00aa0     04 E2 05 F1 | 	add	objptr, #4
00aa4     CC CC DF FF 
00aa8     F1 34 6B FC | 	wrlong	##-1080452710, objptr
00aac     04 E2 05 F1 | 	add	objptr, #4
00ab0     CC CC 9F FF 
00ab4     F1 34 6B FC | 	wrlong	##1067030938, objptr
00ab8     04 E2 05 F1 | 	add	objptr, #4
00abc     F1 00 6A FC | 	wrlong	#256, objptr
00ac0     04 E2 05 F1 | 	add	objptr, #4
00ac4     01 00 80 FF 
00ac8     F1 3E 6A FC | 	wrlong	##799, objptr
00acc     04 E2 05 F1 | 	add	objptr, #4
00ad0     F1 BE 6B FC | 	wrlong	#479, objptr
00ad4     14 E2 85 F1 | 	sub	objptr, #20
00ad8     F1 08 02 FB | 	rdlong	arg01, objptr
00adc     04 E2 85 F1 | 	sub	objptr, #4
00ae0     F1 0A 02 FB | 	rdlong	arg02, objptr
00ae4     EC E2 85 F1 | 	sub	objptr, #236
00ae8     1F 0A E6 F4 | 	bitnot	arg02, #31
00aec     BC 17 B0 FD | 	call	#__system___float_add
00af0     FB 14 02 F6 | 	mov	local03, result1
00af4     00 E3 05 F1 | 	add	objptr, #256
00af8     F1 08 02 FB | 	rdlong	arg01, objptr
00afc     00 E3 85 F1 | 	sub	objptr, #256
00b00     00 08 56 F2 | 	cmps	arg01, #0 wc
00b04     04 09 62 C6 |  if_b	neg	arg01, arg01
00b08     01 16 06 C6 |  if_b	mov	local04, #1
00b0c     00 16 06 36 |  if_ae	mov	local04, #0
00b10     64 17 B0 FD | 	call	#__system___float_fromuns
00b14     00 16 0E F2 | 	cmp	local04, #0 wz
00b18     1F F6 E5 54 |  if_ne	bitnot	result1, #31
00b1c     FB 0A 02 F6 | 	mov	arg02, result1
00b20     0A 09 02 F6 | 	mov	arg01, local03
00b24     F8 1C B0 FD | 	call	#__system___float_div
00b28     08 E3 05 F1 | 	add	objptr, #264
00b2c     F1 F6 61 FC | 	wrlong	result1, objptr
00b30     10 E2 85 F1 | 	sub	objptr, #16
00b34     F1 08 02 FB | 	rdlong	arg01, objptr
00b38     04 E2 85 F1 | 	sub	objptr, #4
00b3c     F1 0A 02 FB | 	rdlong	arg02, objptr
00b40     F4 E2 85 F1 | 	sub	objptr, #244
00b44     1F 0A E6 F4 | 	bitnot	arg02, #31
00b48     60 17 B0 FD | 	call	#__system___float_add
00b4c     FB 14 02 F6 | 	mov	local03, result1
00b50     04 E3 05 F1 | 	add	objptr, #260
00b54     F1 08 02 FB | 	rdlong	arg01, objptr
00b58     04 E3 85 F1 | 	sub	objptr, #260
00b5c     00 08 56 F2 | 	cmps	arg01, #0 wc
00b60     04 09 62 C6 |  if_b	neg	arg01, arg01
00b64     01 16 06 C6 |  if_b	mov	local04, #1
00b68     00 16 06 36 |  if_ae	mov	local04, #0
00b6c     08 17 B0 FD | 	call	#__system___float_fromuns
00b70     00 16 0E F2 | 	cmp	local04, #0 wz
00b74     1F F6 E5 54 |  if_ne	bitnot	result1, #31
00b78     FB 0A 02 F6 | 	mov	arg02, result1
00b7c     0A 09 02 F6 | 	mov	arg01, local03
00b80     9C 1C B0 FD | 	call	#__system___float_div
00b84     0C E3 05 F1 | 	add	objptr, #268
00b88     F1 F6 61 FC | 	wrlong	result1, objptr
00b8c     04 E2 05 F1 | 	add	objptr, #4
00b90     00 40 A0 FF 
00b94     F1 00 68 FC | 	wrlong	##1082130432, objptr
00b98     1C E2 85 F1 | 	sub	objptr, #28
00b9c     F1 14 02 FB | 	rdlong	local03, objptr
00ba0     20 E2 05 F1 | 	add	objptr, #32
00ba4     F1 14 62 FC | 	wrlong	local03, objptr
00ba8                 | ' #line 2 "/home/pik33/Programowanie/P2-retromachine/Propeller/Mandelbrot/textmandel.bas"
00ba8                 | ' startvideo (512+48,0)
00ba8                 | ' '
00ba8                 | ' ' translated to BASIC from mandelbrot16-20180406-fds.spin
00ba8                 | ' '-------------------------------------------------------------------------------
00ba8                 | ' 
00ba8                 | ' xmin# = -2.3
00ba8                 | ' xmax# =  1.7
00ba8                 | ' 
00ba8                 | ' ymin# = -1.2
00ba8                 | ' ymax# =  1.2
00ba8                 | ' 
00ba8                 | ' maxiter = 256
00ba8                 | ' 
00ba8                 | ' MPX = 799 ' 0..79
00ba8                 | ' MPY = 479 ' 0..24
00ba8                 | ' 
00ba8                 | ' dx# = (xmax#-xmin#)/MPX
00ba8                 | ' dy# = (ymax#-ymin#)/MPY
00ba8                 | ' 
00ba8                 | ' c4# = 4.0 ' square of escape radius
00ba8                 | '  
00ba8                 | ' cy# = ymin#
00ba8                 | ' for py = 0 to MPY
00ba8     00 18 06 F6 | 	mov	local05, #0
00bac     10 E2 85 F1 | 	sub	objptr, #16
00bb0     F1 1A 02 FB | 	rdlong	local06, objptr
00bb4     04 E3 85 F1 | 	sub	objptr, #260
00bb8     01 1A 06 F1 | 	add	local06, #1
00bbc                 | LR__0005
00bbc     0D 19 52 F2 | 	cmps	local05, local06 wc
00bc0     70 02 90 3D |  if_ae	jmp	#LR__0011
00bc4     EC E2 05 F1 | 	add	objptr, #236
00bc8     F1 F6 01 FB | 	rdlong	result1, objptr
00bcc     2C E2 05 F1 | 	add	objptr, #44
00bd0     F1 F6 61 FC | 	wrlong	result1, objptr
00bd4                 | '   cx# = xmin#
00bd4                 | '   for px = 0 to MPX
00bd4     00 1C 06 F6 | 	mov	local07, #0
00bd8     18 E2 85 F1 | 	sub	objptr, #24
00bdc     F1 1E 02 FB | 	rdlong	local08, objptr
00be0     00 E3 85 F1 | 	sub	objptr, #256
00be4     01 1E 06 F1 | 	add	local08, #1
00be8                 | LR__0006
00be8     0F 1D 52 F2 | 	cmps	local07, local08 wc
00bec     18 02 90 3D |  if_ae	jmp	#LR__0010
00bf0     00 20 06 F6 | 	mov	local09, #0
00bf4     1C E3 05 F1 | 	add	objptr, #284
00bf8     F1 00 68 FC | 	wrlong	#0, objptr
00bfc     04 E2 05 F1 | 	add	objptr, #4
00c00     F1 00 68 FC | 	wrlong	#0, objptr
00c04     04 E2 05 F1 | 	add	objptr, #4
00c08     F1 00 68 FC | 	wrlong	#0, objptr
00c0c     04 E2 05 F1 | 	add	objptr, #4
00c10     F1 00 68 FC | 	wrlong	#0, objptr
00c14     04 E2 05 F1 | 	add	objptr, #4
00c18     F1 00 68 FC | 	wrlong	#0, objptr
00c1c     2C E3 85 F1 | 	sub	objptr, #300
00c20                 | '     x# = 0.0
00c20                 | '     y#= 0.0
00c20                 | '     x2# = 0.0
00c20                 | '     y2# = 0.0
00c20                 | '     iter = 0
00c20                 | '     while iter < maxiter and x2#+y2# <= c4#
00c20                 | LR__0007
00c20     2C E3 05 F1 | 	add	objptr, #300
00c24     F1 0A 02 FB | 	rdlong	arg02, objptr
00c28     30 E2 85 F1 | 	sub	objptr, #48
00c2c     F1 14 02 FB | 	rdlong	local03, objptr
00c30     0A 0B 52 F2 | 	cmps	arg02, local03 wc
00c34     10 21 A2 F1 | 	subx	local09, local09
00c38     00 22 06 F6 | 	mov	local10, #0
00c3c     28 E2 05 F1 | 	add	objptr, #40
00c40     F1 08 02 FB | 	rdlong	arg01, objptr
00c44     04 E2 05 F1 | 	add	objptr, #4
00c48     F1 0A 02 FB | 	rdlong	arg02, objptr
00c4c     28 E3 85 F1 | 	sub	objptr, #296
00c50     58 16 B0 FD | 	call	#__system___float_add
00c54     FB 08 02 F6 | 	mov	arg01, result1
00c58     10 E3 05 F1 | 	add	objptr, #272
00c5c     F1 0A 02 FB | 	rdlong	arg02, objptr
00c60     10 E3 85 F1 | 	sub	objptr, #272
00c64     01 0C 06 F6 | 	mov	arg03, #1
00c68     14 1E B0 FD | 	call	#__system___float_cmp
00c6c     01 F6 55 F2 | 	cmps	result1, #1 wc
00c70     00 22 26 C6 |  if_b	not	local10, #0
00c74     11 21 CA F7 | 	test	local09, local10 wz
00c78     CC 00 90 AD |  if_e	jmp	#LR__0008
00c7c     1C E3 05 F1 | 	add	objptr, #284
00c80     F1 0A 02 FB | 	rdlong	arg02, objptr
00c84     1C E3 85 F1 | 	sub	objptr, #284
00c88     1E 08 C6 F9 | 	decod	arg01, #30
00c8c     54 19 B0 FD | 	call	#__system___float_mul
00c90     FB 08 02 F6 | 	mov	arg01, result1
00c94     20 E3 05 F1 | 	add	objptr, #288
00c98     F1 0A 02 FB | 	rdlong	arg02, objptr
00c9c     20 E3 85 F1 | 	sub	objptr, #288
00ca0     40 19 B0 FD | 	call	#__system___float_mul
00ca4     FB 08 02 F6 | 	mov	arg01, result1
00ca8     14 E3 05 F1 | 	add	objptr, #276
00cac     F1 0A 02 FB | 	rdlong	arg02, objptr
00cb0     14 E3 85 F1 | 	sub	objptr, #276
00cb4     F4 15 B0 FD | 	call	#__system___float_add
00cb8     20 E3 05 F1 | 	add	objptr, #288
00cbc     F1 F6 61 FC | 	wrlong	result1, objptr
00cc0     04 E2 05 F1 | 	add	objptr, #4
00cc4     F1 08 02 FB | 	rdlong	arg01, objptr
00cc8     04 E2 05 F1 | 	add	objptr, #4
00ccc     F1 0A 02 FB | 	rdlong	arg02, objptr
00cd0     28 E3 85 F1 | 	sub	objptr, #296
00cd4     1F 0A E6 F4 | 	bitnot	arg02, #31
00cd8     D0 15 B0 FD | 	call	#__system___float_add
00cdc     FB 08 02 F6 | 	mov	arg01, result1
00ce0     18 E3 05 F1 | 	add	objptr, #280
00ce4     F1 0A 02 FB | 	rdlong	arg02, objptr
00ce8     18 E3 85 F1 | 	sub	objptr, #280
00cec     BC 15 B0 FD | 	call	#__system___float_add
00cf0     1C E3 05 F1 | 	add	objptr, #284
00cf4     F1 F6 61 FC | 	wrlong	result1, objptr
00cf8     10 E2 05 F1 | 	add	objptr, #16
00cfc     F1 20 02 FB | 	rdlong	local09, objptr
00d00     01 20 06 F1 | 	add	local09, #1
00d04     F1 20 62 FC | 	wrlong	local09, objptr
00d08     10 E2 85 F1 | 	sub	objptr, #16
00d0c     F1 0A 02 FB | 	rdlong	arg02, objptr
00d10     05 09 02 F6 | 	mov	arg01, arg02
00d14     1C E3 85 F1 | 	sub	objptr, #284
00d18     C8 18 B0 FD | 	call	#__system___float_mul
00d1c     24 E3 05 F1 | 	add	objptr, #292
00d20     F1 F6 61 FC | 	wrlong	result1, objptr
00d24     04 E2 85 F1 | 	sub	objptr, #4
00d28     F1 0A 02 FB | 	rdlong	arg02, objptr
00d2c     05 09 02 F6 | 	mov	arg01, arg02
00d30     20 E3 85 F1 | 	sub	objptr, #288
00d34     AC 18 B0 FD | 	call	#__system___float_mul
00d38     28 E3 05 F1 | 	add	objptr, #296
00d3c     F1 F6 61 FC | 	wrlong	result1, objptr
00d40     28 E3 85 F1 | 	sub	objptr, #296
00d44     D8 FE 9F FD | 	jmp	#LR__0007
00d48                 | LR__0008
00d48     18 E3 05 F1 | 	add	objptr, #280
00d4c     F1 08 02 FB | 	rdlong	arg01, objptr
00d50     10 E2 85 F1 | 	sub	objptr, #16
00d54     F1 0A 02 FB | 	rdlong	arg02, objptr
00d58     08 E3 85 F1 | 	sub	objptr, #264
00d5c     4C 15 B0 FD | 	call	#__system___float_add
00d60     18 E3 05 F1 | 	add	objptr, #280
00d64     F1 F6 61 FC | 	wrlong	result1, objptr
00d68                 | '     cx# = cx#+dx#
00d68                 | '     if iter=maxiter then
00d68     14 E2 05 F1 | 	add	objptr, #20
00d6c     F1 20 02 FB | 	rdlong	local09, objptr
00d70     30 E2 85 F1 | 	sub	objptr, #48
00d74     F1 22 02 FB | 	rdlong	local10, objptr
00d78     FC E2 85 F1 | 	sub	objptr, #252
00d7c     11 21 0A F2 | 	cmp	local09, local10 wz
00d80     30 E3 05 A1 |  if_e	add	objptr, #304
00d84     F1 00 68 AC |  if_e	wrlong	#0, objptr
00d88     30 E3 85 A1 |  if_e	sub	objptr, #304
00d8c     58 00 90 AD |  if_e	jmp	#LR__0009
00d90     2C E3 05 F1 | 	add	objptr, #300
00d94     F1 22 02 FB | 	rdlong	local10, objptr
00d98     40 22 06 F1 | 	add	local10, #64
00d9c     11 23 52 F6 | 	abs	local10, local10 wc
00da0     04 22 46 F0 | 	shr	local10, #4
00da4     11 23 82 F6 | 	negc	local10, local10
00da8     08 E2 05 F1 | 	add	objptr, #8
00dac     F1 22 62 FC | 	wrlong	local10, objptr
00db0     08 E2 85 F1 | 	sub	objptr, #8
00db4     F1 20 02 FB | 	rdlong	local09, objptr
00db8     10 23 52 F6 | 	abs	local10, local09 wc
00dbc     11 23 42 F8 | 	getnib	local10, local10, #0
00dc0     11 23 82 F6 | 	negc	local10, local10
00dc4     0C E2 05 F1 | 	add	objptr, #12
00dc8     F1 22 62 FC | 	wrlong	local10, objptr
00dcc     04 22 66 F0 | 	shl	local10, #4
00dd0     04 E2 85 F1 | 	sub	objptr, #4
00dd4     F1 20 02 FB | 	rdlong	local09, objptr
00dd8     10 23 02 F1 | 	add	local10, local09
00ddc     04 E2 85 F1 | 	sub	objptr, #4
00de0     F1 22 62 FC | 	wrlong	local10, objptr
00de4     30 E3 85 F1 | 	sub	objptr, #304
00de8                 | LR__0009
00de8     0C 0B 02 F6 | 	mov	arg02, local05
00dec     30 E3 05 F1 | 	add	objptr, #304
00df0     F1 0C 02 FB | 	rdlong	arg03, objptr
00df4     30 E3 85 F1 | 	sub	objptr, #304
00df8     0E 09 02 F6 | 	mov	arg01, local07
00dfc     B0 02 B0 FD | 	call	#_hng030rm_spin2_putpixel8
00e00     01 1C 06 F1 | 	add	local07, #1
00e04     E0 FD 9F FD | 	jmp	#LR__0006
00e08                 | LR__0010
00e08     14 E3 05 F1 | 	add	objptr, #276
00e0c     F1 08 02 FB | 	rdlong	arg01, objptr
00e10     08 E2 85 F1 | 	sub	objptr, #8
00e14     F1 0A 02 FB | 	rdlong	arg02, objptr
00e18     0C E3 85 F1 | 	sub	objptr, #268
00e1c     8C 14 B0 FD | 	call	#__system___float_add
00e20     14 E3 05 F1 | 	add	objptr, #276
00e24     F1 F6 61 FC | 	wrlong	result1, objptr
00e28     14 E3 85 F1 | 	sub	objptr, #276
00e2c     01 18 06 F1 | 	add	local05, #1
00e30     88 FD 9F FD | 	jmp	#LR__0005
00e34                 | LR__0011
00e34     A8 F0 03 F6 | 	mov	ptra, fp
00e38     B3 00 A0 FD | 	call	#popregs_
00e3c                 | _program_ret
00e3c     2D 00 64 FD | 	ret
00e40                 | 
00e40                 | ' 
00e40                 | ' 
00e40                 | ' ''---------- putpixel - put a pixel on the screen
00e40                 | ' 
00e40                 | ' pub putpixel1(x,y,c) |byte b
00e40                 | _hng030rm_spin2_putpixel1
00e40                 | ' 
00e40                 | ' 
00e40                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
00e40     00 FC 05 F6 | 	mov	_var01, #0
00e44     00 08 56 F2 | 	cmps	arg01, #0 wc
00e48     01 FC 65 36 |  if_ae	neg	_var01, #1
00e4c     90 E2 05 F1 | 	add	objptr, #144
00e50     F1 FE 01 FB | 	rdlong	_var02, objptr
00e54     05 FE 65 F0 | 	shl	_var02, #5
00e58     FF 08 52 F2 | 	cmps	arg01, _var02 wc
00e5c     00 01 A2 F1 | 	subx	_var03, _var03
00e60     00 FD 01 F5 | 	and	_var01, _var03
00e64     00 00 06 F6 | 	mov	_var03, #0
00e68     00 0A 56 F2 | 	cmps	arg02, #0 wc
00e6c     01 00 66 36 |  if_ae	neg	_var03, #1
00e70     00 FD 01 F5 | 	and	_var01, _var03
00e74     04 E2 05 F1 | 	add	objptr, #4
00e78     F1 00 02 FB | 	rdlong	_var03, objptr
00e7c     94 E2 85 F1 | 	sub	objptr, #148
00e80     00 0B 52 F2 | 	cmps	arg02, _var03 wc
00e84     01 03 A2 F1 | 	subx	_var04, _var04
00e88     01 FD C9 F7 | 	test	_var01, _var04 wz
00e8c     8C 00 90 AD |  if_e	jmp	#LR__0014
00e90     90 E2 05 F1 | 	add	objptr, #144
00e94     F1 FC 01 FB | 	rdlong	_var01, objptr
00e98     02 FC 65 F0 | 	shl	_var01, #2
00e9c     05 FD 01 FD | 	qmul	_var01, arg02
00ea0     90 E2 85 F1 | 	sub	objptr, #144
00ea4     F1 FC 01 FB | 	rdlong	_var01, objptr
00ea8     04 05 02 F6 | 	mov	_var05, arg01
00eac     03 04 46 F0 | 	shr	_var05, #3
00eb0                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
00eb0                 | '     if (c==0)
00eb0     00 0C 0E F2 | 	cmp	arg03, #0 wz
00eb4     18 02 62 FD | 	getqx	_var04
00eb8     01 FD 01 F1 | 	add	_var01, _var04
00ebc     02 FD 01 F1 | 	add	_var01, _var05
00ec0     FE 06 C2 FA | 	rdbyte	_var06, _var01
00ec4     18 00 90 5D |  if_ne	jmp	#LR__0012
00ec8     04 FD 51 F6 | 	abs	_var01, arg01 wc
00ecc     07 FC 05 F5 | 	and	_var01, #7
00ed0     FE 02 82 F6 | 	negc	_var04, _var01
00ed4     01 03 C2 F9 | 	decod	_var04, _var04
00ed8                 | '       b:=b & !(1<<(x//8))
00ed8     01 07 22 F5 | 	andn	_var06, _var04
00edc                 | '     else
00edc     14 00 90 FD | 	jmp	#LR__0013
00ee0                 | LR__0012
00ee0     04 FD 51 F6 | 	abs	_var01, arg01 wc
00ee4     07 FC 05 F5 | 	and	_var01, #7
00ee8     FE 02 82 F6 | 	negc	_var04, _var01
00eec     01 03 C2 F9 | 	decod	_var04, _var04
00ef0                 | '       b:=b |(1<<(x//8))
00ef0     01 07 42 F5 | 	or	_var06, _var04
00ef4                 | LR__0013
00ef4     90 E2 05 F1 | 	add	objptr, #144
00ef8     F1 02 02 FB | 	rdlong	_var04, objptr
00efc     02 02 66 F0 | 	shl	_var04, #2
00f00     05 03 02 FD | 	qmul	_var04, arg02
00f04     90 E2 85 F1 | 	sub	objptr, #144
00f08     F1 02 02 FB | 	rdlong	_var04, objptr
00f0c                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
00f0c     18 00 62 FD | 	getqx	_var03
00f10     00 03 02 F1 | 	add	_var04, _var03
00f14     02 03 02 F1 | 	add	_var04, _var05
00f18     01 07 42 FC | 	wrbyte	_var06, _var04
00f1c                 | LR__0014
00f1c                 | _hng030rm_spin2_putpixel1_ret
00f1c     2D 00 64 FD | 	ret
00f20                 | 
00f20                 | ' 
00f20                 | ' 
00f20                 | ' pub putpixel2(x,y,c) |byte b
00f20                 | _hng030rm_spin2_putpixel2
00f20                 | ' 
00f20                 | ' 
00f20                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
00f20     00 FC 05 F6 | 	mov	_var01, #0
00f24     00 08 56 F2 | 	cmps	arg01, #0 wc
00f28     01 FC 65 36 |  if_ae	neg	_var01, #1
00f2c     90 E2 05 F1 | 	add	objptr, #144
00f30     F1 FE 01 FB | 	rdlong	_var02, objptr
00f34     04 FE 65 F0 | 	shl	_var02, #4
00f38     FF 08 52 F2 | 	cmps	arg01, _var02 wc
00f3c     00 01 A2 F1 | 	subx	_var03, _var03
00f40     00 FD 01 F5 | 	and	_var01, _var03
00f44     00 00 06 F6 | 	mov	_var03, #0
00f48     00 0A 56 F2 | 	cmps	arg02, #0 wc
00f4c     01 00 66 36 |  if_ae	neg	_var03, #1
00f50     00 FD 01 F5 | 	and	_var01, _var03
00f54     04 E2 05 F1 | 	add	objptr, #4
00f58     F1 00 02 FB | 	rdlong	_var03, objptr
00f5c     94 E2 85 F1 | 	sub	objptr, #148
00f60     00 0B 52 F2 | 	cmps	arg02, _var03 wc
00f64     01 03 A2 F1 | 	subx	_var04, _var04
00f68     01 FD C9 F7 | 	test	_var01, _var04 wz
00f6c     74 00 90 AD |  if_e	jmp	#LR__0015
00f70     90 E2 05 F1 | 	add	objptr, #144
00f74     F1 02 02 FB | 	rdlong	_var04, objptr
00f78     01 01 02 F6 | 	mov	_var03, _var04
00f7c     02 00 66 F0 | 	shl	_var03, #2
00f80     05 01 02 FD | 	qmul	_var03, arg02
00f84     90 E2 85 F1 | 	sub	objptr, #144
00f88     02 02 66 F0 | 	shl	_var04, #2
00f8c     18 00 62 FD | 	getqx	_var03
00f90     05 03 02 FD | 	qmul	_var04, arg02
00f94     F1 02 02 FB | 	rdlong	_var04, objptr
00f98     00 03 02 F1 | 	add	_var04, _var03
00f9c     04 01 02 F6 | 	mov	_var03, arg01
00fa0     02 00 46 F0 | 	shr	_var03, #2
00fa4     00 03 02 F1 | 	add	_var04, _var03
00fa8                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
00fa8     01 03 C2 FA | 	rdbyte	_var04, _var04
00fac     04 FD 51 F6 | 	abs	_var01, arg01 wc
00fb0     03 FC 05 F5 | 	and	_var01, #3
00fb4     FE FE 81 F6 | 	negc	_var02, _var01
00fb8     01 FE 65 F0 | 	shl	_var02, #1
00fbc     03 FC 05 F6 | 	mov	_var01, #3
00fc0     FF FC 61 F0 | 	shl	_var01, _var02
00fc4                 | '     b:=b & !(%11<<((x//4)<<1))
00fc4     FE 02 22 F5 | 	andn	_var04, _var01
00fc8     FF 0C 62 F0 | 	shl	arg03, _var02
00fcc                 | '     b:=b |(c<<((x//4)<<1))
00fcc     06 03 42 F5 | 	or	_var04, arg03
00fd0     F1 FE 01 FB | 	rdlong	_var02, objptr
00fd4                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
00fd4     18 FC 61 FD | 	getqx	_var01
00fd8     FE FE 01 F1 | 	add	_var02, _var01
00fdc     00 FF 01 F1 | 	add	_var02, _var03
00fe0     FF 02 42 FC | 	wrbyte	_var04, _var02
00fe4                 | LR__0015
00fe4                 | _hng030rm_spin2_putpixel2_ret
00fe4     2D 00 64 FD | 	ret
00fe8                 | 
00fe8                 | ' 
00fe8                 | ' 
00fe8                 | ' pub putpixel4(x,y,c) |byte b
00fe8                 | _hng030rm_spin2_putpixel4
00fe8                 | ' 
00fe8                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
00fe8     00 FC 05 F6 | 	mov	_var01, #0
00fec     00 08 56 F2 | 	cmps	arg01, #0 wc
00ff0     01 FC 65 36 |  if_ae	neg	_var01, #1
00ff4     90 E2 05 F1 | 	add	objptr, #144
00ff8     F1 FE 01 FB | 	rdlong	_var02, objptr
00ffc     04 FE 65 F0 | 	shl	_var02, #4
01000     FF 08 52 F2 | 	cmps	arg01, _var02 wc
01004     00 01 A2 F1 | 	subx	_var03, _var03
01008     00 FD 01 F5 | 	and	_var01, _var03
0100c     00 00 06 F6 | 	mov	_var03, #0
01010     00 0A 56 F2 | 	cmps	arg02, #0 wc
01014     01 00 66 36 |  if_ae	neg	_var03, #1
01018     00 FD 01 F5 | 	and	_var01, _var03
0101c     04 E2 05 F1 | 	add	objptr, #4
01020     F1 00 02 FB | 	rdlong	_var03, objptr
01024     94 E2 85 F1 | 	sub	objptr, #148
01028     00 0B 52 F2 | 	cmps	arg02, _var03 wc
0102c     01 03 A2 F1 | 	subx	_var04, _var04
01030     01 FD C9 F7 | 	test	_var01, _var04 wz
01034     74 00 90 AD |  if_e	jmp	#LR__0016
01038     90 E2 05 F1 | 	add	objptr, #144
0103c     F1 02 02 FB | 	rdlong	_var04, objptr
01040     01 01 02 F6 | 	mov	_var03, _var04
01044     02 00 66 F0 | 	shl	_var03, #2
01048     05 01 02 FD | 	qmul	_var03, arg02
0104c     90 E2 85 F1 | 	sub	objptr, #144
01050     02 02 66 F0 | 	shl	_var04, #2
01054     18 00 62 FD | 	getqx	_var03
01058     05 03 02 FD | 	qmul	_var04, arg02
0105c     F1 02 02 FB | 	rdlong	_var04, objptr
01060     00 03 02 F1 | 	add	_var04, _var03
01064     04 01 02 F6 | 	mov	_var03, arg01
01068     01 00 46 F0 | 	shr	_var03, #1
0106c     00 03 02 F1 | 	add	_var04, _var03
01070                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
01070     01 03 C2 FA | 	rdbyte	_var04, _var04
01074     04 FD 51 F6 | 	abs	_var01, arg01 wc
01078     01 FC 05 F5 | 	and	_var01, #1
0107c     FE FE 81 F6 | 	negc	_var02, _var01
01080     02 FE 65 F0 | 	shl	_var02, #2
01084     0F FC 05 F6 | 	mov	_var01, #15
01088     FF FC 61 F0 | 	shl	_var01, _var02
0108c                 | '     b:=b & !(%1111<<((x//2)<<2))
0108c     FE 02 22 F5 | 	andn	_var04, _var01
01090     FF 0C 62 F0 | 	shl	arg03, _var02
01094                 | '     b:=b |(c<<((x//2)<<2))
01094     06 03 42 F5 | 	or	_var04, arg03
01098     F1 FE 01 FB | 	rdlong	_var02, objptr
0109c                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
0109c     18 FC 61 FD | 	getqx	_var01
010a0     FE FE 01 F1 | 	add	_var02, _var01
010a4     00 FF 01 F1 | 	add	_var02, _var03
010a8     FF 02 42 FC | 	wrbyte	_var04, _var02
010ac                 | LR__0016
010ac                 | _hng030rm_spin2_putpixel4_ret
010ac     2D 00 64 FD | 	ret
010b0                 | 
010b0                 | ' 
010b0                 | ' 
010b0                 | ' pub putpixel8(x,y,c)
010b0                 | _hng030rm_spin2_putpixel8
010b0                 | ' 
010b0                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
010b0     00 FC 05 F6 | 	mov	_var01, #0
010b4     00 08 56 F2 | 	cmps	arg01, #0 wc
010b8     01 FC 65 36 |  if_ae	neg	_var01, #1
010bc     90 E2 05 F1 | 	add	objptr, #144
010c0     F1 FE 01 FB | 	rdlong	_var02, objptr
010c4     02 FE 65 F0 | 	shl	_var02, #2
010c8     FF 08 52 F2 | 	cmps	arg01, _var02 wc
010cc     00 01 A2 F1 | 	subx	_var03, _var03
010d0     00 FD 01 F5 | 	and	_var01, _var03
010d4     00 00 06 F6 | 	mov	_var03, #0
010d8     00 0A 56 F2 | 	cmps	arg02, #0 wc
010dc     01 00 66 36 |  if_ae	neg	_var03, #1
010e0     00 FD 01 F5 | 	and	_var01, _var03
010e4     04 E2 05 F1 | 	add	objptr, #4
010e8     F1 00 02 FB | 	rdlong	_var03, objptr
010ec     94 E2 85 F1 | 	sub	objptr, #148
010f0     00 0B 52 F2 | 	cmps	arg02, _var03 wc
010f4     01 03 A2 F1 | 	subx	_var04, _var04
010f8     01 FD C9 F7 | 	test	_var01, _var04 wz
010fc     28 00 90 AD |  if_e	jmp	#LR__0017
01100     90 E2 05 F1 | 	add	objptr, #144
01104     F1 02 02 FB | 	rdlong	_var04, objptr
01108     02 02 66 F0 | 	shl	_var04, #2
0110c     05 03 02 FD | 	qmul	_var04, arg02
01110     90 E2 85 F1 | 	sub	objptr, #144
01114     F1 02 02 FB | 	rdlong	_var04, objptr
01118                 | '     byte[buf_ptr+4*cpl*y+x]:=c
01118     18 00 62 FD | 	getqx	_var03
0111c     00 03 02 F1 | 	add	_var04, _var03
01120     04 03 02 F1 | 	add	_var04, arg01
01124     01 0D 42 FC | 	wrbyte	arg03, _var04
01128                 | LR__0017
01128                 | _hng030rm_spin2_putpixel8_ret
01128     2D 00 64 FD | 	ret
0112c                 | 
0112c                 | ' 
0112c                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
0112c                 | ' 
0112c                 | ' pub setbordercolor(r,g,b) | color
0112c                 | _hng030rm_spin2_setbordercolor
0112c     18 08 66 F0 | 	shl	arg01, #24
01130     10 0A 66 F0 | 	shl	arg02, #16
01134     05 09 02 F1 | 	add	arg01, arg02
01138     08 0C 66 F0 | 	shl	arg03, #8
0113c     06 09 02 F1 | 	add	arg01, arg03
01140                 | ' 
01140                 | ' color:=r<<24+g<<16+b<<8
01140                 | ' bordercolor:=color
01140     2C E2 05 F1 | 	add	objptr, #44
01144     F1 08 62 FC | 	wrlong	arg01, objptr
01148     2C E2 85 F1 | 	sub	objptr, #44
0114c                 | _hng030rm_spin2_setbordercolor_ret
0114c     2D 00 64 FD | 	ret
01150                 | 
01150                 | ' 
01150                 | ' ''---------- Output a char at the cursor position, move the cursor
01150                 | ' 
01150                 | ' pub putchar(achar) | c,x,y
01150                 | _hng030rm_spin2_putchar
01150     07 4C 05 F6 | 	mov	COUNT_, #7
01154     A9 00 A0 FD | 	call	#pushregs_
01158     04 11 02 F6 | 	mov	local01, arg01
0115c                 | ' 
0115c                 | ' if achar==10
0115c     0A 10 0E F2 | 	cmp	local01, #10 wz
01160     58 00 90 5D |  if_ne	jmp	#LR__0018
01164                 | '   crlf()
01164                 | ' 
01164                 | ' cursor_x:=0
01164     34 E2 05 F1 | 	add	objptr, #52
01168     F1 00 48 FC | 	wrbyte	#0, objptr
0116c                 | ' cursor_y+=1
0116c     01 E2 05 F1 | 	add	objptr, #1
01170     F1 10 C2 FA | 	rdbyte	local01, objptr
01174     01 10 06 F1 | 	add	local01, #1
01178     F1 10 42 FC | 	wrbyte	local01, objptr
0117c                 | ' if cursor_y>lines-1
0117c     5F E2 05 F1 | 	add	objptr, #95
01180     F1 10 02 FB | 	rdlong	local01, objptr
01184     01 10 86 F1 | 	sub	local01, #1
01188     5F E2 85 F1 | 	sub	objptr, #95
0118c     F1 12 C2 FA | 	rdbyte	local02, objptr
01190     35 E2 85 F1 | 	sub	objptr, #53
01194     08 13 5A F2 | 	cmps	local02, local01 wcz
01198     34 01 90 ED |  if_be	jmp	#LR__0021
0119c                 | '   scrollup()
0119c     3C 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
011a0     94 E2 05 F1 | 	add	objptr, #148
011a4     F1 12 02 FB | 	rdlong	local02, objptr
011a8     01 12 86 F1 | 	sub	local02, #1
011ac                 | '   cursor_y:=lines-1
011ac     5F E2 85 F1 | 	sub	objptr, #95
011b0     F1 12 42 FC | 	wrbyte	local02, objptr
011b4     35 E2 85 F1 | 	sub	objptr, #53
011b8                 | ' else  
011b8     14 01 90 FD | 	jmp	#LR__0021
011bc                 | LR__0018
011bc     34 E2 05 F1 | 	add	objptr, #52
011c0     F1 14 C2 FA | 	rdbyte	local03, objptr
011c4     01 E2 05 F1 | 	add	objptr, #1
011c8     F1 16 C2 FA | 	rdbyte	local04, objptr
011cc     03 E2 05 F1 | 	add	objptr, #3
011d0     F1 12 02 FB | 	rdlong	local02, objptr
011d4     04 E2 05 F1 | 	add	objptr, #4
011d8     F1 18 02 FB | 	rdlong	local05, objptr
011dc     54 E2 05 F1 | 	add	objptr, #84
011e0     F1 1A 02 FB | 	rdlong	local06, objptr
011e4     0B 1B 02 FD | 	qmul	local06, local04
011e8                 | '   x:=cursor_x
011e8                 | '   y:=cursor_y
011e8     18 12 66 F0 | 	shl	local02, #24
011ec     10 18 66 F0 | 	shl	local05, #16
011f0     0C 13 02 F1 | 	add	local02, local05
011f4                 | '   c:=write_color<<24+write_background<<16
011f4     90 E2 85 F1 | 	sub	objptr, #144
011f8     F1 1A 02 FB | 	rdlong	local06, objptr
011fc     90 E2 05 F1 | 	add	objptr, #144
01200     18 18 62 FD | 	getqx	local05
01204     0A 19 02 F1 | 	add	local05, local03
01208     02 18 66 F0 | 	shl	local05, #2
0120c     0C 1B 02 F1 | 	add	local06, local05
01210     0D 19 02 FB | 	rdlong	local05, local06
01214     0C 19 32 F9 | 	getword	local05, local05, #0
01218     09 19 42 F5 | 	or	local05, local02
0121c     0D 19 62 FC | 	wrlong	local05, local06
01220     F1 1A 02 FB | 	rdlong	local06, objptr
01224     0B 1B 02 FD | 	qmul	local06, local04
01228                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
01228     90 E2 85 F1 | 	sub	objptr, #144
0122c     F1 1C 02 FB | 	rdlong	local07, objptr
01230     08 19 E2 F8 | 	getbyte	local05, local01, #0
01234                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
01234                 | '   cursor_x+=1
01234     34 E2 05 F1 | 	add	objptr, #52
01238                 | '   if cursor_x==cpl
01238     18 1A 62 FD | 	getqx	local06
0123c     0A 1B 02 F1 | 	add	local06, local03
01240     02 1A 66 F0 | 	shl	local06, #2
01244     0D 1D 02 F1 | 	add	local07, local06
01248     0E 1B 02 FB | 	rdlong	local06, local07
0124c     FF 1A 26 F5 | 	andn	local06, #255
01250     0C 1B 42 F5 | 	or	local06, local05
01254     0E 1B 62 FC | 	wrlong	local06, local07
01258     F1 1A C2 FA | 	rdbyte	local06, objptr
0125c     01 1A 06 F1 | 	add	local06, #1
01260     F1 1A 42 FC | 	wrbyte	local06, objptr
01264     F1 1A C2 FA | 	rdbyte	local06, objptr
01268     5C E2 05 F1 | 	add	objptr, #92
0126c     F1 18 02 FB | 	rdlong	local05, objptr
01270     90 E2 85 F1 | 	sub	objptr, #144
01274     0C 1B 0A F2 | 	cmp	local06, local05 wz
01278     54 00 90 5D |  if_ne	jmp	#LR__0020
0127c                 | '     cursor_x:=0
0127c     34 E2 05 F1 | 	add	objptr, #52
01280     F1 00 48 FC | 	wrbyte	#0, objptr
01284                 | '     cursor_y+=1
01284     01 E2 05 F1 | 	add	objptr, #1
01288     F1 1A C2 FA | 	rdbyte	local06, objptr
0128c     01 1A 06 F1 | 	add	local06, #1
01290     F1 1A 42 FC | 	wrbyte	local06, objptr
01294                 | '     if cursor_y>lines-1
01294     5F E2 05 F1 | 	add	objptr, #95
01298     F1 18 02 FB | 	rdlong	local05, objptr
0129c     01 18 86 F1 | 	sub	local05, #1
012a0     5F E2 85 F1 | 	sub	objptr, #95
012a4     F1 1A C2 FA | 	rdbyte	local06, objptr
012a8     35 E2 85 F1 | 	sub	objptr, #53
012ac     0C 1B 5A F2 | 	cmps	local06, local05 wcz
012b0     1C 00 90 ED |  if_be	jmp	#LR__0019
012b4                 | '       scrollup()
012b4     24 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
012b8     94 E2 05 F1 | 	add	objptr, #148
012bc     F1 1A 02 FB | 	rdlong	local06, objptr
012c0     01 1A 86 F1 | 	sub	local06, #1
012c4                 | '       cursor_y:=lines-1
012c4     5F E2 85 F1 | 	sub	objptr, #95
012c8     F1 1A 42 FC | 	wrbyte	local06, objptr
012cc     35 E2 85 F1 | 	sub	objptr, #53
012d0                 | LR__0019
012d0                 | LR__0020
012d0                 | LR__0021
012d0     A8 F0 03 F6 | 	mov	ptra, fp
012d4     B3 00 A0 FD | 	call	#popregs_
012d8                 | _hng030rm_spin2_putchar_ret
012d8     2D 00 64 FD | 	ret
012dc                 | 
012dc                 | ' 
012dc                 | ' ''-----------  Scroll the screen one line up
012dc                 | ' 
012dc                 | ' pub scrollup() | i
012dc                 | _hng030rm_spin2_scrollup
012dc     02 4C 05 F6 | 	mov	COUNT_, #2
012e0     A9 00 A0 FD | 	call	#pushregs_
012e4     90 E2 05 F1 | 	add	objptr, #144
012e8     F1 08 02 FB | 	rdlong	arg01, objptr
012ec     90 E2 85 F1 | 	sub	objptr, #144
012f0     04 0D 02 F6 | 	mov	arg03, arg01
012f4     02 0C 66 F0 | 	shl	arg03, #2
012f8     F1 0A 02 FB | 	rdlong	arg02, objptr
012fc     06 0B 02 F1 | 	add	arg02, arg03
01300     30 E2 05 F1 | 	add	objptr, #48
01304     F1 0C 02 FB | 	rdlong	arg03, objptr
01308     30 E2 85 F1 | 	sub	objptr, #48
0130c     04 0D 82 F1 | 	sub	arg03, arg01
01310                 | ' 
01310                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
01310     F1 08 02 FB | 	rdlong	arg01, objptr
01314     E0 0B B0 FD | 	call	#__system__longmove
01318                 | ' repeat i from buflen-cpl to buflen-1
01318     30 E2 05 F1 | 	add	objptr, #48
0131c     F1 08 02 FB | 	rdlong	arg01, objptr
01320     04 0D 02 F6 | 	mov	arg03, arg01
01324     60 E2 05 F1 | 	add	objptr, #96
01328     F1 0A 02 FB | 	rdlong	arg02, objptr
0132c     05 0D 82 F1 | 	sub	arg03, arg02
01330     01 08 86 F1 | 	sub	arg01, #1
01334     60 E2 85 F1 | 	sub	objptr, #96
01338     F1 10 02 FB | 	rdlong	local01, objptr
0133c     30 E2 85 F1 | 	sub	objptr, #48
01340     05 11 82 F1 | 	sub	local01, arg02
01344     08 09 52 F2 | 	cmps	arg01, local01 wc
01348     01 10 86 F6 | 	negc	local01, #1
0134c     08 09 02 F1 | 	add	arg01, local01
01350     D8 EC 9F FE | 	loc	pa,	#(@LR__0023-@LR__0022)
01354     8C 00 A0 FD | 	call	#FCACHE_LOAD_
01358                 | LR__0022
01358     06 0B 02 F6 | 	mov	arg02, arg03
0135c     02 0A 66 F0 | 	shl	arg02, #2
01360     F1 12 02 FB | 	rdlong	local02, objptr
01364     05 13 02 F1 | 	add	local02, arg02
01368     09 0B 02 FB | 	rdlong	arg02, local02
0136c     E0 0B 06 F4 | 	bitl	arg02, #480
01370     20 0A 46 F5 | 	or	arg02, #32
01374                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
01374     09 0B 62 FC | 	wrlong	arg02, local02
01378     08 0D 02 F1 | 	add	arg03, local01
0137c     04 0D 0A F2 | 	cmp	arg03, arg01 wz
01380     D4 FF 9F 5D |  if_ne	jmp	#LR__0022
01384                 | LR__0023
01384     A8 F0 03 F6 | 	mov	ptra, fp
01388     B3 00 A0 FD | 	call	#popregs_
0138c                 | _hng030rm_spin2_scrollup_ret
0138c     2D 00 64 FD | 	ret
01390                 | 
01390                 | ' 
01390                 | ' 
01390                 | ' 
01390                 | ' '*************************************************************************
01390                 | ' '                                                                        *
01390                 | ' '  Mode setting and driver start                                                          *
01390                 | ' '                                                                        *
01390                 | ' '*************************************************************************
01390                 | ' 
01390                 | ' ''---------  Set the graphics mode
01390                 | ' 
01390                 | ' 
01390                 | ' 
01390                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
01390                 | _hng030rm_spin2_setmode
01390     31 4C 05 F6 | 	mov	COUNT_, #49
01394     A9 00 A0 FD | 	call	#pushregs_
01398     04 11 02 F6 | 	mov	local01, arg01
0139c                 | ' 
0139c                 | ' '' mode:tn_bb_cc_vv_hh
0139c                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
0139c                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
0139c                 | ' 
0139c                 | ' if mode==(512+192+48)
0139c     01 00 00 FF 
013a0     F0 10 0E F2 | 	cmp	local01, ##752 wz
013a4                 | '   return 'no RAM
013a4     34 09 90 AD |  if_e	jmp	#LR__0064
013a8                 | ' 
013a8                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
013a8     08 13 02 F6 | 	mov	local02, local01
013ac     06 12 46 F0 | 	shr	local02, #6
013b0     07 12 06 F5 | 	and	local02, #7
013b4     08 12 26 F3 | 	fle	local02, #8
013b8     09 15 02 F6 | 	mov	local03, local02
013bc     30 14 62 FD | 	jmprel	local03
013c0                 | LR__0024
013c0     20 00 90 FD | 	jmp	#LR__0025
013c4     48 00 90 FD | 	jmp	#LR__0026
013c8     70 00 90 FD | 	jmp	#LR__0027
013cc     98 00 90 FD | 	jmp	#LR__0028
013d0     C0 00 90 FD | 	jmp	#LR__0029
013d4     E8 00 90 FD | 	jmp	#LR__0030
013d8     10 01 90 FD | 	jmp	#LR__0031
013dc     38 01 90 FD | 	jmp	#LR__0032
013e0     68 01 90 FD | 	jmp	#LR__0033
013e4                 | LR__0025
013e4                 | ' 
013e4                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
013e4     50 E2 05 F1 | 	add	objptr, #80
013e8     F1 08 02 F6 | 	mov	arg01, objptr
013ec     50 E2 85 F1 | 	sub	objptr, #80
013f0     0E 00 00 FF 
013f4     58 EA 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
013f8     F5 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
013fc     0E 00 00 FF 
01400     58 EA 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
01404     10 0C 06 F6 | 	mov	arg03, #16
01408     EC 0A B0 FD | 	call	#__system__longmove
0140c     3C 01 90 FD | 	jmp	#LR__0033
01410                 | LR__0026
01410                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
01410     50 E2 05 F1 | 	add	objptr, #80
01414     F1 08 02 F6 | 	mov	arg01, objptr
01418     50 E2 85 F1 | 	sub	objptr, #80
0141c     0E 00 00 FF 
01420     98 EA 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
01424     F5 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
01428     0E 00 00 FF 
0142c     98 EA 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
01430     10 0C 06 F6 | 	mov	arg03, #16
01434     C0 0A B0 FD | 	call	#__system__longmove
01438     10 01 90 FD | 	jmp	#LR__0033
0143c                 | LR__0027
0143c                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
0143c     50 E2 05 F1 | 	add	objptr, #80
01440     F1 08 02 F6 | 	mov	arg01, objptr
01444     50 E2 85 F1 | 	sub	objptr, #80
01448     0E 00 00 FF 
0144c     D8 EA 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
01450     F5 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
01454     0E 00 00 FF 
01458     D8 EA 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
0145c     10 0C 06 F6 | 	mov	arg03, #16
01460     94 0A B0 FD | 	call	#__system__longmove
01464     E4 00 90 FD | 	jmp	#LR__0033
01468                 | LR__0028
01468                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
01468     50 E2 05 F1 | 	add	objptr, #80
0146c     F1 08 02 F6 | 	mov	arg01, objptr
01470     50 E2 85 F1 | 	sub	objptr, #80
01474     0E 00 00 FF 
01478     18 EB 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
0147c     F5 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
01480     0E 00 00 FF 
01484     18 EB 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
01488     10 0C 06 F6 | 	mov	arg03, #16
0148c     68 0A B0 FD | 	call	#__system__longmove
01490     B8 00 90 FD | 	jmp	#LR__0033
01494                 | LR__0029
01494                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
01494     50 E2 05 F1 | 	add	objptr, #80
01498     F1 08 02 F6 | 	mov	arg01, objptr
0149c     50 E2 85 F1 | 	sub	objptr, #80
014a0     0E 00 00 FF 
014a4     58 EB 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
014a8     F5 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
014ac     0E 00 00 FF 
014b0     58 EB 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
014b4     10 0C 06 F6 | 	mov	arg03, #16
014b8     3C 0A B0 FD | 	call	#__system__longmove
014bc     8C 00 90 FD | 	jmp	#LR__0033
014c0                 | LR__0030
014c0                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
014c0     50 E2 05 F1 | 	add	objptr, #80
014c4     F1 08 02 F6 | 	mov	arg01, objptr
014c8     50 E2 85 F1 | 	sub	objptr, #80
014cc     0E 00 00 FF 
014d0     98 EB 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
014d4     F5 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
014d8     0E 00 00 FF 
014dc     98 EB 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
014e0     10 0C 06 F6 | 	mov	arg03, #16
014e4     10 0A B0 FD | 	call	#__system__longmove
014e8     60 00 90 FD | 	jmp	#LR__0033
014ec                 | LR__0031
014ec                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
014ec     50 E2 05 F1 | 	add	objptr, #80
014f0     F1 08 02 F6 | 	mov	arg01, objptr
014f4     50 E2 85 F1 | 	sub	objptr, #80
014f8     0E 00 00 FF 
014fc     D8 EB 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
01500     F5 0A 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
01504     0E 00 00 FF 
01508     D8 EB 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
0150c     10 0C 06 F6 | 	mov	arg03, #16
01510     E4 09 B0 FD | 	call	#__system__longmove
01514     34 00 90 FD | 	jmp	#LR__0033
01518                 | LR__0032
01518                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
01518     50 E2 05 F1 | 	add	objptr, #80
0151c     F1 16 02 F6 | 	mov	local04, objptr
01520     0F 00 00 FF 
01524     18 EA 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
01528     F5 18 02 F6 | 	mov	local05, ptr__hng030rm_spin2_dat__
0152c     10 1A 06 F6 | 	mov	local06, #16
01530     0B 09 02 F6 | 	mov	arg01, local04
01534     0C 0B 02 F6 | 	mov	arg02, local05
01538     10 0C 06 F6 | 	mov	arg03, #16
0153c     50 E2 85 F1 | 	sub	objptr, #80
01540     0F 00 00 FF 
01544     18 EA 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
01548     AC 09 B0 FD | 	call	#__system__longmove
0154c                 | LR__0033
0154c                 | ' 
0154c                 | ' ' 4-bit graphics: do nothing with timings :)
0154c                 | ' if mode<512
0154c     01 00 00 FF 
01550     00 10 56 F2 | 	cmps	local01, ##512 wc
01554     20 00 90 3D |  if_ae	jmp	#LR__0034
01558     0C 00 00 FF 
0155c     58 EA 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
01560     F5 1C 02 F6 | 	mov	local07, ptr__hng030rm_spin2_dat__
01564                 | '   palette_ptr:=@ataripalette
01564     18 E2 05 F1 | 	add	objptr, #24
01568     F1 1C 62 FC | 	wrlong	local07, objptr
0156c     18 E2 85 F1 | 	sub	objptr, #24
01570     0C 00 00 FF 
01574     58 EA 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
01578                 | LR__0034
01578                 | ' 
01578                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
01578     08 13 02 F6 | 	mov	local02, local01
0157c     01 00 00 FF 
01580     30 12 06 F5 | 	and	local02, ##560
01584     01 00 00 FF 
01588     30 12 0E F2 | 	cmp	local02, ##560 wz
0158c     48 00 90 5D |  if_ne	jmp	#LR__0035
01590                 | '   timings[5]:=4
01590     64 E2 05 F1 | 	add	objptr, #100
01594     F1 08 68 FC | 	wrlong	#4, objptr
01598     18 E2 05 F1 | 	add	objptr, #24
0159c     F1 1E 02 FB | 	rdlong	local08, objptr
015a0     01 1E 66 F0 | 	shl	local08, #1
015a4                 | '   timings[11]:=timings[11]<<1
015a4     F1 1E 62 FC | 	wrlong	local08, objptr
015a8                 | '   putpixel:=p8
015a8     6C E2 05 F1 | 	add	objptr, #108
015ac     F1 12 02 FB | 	rdlong	local02, objptr
015b0     10 E2 85 F1 | 	sub	objptr, #16
015b4     F1 12 62 FC | 	wrlong	local02, objptr
015b8     0C 00 00 FF 
015bc     58 EA 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
015c0     F5 20 02 F6 | 	mov	local09, ptr__hng030rm_spin2_dat__
015c4                 | '   palette_ptr:=@ataripalette
015c4     C0 E2 85 F1 | 	sub	objptr, #192
015c8     F1 20 62 FC | 	wrlong	local09, objptr
015cc     18 E2 85 F1 | 	sub	objptr, #24
015d0     0C 00 00 FF 
015d4     58 EA 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
015d8                 | LR__0035
015d8                 | ' 
015d8                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
015d8     08 13 02 F6 | 	mov	local02, local01
015dc     01 00 00 FF 
015e0     30 12 06 F5 | 	and	local02, ##560
015e4     01 00 00 FF 
015e8     10 12 0E F2 | 	cmp	local02, ##528 wz
015ec     48 00 90 5D |  if_ne	jmp	#LR__0036
015f0                 | '   timings[5]:=16
015f0     64 E2 05 F1 | 	add	objptr, #100
015f4     F1 20 68 FC | 	wrlong	#16, objptr
015f8     18 E2 05 F1 | 	add	objptr, #24
015fc     F1 22 02 FB | 	rdlong	local10, objptr
01600     01 22 46 F0 | 	shr	local10, #1
01604                 | '   timings[11]:=timings[11]>>1
01604     F1 22 62 FC | 	wrlong	local10, objptr
01608                 | '   putpixel:=p2
01608     64 E2 05 F1 | 	add	objptr, #100
0160c     F1 12 02 FB | 	rdlong	local02, objptr
01610     08 E2 85 F1 | 	sub	objptr, #8
01614     F1 12 62 FC | 	wrlong	local02, objptr
01618     0C 00 00 FF 
0161c     08 EA 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
01620     F5 24 02 F6 | 	mov	local11, ptr__hng030rm_spin2_dat__
01624                 | '   palette_ptr:=@fourcolors
01624     C0 E2 85 F1 | 	sub	objptr, #192
01628     F1 24 62 FC | 	wrlong	local11, objptr
0162c     18 E2 85 F1 | 	sub	objptr, #24
01630     0C 00 00 FF 
01634     08 EA 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
01638                 | LR__0036
01638                 | ' 
01638                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
01638     08 13 02 F6 | 	mov	local02, local01
0163c     01 00 00 FF 
01640     30 12 06 F5 | 	and	local02, ##560
01644     01 00 00 FF 
01648     00 12 0E F2 | 	cmp	local02, ##512 wz
0164c     48 00 90 5D |  if_ne	jmp	#LR__0037
01650                 | '   timings[5]:=32
01650     64 E2 05 F1 | 	add	objptr, #100
01654     F1 40 68 FC | 	wrlong	#32, objptr
01658     18 E2 05 F1 | 	add	objptr, #24
0165c     F1 26 02 FB | 	rdlong	local12, objptr
01660     02 26 46 F0 | 	shr	local12, #2
01664                 | '   timings[11]:=timings[11]>>2
01664     F1 26 62 FC | 	wrlong	local12, objptr
01668                 | '   putpixel:=p1
01668     60 E2 05 F1 | 	add	objptr, #96
0166c     F1 12 02 FB | 	rdlong	local02, objptr
01670     04 E2 85 F1 | 	sub	objptr, #4
01674     F1 12 62 FC | 	wrlong	local02, objptr
01678     0C 00 00 FF 
0167c     00 EA 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
01680     F5 28 02 F6 | 	mov	local13, ptr__hng030rm_spin2_dat__
01684                 | '   palette_ptr:=@twocolors
01684     C0 E2 85 F1 | 	sub	objptr, #192
01688     F1 28 62 FC | 	wrlong	local13, objptr
0168c     18 E2 85 F1 | 	sub	objptr, #24
01690     0C 00 00 FF 
01694     00 EA 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
01698                 | LR__0037
01698                 | ' 
01698                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
01698     08 13 02 F6 | 	mov	local02, local01
0169c     01 00 00 FF 
016a0     30 12 06 F5 | 	and	local02, ##560
016a4     01 00 00 FF 
016a8     20 12 0E F2 | 	cmp	local02, ##544 wz
016ac     30 00 90 5D |  if_ne	jmp	#LR__0038
016b0                 | '   putpixel:=p4
016b0     E4 E2 05 F1 | 	add	objptr, #228
016b4     F1 12 02 FB | 	rdlong	local02, objptr
016b8     0C E2 85 F1 | 	sub	objptr, #12
016bc     F1 12 62 FC | 	wrlong	local02, objptr
016c0     0C 00 00 FF 
016c4     18 EA 05 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
016c8     F5 2A 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
016cc                 | '   palette_ptr:=@vga16
016cc     C0 E2 85 F1 | 	sub	objptr, #192
016d0     F1 2A 62 FC | 	wrlong	local14, objptr
016d4     18 E2 85 F1 | 	sub	objptr, #24
016d8     0C 00 00 FF 
016dc     18 EA 85 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
016e0                 | LR__0038
016e0                 | ' 
016e0                 | ' repeat i from 0 to 4
016e0     00 2C 06 F6 | 	mov	local15, #0
016e4     5C E9 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
016e8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
016ec                 | LR__0039
016ec     16 2F 02 F6 | 	mov	local16, local15
016f0     02 2E 66 F0 | 	shl	local16, #2
016f4     50 E2 05 F1 | 	add	objptr, #80
016f8     F1 2E 02 F1 | 	add	local16, objptr
016fc     2C E2 85 F1 | 	sub	objptr, #44
01700     F1 30 02 FB | 	rdlong	local17, objptr
01704     24 E2 85 F1 | 	sub	objptr, #36
01708     11 30 66 F0 | 	shl	local17, #17
0170c     17 33 02 FB | 	rdlong	local18, local16
01710     18 33 02 F1 | 	add	local18, local17
01714     19 35 02 F6 | 	mov	local19, local18
01718     80 40 38 FF 
0171c     00 34 06 F1 | 	add	local19, ##1887502336
01720                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
01720     17 35 62 FC | 	wrlong	local19, local16
01724     01 2C 06 F1 | 	add	local15, #1
01728     05 2C 56 F2 | 	cmps	local15, #5 wc
0172c     BC FF 9F CD |  if_b	jmp	#LR__0039
01730                 | LR__0040
01730     24 E2 05 F1 | 	add	objptr, #36
01734     F1 36 02 FB | 	rdlong	local20, objptr
01738     11 36 66 F0 | 	shl	local20, #17
0173c     40 E2 05 F1 | 	add	objptr, #64
01740     F1 38 02 FB | 	rdlong	local21, objptr
01744     1B 39 02 F1 | 	add	local21, local20
01748                 | ' timings[5]:=timings[5]+hdmibase<<17
01748     F1 38 62 FC | 	wrlong	local21, objptr
0174c                 | ' clkfreq:=timings[13]
0174c     20 E2 05 F1 | 	add	objptr, #32
01750     F1 12 02 FB | 	rdlong	local02, objptr
01754     14 12 66 FC | 	wrlong	local02, #20
01758                 | ' hubset(timings[14])
01758     04 E2 05 F1 | 	add	objptr, #4
0175c     F1 08 02 FB | 	rdlong	arg01, objptr
01760     88 E2 85 F1 | 	sub	objptr, #136
01764     00 08 62 FD | 	hubset	arg01
01768                 | ' waitms(1)
01768     01 08 06 F6 | 	mov	arg01, #1
0176c     4C 09 B0 FD | 	call	#__system___waitms
01770     08 3B 02 F6 | 	mov	local22, local01
01774     03 3A 06 F5 | 	and	local22, #3
01778     1D 3D C2 F9 | 	decod	local23, local22
0177c                 | ' 
0177c                 | ' 
0177c                 | ' xzoom:=1<<(mode & 3)
0177c     CC E2 05 F1 | 	add	objptr, #204
01780     F1 3C 62 FC | 	wrlong	local23, objptr
01784                 | ' 
01784                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
01784     1E 17 02 F6 | 	mov	local04, local23
01788     CC E2 85 F1 | 	sub	objptr, #204
0178c     08 16 0E F2 | 	cmp	local04, #8 wz
01790     1C 00 90 5D |  if_ne	jmp	#LR__0041
01794     08 19 02 F6 | 	mov	local05, local01
01798     04 18 46 F0 | 	shr	local05, #4
0179c     03 18 06 F5 | 	and	local05, #3
017a0     03 18 0E F2 | 	cmp	local05, #3 wz
017a4                 | '   xzoom:=4
017a4     CC E2 05 51 |  if_ne	add	objptr, #204
017a8     F1 08 68 5C |  if_ne	wrlong	#4, objptr
017ac     CC E2 85 51 |  if_ne	sub	objptr, #204
017b0                 | LR__0041
017b0     08 3F 02 F6 | 	mov	local24, local01
017b4     02 3E 46 F0 | 	shr	local24, #2
017b8     03 3E 06 F5 | 	and	local24, #3
017bc     1F 1B C2 F9 | 	decod	local06, local24
017c0     D0 E2 05 F1 | 	add	objptr, #208
017c4     F1 1A 62 FC | 	wrlong	local06, objptr
017c8     04 E2 85 F1 | 	sub	objptr, #4
017cc     F1 16 02 FB | 	rdlong	local04, objptr
017d0     0D 17 02 FD | 	qmul	local04, local06
017d4                 | ' 
017d4                 | ' yzoom:=1<<((mode>>2) & 3)
017d4                 | ' azoom:=xzoom*yzoom
017d4     08 E2 05 F1 | 	add	objptr, #8
017d8                 | ' 
017d8                 | ' cpl:=timings[11]
017d8                 | ' if (mode<512)
017d8     01 00 00 FF 
017dc     00 10 56 F2 | 	cmps	local01, ##512 wc
017e0     18 40 62 FD | 	getqx	local25
017e4     F1 40 62 FC | 	wrlong	local25, objptr
017e8     58 E2 85 F1 | 	sub	objptr, #88
017ec     F1 12 02 FB | 	rdlong	local02, objptr
017f0     14 E2 05 F1 | 	add	objptr, #20
017f4     F1 12 62 FC | 	wrlong	local02, objptr
017f8     90 E2 85 F1 | 	sub	objptr, #144
017fc     64 00 90 3D |  if_ae	jmp	#LR__0042
01800     80 E2 05 F1 | 	add	objptr, #128
01804     F1 12 02 FB | 	rdlong	local02, objptr
01808     04 12 46 F0 | 	shr	local02, #4
0180c     50 E2 05 F1 | 	add	objptr, #80
01810     F1 16 02 FB | 	rdlong	local04, objptr
01814     0B 13 12 FD | 	qdiv	local02, local04
01818     3C E2 85 F1 | 	sub	objptr, #60
0181c     18 40 62 FD | 	getqx	local25
01820     F1 40 62 FC | 	wrlong	local25, objptr
01824     14 E2 85 F1 | 	sub	objptr, #20
01828     F1 18 02 FB | 	rdlong	local05, objptr
0182c     04 18 46 F0 | 	shr	local05, #4
01830     50 E2 05 F1 | 	add	objptr, #80
01834     F1 1A 02 FB | 	rdlong	local06, objptr
01838     0D 19 12 FD | 	qdiv	local05, local06
0183c                 | '   lines:=(timings[12]>>4)+/yzoom
0183c                 | '   if ((timings[12]>>4)+//yzoom) <>0
0183c     D0 E2 85 F1 | 	sub	objptr, #208
01840     19 18 62 FD | 	getqy	local05
01844     00 18 0E F2 | 	cmp	local05, #0 wz
01848     AC 00 90 AD |  if_e	jmp	#LR__0045
0184c                 | '     lines +=1
0184c     94 E2 05 F1 | 	add	objptr, #148
01850     F1 12 02 FB | 	rdlong	local02, objptr
01854     01 12 06 F1 | 	add	local02, #1
01858     F1 12 62 FC | 	wrlong	local02, objptr
0185c     94 E2 85 F1 | 	sub	objptr, #148
01860                 | ' 
01860                 | ' else
01860     94 00 90 FD | 	jmp	#LR__0045
01864                 | LR__0042
01864     80 E2 05 F1 | 	add	objptr, #128
01868     F1 72 02 FB | 	rdlong	muldiva_, objptr
0186c     50 E2 05 F1 | 	add	objptr, #80
01870     F1 74 02 FB | 	rdlong	muldivb_, objptr
01874     D0 E2 85 F1 | 	sub	objptr, #208
01878     BB 00 A0 FD | 	call	#divide_
0187c                 | '   lines:=timings[12]/yzoom
0187c     94 E2 05 F1 | 	add	objptr, #148
01880     F1 74 62 FC | 	wrlong	muldivb_, objptr
01884                 | '   if cpl//xzoom==0
01884     04 E2 85 F1 | 	sub	objptr, #4
01888     F1 72 02 FB | 	rdlong	muldiva_, objptr
0188c     3C E2 05 F1 | 	add	objptr, #60
01890     F1 74 02 FB | 	rdlong	muldivb_, objptr
01894     CC E2 85 F1 | 	sub	objptr, #204
01898     BB 00 A0 FD | 	call	#divide_
0189c     00 72 0E F2 | 	cmp	muldiva_, #0 wz
018a0     28 00 90 5D |  if_ne	jmp	#LR__0043
018a4                 | '     cpl:=cpl/xzoom
018a4     90 E2 05 F1 | 	add	objptr, #144
018a8     F1 72 02 FB | 	rdlong	muldiva_, objptr
018ac     3C E2 05 F1 | 	add	objptr, #60
018b0     F1 74 02 FB | 	rdlong	muldivb_, objptr
018b4     CC E2 85 F1 | 	sub	objptr, #204
018b8     BB 00 A0 FD | 	call	#divide_
018bc     90 E2 05 F1 | 	add	objptr, #144
018c0     F1 74 62 FC | 	wrlong	muldivb_, objptr
018c4     90 E2 85 F1 | 	sub	objptr, #144
018c8                 | '   else
018c8     2C 00 90 FD | 	jmp	#LR__0044
018cc                 | LR__0043
018cc     90 E2 05 F1 | 	add	objptr, #144
018d0     F1 72 02 FB | 	rdlong	muldiva_, objptr
018d4     3C E2 05 F1 | 	add	objptr, #60
018d8     F1 74 02 FB | 	rdlong	muldivb_, objptr
018dc     CC E2 85 F1 | 	sub	objptr, #204
018e0     BB 00 A0 FD | 	call	#divide_
018e4     3A 43 02 F6 | 	mov	local26, muldivb_
018e8     01 42 06 F1 | 	add	local26, #1
018ec                 | '     cpl:=cpl/xzoom+1
018ec     90 E2 05 F1 | 	add	objptr, #144
018f0     F1 42 62 FC | 	wrlong	local26, objptr
018f4     90 E2 85 F1 | 	sub	objptr, #144
018f8                 | LR__0044
018f8                 | LR__0045
018f8     90 E2 05 F1 | 	add	objptr, #144
018fc     F1 16 02 FB | 	rdlong	local04, objptr
01900     04 E2 05 F1 | 	add	objptr, #4
01904     F1 1A 02 FB | 	rdlong	local06, objptr
01908     0D 17 02 FD | 	qmul	local04, local06
0190c                 | ' 
0190c                 | ' buflen:=(cpl*lines)
0190c     64 E2 85 F1 | 	sub	objptr, #100
01910     13 42 C6 F9 | 	decod	local26, #19
01914                 | ' buf_ptr:=$80000-4*buflen
01914                 | ' mode_ptr:=@timings
01914                 | ' graphmode:=mode
01914                 | ' makedl(mode)
01914     08 09 02 F6 | 	mov	arg01, local01
01918                 | ' 
01918                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
01918                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
01918                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
01918                 | ' 
01918                 | ' '   0 - display a up/down border line
01918                 | ' 
01918                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
01918                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
01918                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
01918                 | ' '    nnnn - font line to display, 0..15
01918                 | ' '    llllll - character line, determines the cursor Y position
01918                 | ' 
01918                 | ' 
01918                 | ' if (mode &256==0)
01918     00 09 CE F7 | 	test	arg01, #256 wz
0191c     18 40 62 FD | 	getqx	local25
01920     F1 40 62 FC | 	wrlong	local25, objptr
01924     30 E2 85 F1 | 	sub	objptr, #48
01928     02 40 66 F0 | 	shl	local25, #2
0192c     20 43 82 F1 | 	sub	local26, local25
01930     F1 42 62 FC | 	wrlong	local26, objptr
01934     50 E2 05 F1 | 	add	objptr, #80
01938     F1 42 02 F6 | 	mov	local26, objptr
0193c     3C E2 85 F1 | 	sub	objptr, #60
01940     F1 42 62 FC | 	wrlong	local26, objptr
01944     B0 E2 05 F1 | 	add	objptr, #176
01948     F1 10 62 FC | 	wrlong	local01, objptr
0194c     C4 E2 85 F1 | 	sub	objptr, #196
01950     1C 00 90 5D |  if_ne	jmp	#LR__0046
01954     F1 42 02 FB | 	rdlong	local26, objptr
01958     04 00 00 FF 
0195c     00 43 86 F1 | 	sub	local26, ##2304
01960                 | '   dl_ptr:=buf_ptr-4*576
01960     1C E2 05 F1 | 	add	objptr, #28
01964     F1 42 62 FC | 	wrlong	local26, objptr
01968     1C E2 85 F1 | 	sub	objptr, #28
0196c                 | ' else
0196c     18 00 90 FD | 	jmp	#LR__0047
01970                 | LR__0046
01970     F1 42 02 FB | 	rdlong	local26, objptr
01974     03 00 00 FF 
01978     C0 43 86 F1 | 	sub	local26, ##1984
0197c                 | '   dl_ptr:=buf_ptr-4*496
0197c     1C E2 05 F1 | 	add	objptr, #28
01980     F1 42 62 FC | 	wrlong	local26, objptr
01984     1C E2 85 F1 | 	sub	objptr, #28
01988                 | LR__0047
01988     04 45 02 F6 | 	mov	local27, arg01
0198c     02 44 46 F0 | 	shr	local27, #2
01990     03 44 06 F5 | 	and	local27, #3
01994                 | '  ' dl_ptr:=buf_ptr-4*540
01994                 | ' 
01994                 | ' vzoom:=((mode>>2) & 3)
01994                 | ' 
01994                 | ' 
01994                 | ' if mode<512 '' text modes
01994     01 00 00 FF 
01998     00 08 56 F2 | 	cmps	arg01, ##512 wc
0199c     A8 01 90 3D |  if_ae	jmp	#LR__0055
019a0                 | ' 
019a0                 | '   if timings[6]>0 'borders
019a0     68 E2 05 F1 | 	add	objptr, #104
019a4     F1 46 02 FB | 	rdlong	local28, objptr
019a8     68 E2 85 F1 | 	sub	objptr, #104
019ac     01 46 56 F2 | 	cmps	local28, #1 wc
019b0     B4 00 90 CD |  if_b	jmp	#LR__0052
019b4                 | '     repeat i from 0 to timings[6]-1 '0 to -1
019b4     00 48 06 F6 | 	mov	local29, #0
019b8     68 E2 05 F1 | 	add	objptr, #104
019bc     F1 4A 02 FB | 	rdlong	local30, objptr
019c0     01 4A 86 F1 | 	sub	local30, #1
019c4     00 4A 56 F2 | 	cmps	local30, #0 wc
019c8     01 4C 86 F6 | 	negc	local31, #1
019cc     26 4F 02 F6 | 	mov	local32, local31
019d0     26 4B 02 F1 | 	add	local30, local31
019d4     4C E2 85 F1 | 	sub	objptr, #76
019d8     44 E6 9F FE | 	loc	pa,	#(@LR__0049-@LR__0048)
019dc     8C 00 A0 FD | 	call	#FCACHE_LOAD_
019e0                 | LR__0048
019e0     24 51 02 F6 | 	mov	local33, local29
019e4     02 50 66 F0 | 	shl	local33, #2
019e8     F1 52 02 FB | 	rdlong	local34, objptr
019ec     28 53 02 F1 | 	add	local34, local33
019f0                 | '       long[dl_ptr+4*i]:=$0
019f0     29 01 68 FC | 	wrlong	#0, local34
019f4     27 49 02 F1 | 	add	local29, local32
019f8     25 49 0A F2 | 	cmp	local29, local30 wz
019fc     E0 FF 9F 5D |  if_ne	jmp	#LR__0048
01a00                 | LR__0049
01a00                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
01a00     4C E2 05 F1 | 	add	objptr, #76
01a04     F1 54 02 FB | 	rdlong	local35, objptr
01a08     2A 49 02 F6 | 	mov	local29, local35
01a0c     18 E2 05 F1 | 	add	objptr, #24
01a10     F1 56 02 FB | 	rdlong	local36, objptr
01a14     2B 49 02 F1 | 	add	local29, local36
01a18     0C E2 05 F1 | 	add	objptr, #12
01a1c     F1 58 02 FB | 	rdlong	local37, objptr
01a20     01 58 86 F1 | 	sub	local37, #1
01a24     2B 55 02 F1 | 	add	local35, local36
01a28     2A 59 52 F2 | 	cmps	local37, local35 wc
01a2c     01 5A 86 F6 | 	negc	local38, #1
01a30     2D 5D 02 F6 | 	mov	local39, local38
01a34     2D 59 02 F1 | 	add	local37, local38
01a38     70 E2 85 F1 | 	sub	objptr, #112
01a3c     E0 E5 9F FE | 	loc	pa,	#(@LR__0051-@LR__0050)
01a40     8C 00 A0 FD | 	call	#FCACHE_LOAD_
01a44                 | LR__0050
01a44     24 5B 02 F6 | 	mov	local38, local29
01a48     02 5A 66 F0 | 	shl	local38, #2
01a4c     F1 56 02 FB | 	rdlong	local36, objptr
01a50     2D 57 02 F1 | 	add	local36, local38
01a54                 | '       long[dl_ptr+4*i]:=$0
01a54     2B 01 68 FC | 	wrlong	#0, local36
01a58     2E 49 02 F1 | 	add	local29, local39
01a5c     2C 49 0A F2 | 	cmp	local29, local37 wz
01a60     E0 FF 9F 5D |  if_ne	jmp	#LR__0050
01a64                 | LR__0051
01a64     1C E2 85 F1 | 	sub	objptr, #28
01a68                 | LR__0052
01a68     10 5E 06 F6 | 	mov	local40, #16
01a6c     22 5F 62 F0 | 	shl	local40, local27
01a70                 | '   lpc:=16<<vzoom
01a70                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
01a70     68 E2 05 F1 | 	add	objptr, #104
01a74     F1 60 02 FB | 	rdlong	local41, objptr
01a78     30 49 02 F6 | 	mov	local29, local41
01a7c     18 E2 05 F1 | 	add	objptr, #24
01a80     F1 5C 02 FB | 	rdlong	local39, objptr
01a84     2E 61 02 F1 | 	add	local41, local39
01a88     01 60 86 F1 | 	sub	local41, #1
01a8c     18 E2 85 F1 | 	sub	objptr, #24
01a90     F1 5A 02 FB | 	rdlong	local38, objptr
01a94     68 E2 85 F1 | 	sub	objptr, #104
01a98     2D 61 52 F2 | 	cmps	local41, local38 wc
01a9c     01 62 86 F6 | 	negc	local42, #1
01aa0     31 65 02 F6 | 	mov	local43, local42
01aa4     31 61 02 F1 | 	add	local41, local42
01aa8     EC E5 9F FE | 	loc	pa,	#(@LR__0054-@LR__0053)
01aac     8C 00 A0 FD | 	call	#FCACHE_LOAD_
01ab0                 | LR__0053
01ab0     24 57 02 F6 | 	mov	local36, local29
01ab4     68 E2 05 F1 | 	add	objptr, #104
01ab8     F1 62 02 FB | 	rdlong	local42, objptr
01abc     31 57 82 F1 | 	sub	local36, local42
01ac0     2F 57 12 FD | 	qdiv	local36, local40
01ac4     24 57 02 F6 | 	mov	local36, local29
01ac8     31 57 82 F1 | 	sub	local36, local42
01acc     19 62 62 FD | 	getqy	local42
01ad0     2F 57 12 FD | 	qdiv	local36, local40
01ad4     22 63 42 F0 | 	shr	local42, local27
01ad8                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
01ad8     28 E2 05 F1 | 	add	objptr, #40
01adc     F1 5C 02 FB | 	rdlong	local39, objptr
01ae0     18 5A 62 FD | 	getqx	local38
01ae4     2D 5D 02 FD | 	qmul	local39, local38
01ae8                 | '     charline:=(i-timings[6])+/lpc
01ae8     90 E2 85 F1 | 	sub	objptr, #144
01aec     F1 5C 02 FB | 	rdlong	local39, objptr
01af0     04 59 02 F6 | 	mov	local37, arg01
01af4     03 58 06 F5 | 	and	local37, #3
01af8                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
01af8     08 62 66 F0 | 	shl	local42, #8
01afc     02 5A 66 F0 | 	shl	local38, #2
01b00     24 57 02 F6 | 	mov	local36, local29
01b04     02 56 66 F0 | 	shl	local36, #2
01b08     1C E2 05 F1 | 	add	objptr, #28
01b0c     F1 54 02 FB | 	rdlong	local35, objptr
01b10     1C E2 85 F1 | 	sub	objptr, #28
01b14     2B 55 02 F1 | 	add	local35, local36
01b18                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
01b18     32 49 02 F1 | 	add	local29, local43
01b1c     30 49 0A F2 | 	cmp	local29, local41 wz
01b20     18 56 62 FD | 	getqx	local36
01b24     02 56 66 F0 | 	shl	local36, #2
01b28     2B 5D 02 F1 | 	add	local39, local36
01b2c     2C 5D 02 F1 | 	add	local39, local37
01b30     0C 5C 66 F0 | 	shl	local39, #12
01b34     31 5D 02 F1 | 	add	local39, local42
01b38     2D 5D 02 F1 | 	add	local39, local38
01b3c     01 5C 06 F1 | 	add	local39, #1
01b40     2A 5D 62 FC | 	wrlong	local39, local35
01b44     68 FF 9F 5D |  if_ne	jmp	#LR__0053
01b48                 | LR__0054
01b48                 | LR__0055
01b48                 | ' 
01b48                 | ' 
01b48                 | ' 
01b48                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
01b48     01 00 00 FF 
01b4c     00 08 56 F2 | 	cmps	arg01, ##512 wc
01b50     88 01 90 CD |  if_b	jmp	#LR__0063
01b54                 | ' 
01b54                 | '   if timings[6]>0 'borders
01b54     68 E2 05 F1 | 	add	objptr, #104
01b58     F1 46 02 FB | 	rdlong	local28, objptr
01b5c     68 E2 85 F1 | 	sub	objptr, #104
01b60     01 46 56 F2 | 	cmps	local28, #1 wc
01b64     B4 00 90 CD |  if_b	jmp	#LR__0060
01b68                 | '     repeat i from 0 to timings[6]-1 '0 to -1
01b68     00 48 06 F6 | 	mov	local29, #0
01b6c     68 E2 05 F1 | 	add	objptr, #104
01b70     F1 66 02 FB | 	rdlong	local44, objptr
01b74     01 66 86 F1 | 	sub	local44, #1
01b78     00 66 56 F2 | 	cmps	local44, #0 wc
01b7c     01 4C 86 F6 | 	negc	local31, #1
01b80     26 69 02 F6 | 	mov	local45, local31
01b84     26 67 02 F1 | 	add	local44, local31
01b88     4C E2 85 F1 | 	sub	objptr, #76
01b8c     90 E4 9F FE | 	loc	pa,	#(@LR__0057-@LR__0056)
01b90     8C 00 A0 FD | 	call	#FCACHE_LOAD_
01b94                 | LR__0056
01b94     24 5B 02 F6 | 	mov	local38, local29
01b98     02 5A 66 F0 | 	shl	local38, #2
01b9c     F1 56 02 FB | 	rdlong	local36, objptr
01ba0     2D 57 02 F1 | 	add	local36, local38
01ba4                 | '       long[dl_ptr+4*i]:=$0
01ba4     2B 01 68 FC | 	wrlong	#0, local36
01ba8     34 49 02 F1 | 	add	local29, local45
01bac     33 49 0A F2 | 	cmp	local29, local44 wz
01bb0     E0 FF 9F 5D |  if_ne	jmp	#LR__0056
01bb4                 | LR__0057
01bb4                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
01bb4     4C E2 05 F1 | 	add	objptr, #76
01bb8     F1 54 02 FB | 	rdlong	local35, objptr
01bbc     2A 49 02 F6 | 	mov	local29, local35
01bc0     18 E2 05 F1 | 	add	objptr, #24
01bc4     F1 56 02 FB | 	rdlong	local36, objptr
01bc8     2B 49 02 F1 | 	add	local29, local36
01bcc     0C E2 05 F1 | 	add	objptr, #12
01bd0     F1 6A 02 FB | 	rdlong	local46, objptr
01bd4     01 6A 86 F1 | 	sub	local46, #1
01bd8     2B 55 02 F1 | 	add	local35, local36
01bdc     2A 6B 52 F2 | 	cmps	local46, local35 wc
01be0     01 5A 86 F6 | 	negc	local38, #1
01be4     2D 6D 02 F6 | 	mov	local47, local38
01be8     2D 6B 02 F1 | 	add	local46, local38
01bec     70 E2 85 F1 | 	sub	objptr, #112
01bf0     2C E4 9F FE | 	loc	pa,	#(@LR__0059-@LR__0058)
01bf4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
01bf8                 | LR__0058
01bf8     24 69 02 F6 | 	mov	local45, local29
01bfc     02 68 66 F0 | 	shl	local45, #2
01c00     F1 66 02 FB | 	rdlong	local44, objptr
01c04     34 67 02 F1 | 	add	local44, local45
01c08                 | '       long[dl_ptr+4*i]:=$0
01c08     33 01 68 FC | 	wrlong	#0, local44
01c0c     36 49 02 F1 | 	add	local29, local47
01c10     35 49 0A F2 | 	cmp	local29, local46 wz
01c14     E0 FF 9F 5D |  if_ne	jmp	#LR__0058
01c18                 | LR__0059
01c18     1C E2 85 F1 | 	sub	objptr, #28
01c1c                 | LR__0060
01c1c                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
01c1c     68 E2 05 F1 | 	add	objptr, #104
01c20     F1 6E 02 FB | 	rdlong	local48, objptr
01c24     37 49 02 F6 | 	mov	local29, local48
01c28     18 E2 05 F1 | 	add	objptr, #24
01c2c     F1 6C 02 FB | 	rdlong	local47, objptr
01c30     36 6F 02 F1 | 	add	local48, local47
01c34     01 6E 86 F1 | 	sub	local48, #1
01c38     18 E2 85 F1 | 	sub	objptr, #24
01c3c     F1 5A 02 FB | 	rdlong	local38, objptr
01c40     68 E2 85 F1 | 	sub	objptr, #104
01c44     2D 6F 52 F2 | 	cmps	local48, local38 wc
01c48     01 62 86 F6 | 	negc	local42, #1
01c4c     31 71 02 F6 | 	mov	local49, local42
01c50     31 6F 02 F1 | 	add	local48, local42
01c54     28 E4 9F FE | 	loc	pa,	#(@LR__0062-@LR__0061)
01c58     8C 00 A0 FD | 	call	#FCACHE_LOAD_
01c5c                 | LR__0061
01c5c     24 6D 02 F6 | 	mov	local47, local29
01c60     68 E2 05 F1 | 	add	objptr, #104
01c64     F1 6A 02 FB | 	rdlong	local46, objptr
01c68     35 6D 82 F1 | 	sub	local47, local46
01c6c     22 6D 42 F0 | 	shr	local47, local27
01c70     28 E2 05 F1 | 	add	objptr, #40
01c74     F1 6A 02 FB | 	rdlong	local46, objptr
01c78     36 6B 02 FD | 	qmul	local46, local47
01c7c     90 E2 85 F1 | 	sub	objptr, #144
01c80     F1 6C 02 FB | 	rdlong	local47, objptr
01c84     04 6B 02 F6 | 	mov	local46, arg01
01c88     03 6A 06 F5 | 	and	local46, #3
01c8c                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
01c8c     04 69 02 F6 | 	mov	local45, arg01
01c90     30 68 06 F5 | 	and	local45, #48
01c94     02 68 46 F0 | 	shr	local45, #2
01c98     24 67 02 F6 | 	mov	local44, local29
01c9c     02 66 66 F0 | 	shl	local44, #2
01ca0     1C E2 05 F1 | 	add	objptr, #28
01ca4     F1 64 02 FB | 	rdlong	local43, objptr
01ca8     1C E2 85 F1 | 	sub	objptr, #28
01cac     33 65 02 F1 | 	add	local43, local44
01cb0                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
01cb0     38 49 02 F1 | 	add	local29, local49
01cb4     37 49 0A F2 | 	cmp	local29, local48 wz
01cb8     18 66 62 FD | 	getqx	local44
01cbc     02 66 66 F0 | 	shl	local44, #2
01cc0     33 6D 02 F1 | 	add	local47, local44
01cc4     35 6D 02 F1 | 	add	local47, local46
01cc8     0C 6C 66 F0 | 	shl	local47, #12
01ccc     02 6C 06 F1 | 	add	local47, #2
01cd0     34 6D 02 F1 | 	add	local47, local45
01cd4     32 6D 62 FC | 	wrlong	local47, local43
01cd8     80 FF 9F 5D |  if_ne	jmp	#LR__0061
01cdc                 | LR__0062
01cdc                 | LR__0063
01cdc                 | LR__0064
01cdc     A8 F0 03 F6 | 	mov	ptra, fp
01ce0     B3 00 A0 FD | 	call	#popregs_
01ce4                 | _hng030rm_spin2_setmode_ret
01ce4     2D 00 64 FD | 	ret
01ce8                 | hubexit
01ce8     81 00 80 FD | 	jmp	#cogexit
01cec                 | 
01cec                 | __system___setbaud
01cec     14 72 06 FB | 	rdlong	muldiva_, #20
01cf0     04 75 02 F6 | 	mov	muldivb_, arg01
01cf4     BB 00 A0 FD | 	call	#divide_
01cf8     40 7C 64 FD | 	dirl	#62
01cfc     40 7E 64 FD | 	dirl	#63
01d00     F4 74 62 FC | 	wrlong	muldivb_, ptr___system__dat__
01d04     10 74 66 F0 | 	shl	muldivb_, #16
01d08     07 0A 06 F6 | 	mov	arg02, #7
01d0c     3A 0B 02 F1 | 	add	arg02, muldivb_
01d10     3E F8 0C FC | 	wrpin	#124, #62
01d14     3E 0A 16 FC | 	wxpin	arg02, #62
01d18     3F 7C 0C FC | 	wrpin	#62, #63
01d1c     14 0A 06 F1 | 	add	arg02, #20
01d20     3F 0A 16 FC | 	wxpin	arg02, #63
01d24     41 7C 64 FD | 	dirh	#62
01d28     41 7E 64 FD | 	dirh	#63
01d2c                 | __system___setbaud_ret
01d2c     2D 00 64 FD | 	ret
01d30                 | 
01d30                 | __system___txraw
01d30     01 4C 05 F6 | 	mov	COUNT_, #1
01d34     A9 00 A0 FD | 	call	#pushregs_
01d38     04 11 02 F6 | 	mov	local01, arg01
01d3c     F4 F6 09 FB | 	rdlong	result1, ptr___system__dat__ wz
01d40     C2 01 00 AF 
01d44     00 08 06 A6 |  if_e	mov	arg01, ##230400
01d48     A0 FF BF AD |  if_e	call	#__system___setbaud
01d4c     3E 10 26 FC | 	wypin	local01, #62
01d50     1F 02 64 FD | 	waitx	#1
01d54     B0 E2 9F FE | 	loc	pa,	#(@LR__0066-@LR__0065)
01d58     8C 00 A0 FD | 	call	#FCACHE_LOAD_
01d5c                 | LR__0065
01d5c     40 7C 74 FD | 	testp	#62 wc
01d60     F8 FF 9F 3D |  if_ae	jmp	#LR__0065
01d64                 | LR__0066
01d64     01 F6 05 F6 | 	mov	result1, #1
01d68     A8 F0 03 F6 | 	mov	ptra, fp
01d6c     B3 00 A0 FD | 	call	#popregs_
01d70                 | __system___txraw_ret
01d70     2D 00 64 FD | 	ret
01d74                 | 
01d74                 | __system___rxraw
01d74     0F 4C 05 F6 | 	mov	COUNT_, #15
01d78     A9 00 A0 FD | 	call	#pushregs_
01d7c     04 11 02 F6 | 	mov	local01, arg01
01d80     F4 12 0A FB | 	rdlong	local02, ptr___system__dat__ wz
01d84     C2 01 00 AF 
01d88     00 08 06 A6 |  if_e	mov	arg01, ##230400
01d8c     5C FF BF AD |  if_e	call	#__system___setbaud
01d90     00 10 0E F2 | 	cmp	local01, #0 wz
01d94     1C 00 90 AD |  if_e	jmp	#LR__0067
01d98     14 14 06 FB | 	rdlong	local03, #20
01d9c     0A 14 46 F0 | 	shr	local03, #10
01da0     0A 11 02 FD | 	qmul	local01, local03
01da4     1A F6 61 FD | 	getct	result1
01da8     18 16 62 FD | 	getqx	local04
01dac     0B F7 01 F1 | 	add	result1, local04
01db0     FB 18 02 F6 | 	mov	local05, result1
01db4                 | LR__0067
01db4     01 1A 66 F6 | 	neg	local06, #1
01db8     3F 1C 06 F6 | 	mov	local07, #63
01dbc     00 1E 06 F6 | 	mov	local08, #0
01dc0     04 E8 05 F1 | 	add	ptr___system__dat__, #4
01dc4     F4 20 02 FB | 	rdlong	local09, ptr___system__dat__
01dc8     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
01dcc                 | LR__0068
01dcc     08 20 16 F4 | 	testb	local09, #8 wc
01dd0     09 20 76 F4 | 	testbn	local09, #9 andc
01dd4     0A 20 46 F0 | 	shr	local09, #10
01dd8     01 1E 06 C6 |  if_b	mov	local08, #1
01ddc     40 7E 6C 3D |  if_ae	testp	#63 wz
01de0     01 1E 06 26 |  if_nc_and_z	mov	local08, #1
01de4     3F 20 8E 2A |  if_nc_and_z	rdpin	local09, #63
01de8     04 20 46 20 |  if_nc_and_z	shr	local09, #4
01dec                 | LR__0069
01dec     00 12 06 F6 | 	mov	local02, #0
01df0     00 1E 0E F2 | 	cmp	local08, #0 wz
01df4     01 12 66 56 |  if_ne	neg	local02, #1
01df8     00 22 06 F6 | 	mov	local10, #0
01dfc     00 24 06 F6 | 	mov	local11, #0
01e00     00 10 0E F2 | 	cmp	local01, #0 wz
01e04     01 24 66 56 |  if_ne	neg	local11, #1
01e08     00 26 06 F6 | 	mov	local12, #0
01e0c     00 28 06 F6 | 	mov	local13, #0
01e10     1A F6 61 FD | 	getct	result1
01e14     FB 2A 02 F6 | 	mov	local14, result1
01e18     15 2D 02 F6 | 	mov	local15, local14
01e1c     0C 2D 82 F1 | 	sub	local15, local05
01e20     00 2C 56 F2 | 	cmps	local15, #0 wc
01e24     00 28 26 C6 |  if_b	not	local13, #0
01e28     00 28 0E F2 | 	cmp	local13, #0 wz
01e2c     00 26 26 56 |  if_ne	not	local12, #0
01e30     13 25 CA F7 | 	test	local11, local12 wz
01e34     00 22 26 56 |  if_ne	not	local10, #0
01e38     11 13 4A F5 | 	or	local02, local10 wz
01e3c     8C FF 9F AD |  if_e	jmp	#LR__0068
01e40     00 1E 0E F2 | 	cmp	local08, #0 wz
01e44     10 1B 02 56 |  if_ne	mov	local06, local09
01e48     0D 1B E2 58 |  if_ne	getbyte	local06, local06, #0
01e4c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
01e50     F4 20 62 FC | 	wrlong	local09, ptr___system__dat__
01e54     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
01e58     0D F7 01 F6 | 	mov	result1, local06
01e5c     A8 F0 03 F6 | 	mov	ptra, fp
01e60     B3 00 A0 FD | 	call	#popregs_
01e64                 | __system___rxraw_ret
01e64     2D 00 64 FD | 	ret
01e68                 | 
01e68                 | __system____builtin_memmove
01e68     04 FD 01 F6 | 	mov	_var01, arg01
01e6c     05 09 52 F2 | 	cmps	arg01, arg02 wc
01e70     50 00 90 3D |  if_ae	jmp	#LR__0077
01e74     A8 E1 9F FE | 	loc	pa,	#(@LR__0071-@LR__0070)
01e78     8C 00 A0 FD | 	call	#FCACHE_LOAD_
01e7c                 | LR__0070
01e7c     04 0C 56 F2 | 	cmps	arg03, #4 wc
01e80     18 00 90 CD |  if_b	jmp	#LR__0072
01e84     05 F7 01 FB | 	rdlong	result1, arg02
01e88     04 F7 61 FC | 	wrlong	result1, arg01
01e8c     04 08 06 F1 | 	add	arg01, #4
01e90     04 0A 06 F1 | 	add	arg02, #4
01e94     04 0C 86 F1 | 	sub	arg03, #4
01e98     E0 FF 9F FD | 	jmp	#LR__0070
01e9c                 | LR__0071
01e9c                 | LR__0072
01e9c     06 FF 09 F6 | 	mov	_var02, arg03 wz
01ea0     4C 00 90 AD |  if_e	jmp	#LR__0083
01ea4     6C E1 9F FE | 	loc	pa,	#(@LR__0075-@LR__0073)
01ea8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
01eac                 | LR__0073
01eac     FF 08 D8 FC | 	rep	@LR__0076, _var02
01eb0                 | LR__0074
01eb0     05 FF C1 FA | 	rdbyte	_var02, arg02
01eb4     04 FF 41 FC | 	wrbyte	_var02, arg01
01eb8     01 08 06 F1 | 	add	arg01, #1
01ebc     01 0A 06 F1 | 	add	arg02, #1
01ec0                 | LR__0075
01ec0                 | LR__0076
01ec0     2C 00 90 FD | 	jmp	#LR__0083
01ec4                 | LR__0077
01ec4     06 09 02 F1 | 	add	arg01, arg03
01ec8     06 0B 02 F1 | 	add	arg02, arg03
01ecc     06 01 0A F6 | 	mov	_var03, arg03 wz
01ed0     1C 00 90 AD |  if_e	jmp	#LR__0082
01ed4     3C E1 9F FE | 	loc	pa,	#(@LR__0080-@LR__0078)
01ed8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
01edc                 | LR__0078
01edc     00 09 D8 FC | 	rep	@LR__0081, _var03
01ee0                 | LR__0079
01ee0     01 08 86 F1 | 	sub	arg01, #1
01ee4     01 0A 86 F1 | 	sub	arg02, #1
01ee8     05 03 C2 FA | 	rdbyte	_var04, arg02
01eec     04 03 42 FC | 	wrbyte	_var04, arg01
01ef0                 | LR__0080
01ef0                 | LR__0081
01ef0                 | LR__0082
01ef0                 | LR__0083
01ef0     FE F6 01 F6 | 	mov	result1, _var01
01ef4                 | __system____builtin_memmove_ret
01ef4     2D 00 64 FD | 	ret
01ef8                 | 
01ef8                 | __system__longmove
01ef8     04 FD 01 F6 | 	mov	_var01, arg01
01efc     05 09 52 F2 | 	cmps	arg01, arg02 wc
01f00     28 00 90 3D |  if_ae	jmp	#LR__0088
01f04     06 FF 09 F6 | 	mov	_var02, arg03 wz
01f08     54 00 90 AD |  if_e	jmp	#LR__0094
01f0c     04 E1 9F FE | 	loc	pa,	#(@LR__0086-@LR__0084)
01f10     8C 00 A0 FD | 	call	#FCACHE_LOAD_
01f14                 | LR__0084
01f14     FF 08 D8 FC | 	rep	@LR__0087, _var02
01f18                 | LR__0085
01f18     05 FF 01 FB | 	rdlong	_var02, arg02
01f1c     04 FF 61 FC | 	wrlong	_var02, arg01
01f20     04 08 06 F1 | 	add	arg01, #4
01f24     04 0A 06 F1 | 	add	arg02, #4
01f28                 | LR__0086
01f28                 | LR__0087
01f28     34 00 90 FD | 	jmp	#LR__0094
01f2c                 | LR__0088
01f2c     06 01 02 F6 | 	mov	_var03, arg03
01f30     02 00 66 F0 | 	shl	_var03, #2
01f34     00 09 02 F1 | 	add	arg01, _var03
01f38     00 0B 02 F1 | 	add	arg02, _var03
01f3c     06 03 0A F6 | 	mov	_var04, arg03 wz
01f40     1C 00 90 AD |  if_e	jmp	#LR__0093
01f44     CC E0 9F FE | 	loc	pa,	#(@LR__0091-@LR__0089)
01f48     8C 00 A0 FD | 	call	#FCACHE_LOAD_
01f4c                 | LR__0089
01f4c     01 09 D8 FC | 	rep	@LR__0092, _var04
01f50                 | LR__0090
01f50     04 08 86 F1 | 	sub	arg01, #4
01f54     04 0A 86 F1 | 	sub	arg02, #4
01f58     05 05 02 FB | 	rdlong	_var05, arg02
01f5c     04 05 62 FC | 	wrlong	_var05, arg01
01f60                 | LR__0091
01f60                 | LR__0092
01f60                 | LR__0093
01f60                 | LR__0094
01f60     FE F6 01 F6 | 	mov	result1, _var01
01f64                 | __system__longmove_ret
01f64     2D 00 64 FD | 	ret
01f68                 | 
01f68                 | __system____topofstack
01f68     00 4C 05 F6 | 	mov	COUNT_, #0
01f6c     A9 00 A0 FD | 	call	#pushregs_
01f70     0C F0 07 F1 | 	add	ptra, #12
01f74     04 50 05 F1 | 	add	fp, #4
01f78     A8 08 62 FC | 	wrlong	arg01, fp
01f7c     A8 F6 01 F6 | 	mov	result1, fp
01f80     04 50 85 F1 | 	sub	fp, #4
01f84     A8 F0 03 F6 | 	mov	ptra, fp
01f88     B3 00 A0 FD | 	call	#popregs_
01f8c                 | __system____topofstack_ret
01f8c     2D 00 64 FD | 	ret
01f90                 | 
01f90                 | __system___make_methodptr
01f90     02 4C 05 F6 | 	mov	COUNT_, #2
01f94     A9 00 A0 FD | 	call	#pushregs_
01f98     04 11 02 F6 | 	mov	local01, arg01
01f9c     05 13 02 F6 | 	mov	local02, arg02
01fa0     08 08 06 F6 | 	mov	arg01, #8
01fa4     E8 0E B0 FD | 	call	#__system___gc_alloc_managed
01fa8     00 F6 4D F2 | 	cmps	result1, #0 wz
01fac     FB 10 62 5C |  if_ne	wrlong	local01, result1
01fb0     FB 10 02 56 |  if_ne	mov	local01, result1
01fb4     04 10 06 51 |  if_ne	add	local01, #4
01fb8     08 13 62 5C |  if_ne	wrlong	local02, local01
01fbc     A8 F0 03 F6 | 	mov	ptra, fp
01fc0     B3 00 A0 FD | 	call	#popregs_
01fc4                 | __system___make_methodptr_ret
01fc4     2D 00 64 FD | 	ret
01fc8                 | 
01fc8                 | __system___lockmem
01fc8     01 4C 05 F6 | 	mov	COUNT_, #1
01fcc     A9 00 A0 FD | 	call	#pushregs_
01fd0     00 F6 05 F6 | 	mov	result1, #0
01fd4     01 F6 61 FD | 	cogid	result1
01fd8     00 F7 05 F1 | 	add	result1, #256
01fdc                 | LR__0095
01fdc     04 11 0A FB | 	rdlong	local01, arg01 wz
01fe0     04 F7 61 AC |  if_e	wrlong	result1, arg01
01fe4     04 11 02 AB |  if_e	rdlong	local01, arg01
01fe8     04 11 02 AB |  if_e	rdlong	local01, arg01
01fec     FB 10 0A F2 | 	cmp	local01, result1 wz
01ff0     E8 FF 9F 5D |  if_ne	jmp	#LR__0095
01ff4     A8 F0 03 F6 | 	mov	ptra, fp
01ff8     B3 00 A0 FD | 	call	#popregs_
01ffc                 | __system___lockmem_ret
01ffc     2D 00 64 FD | 	ret
02000                 | 
02000                 | __system___tx
02000     02 4C 05 F6 | 	mov	COUNT_, #2
02004     A9 00 A0 FD | 	call	#pushregs_
02008     04 11 02 F6 | 	mov	local01, arg01
0200c     0A 10 0E F2 | 	cmp	local01, #10 wz
02010     18 00 90 5D |  if_ne	jmp	#LR__0096
02014     08 E8 05 F1 | 	add	ptr___system__dat__, #8
02018     F4 12 02 FB | 	rdlong	local02, ptr___system__dat__
0201c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
02020     02 12 CE F7 | 	test	local02, #2 wz
02024     0D 08 06 56 |  if_ne	mov	arg01, #13
02028     04 FD BF 5D |  if_ne	call	#__system___txraw
0202c                 | LR__0096
0202c     08 09 02 F6 | 	mov	arg01, local01
02030     FC FC BF FD | 	call	#__system___txraw
02034     A8 F0 03 F6 | 	mov	ptra, fp
02038     B3 00 A0 FD | 	call	#popregs_
0203c                 | __system___tx_ret
0203c     2D 00 64 FD | 	ret
02040                 | 
02040                 | __system___rx
02040     01 4C 05 F6 | 	mov	COUNT_, #1
02044     A9 00 A0 FD | 	call	#pushregs_
02048                 | LR__0097
02048     00 08 06 F6 | 	mov	arg01, #0
0204c     24 FD BF FD | 	call	#__system___rxraw
02050     FB 10 02 F6 | 	mov	local01, result1
02054     FF FF 7F FF 
02058     FF 11 0E F2 | 	cmp	local01, ##-1 wz
0205c     E8 FF 9F AD |  if_e	jmp	#LR__0097
02060     0D 10 0E F2 | 	cmp	local01, #13 wz
02064     14 00 90 5D |  if_ne	jmp	#LR__0098
02068     08 E8 05 F1 | 	add	ptr___system__dat__, #8
0206c     F4 F6 01 FB | 	rdlong	result1, ptr___system__dat__
02070     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
02074     02 F6 CD F7 | 	test	result1, #2 wz
02078     0A 10 06 56 |  if_ne	mov	local01, #10
0207c                 | LR__0098
0207c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
02080     F4 08 02 FB | 	rdlong	arg01, ptr___system__dat__
02084     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
02088     01 08 CE F7 | 	test	arg01, #1 wz
0208c     1C 00 90 AD |  if_e	jmp	#LR__0101
02090     7F 10 0E F2 | 	cmp	local01, #127 wz
02094     0C 00 90 5D |  if_ne	jmp	#LR__0099
02098     08 08 06 F6 | 	mov	arg01, #8
0209c     60 FF BF FD | 	call	#__system___tx
020a0     08 00 90 FD | 	jmp	#LR__0100
020a4                 | LR__0099
020a4     08 09 02 F6 | 	mov	arg01, local01
020a8     54 FF BF FD | 	call	#__system___tx
020ac                 | LR__0100
020ac                 | LR__0101
020ac     08 F7 01 F6 | 	mov	result1, local01
020b0     A8 F0 03 F6 | 	mov	ptra, fp
020b4     B3 00 A0 FD | 	call	#popregs_
020b8                 | __system___rx_ret
020b8     2D 00 64 FD | 	ret
020bc                 | 
020bc                 | __system___waitms
020bc     03 4C 05 F6 | 	mov	COUNT_, #3
020c0     A9 00 A0 FD | 	call	#pushregs_
020c4     04 11 02 F6 | 	mov	local01, arg01
020c8     14 12 06 FB | 	rdlong	local02, #20
020cc     48 DF 9F FE | 	loc	pa,	#(@LR__0103-@LR__0102)
020d0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
020d4                 | LR__0102
020d4     01 00 00 FF 
020d8     E9 11 56 F2 | 	cmps	local01, ##1001 wc
020dc     1F 12 62 3D |  if_ae	waitx	local02
020e0     01 00 00 3F 
020e4     E8 11 86 31 |  if_ae	sub	local01, ##1000
020e8     E8 FF 9F 3D |  if_ae	jmp	#LR__0102
020ec                 | LR__0103
020ec     0C E8 05 F1 | 	add	ptr___system__dat__, #12
020f0     F4 14 0A FB | 	rdlong	local03, ptr___system__dat__ wz
020f4     0C E8 85 F1 | 	sub	ptr___system__dat__, #12
020f8     1C 00 90 5D |  if_ne	jmp	#LR__0104
020fc     01 00 00 FF 
02100     E8 13 16 FD | 	qdiv	local02, ##1000
02104     0C E8 05 F1 | 	add	ptr___system__dat__, #12
02108     18 12 62 FD | 	getqx	local02
0210c     09 15 02 F6 | 	mov	local03, local02
02110     F4 12 62 FC | 	wrlong	local02, ptr___system__dat__
02114     0C E8 85 F1 | 	sub	ptr___system__dat__, #12
02118                 | LR__0104
02118     01 10 56 F2 | 	cmps	local01, #1 wc
0211c     0A 11 02 3D |  if_ae	qmul	local01, local03
02120     18 08 62 3D |  if_ae	getqx	arg01
02124     1F 08 62 3D |  if_ae	waitx	arg01
02128     A8 F0 03 F6 | 	mov	ptra, fp
0212c     B3 00 A0 FD | 	call	#popregs_
02130                 | __system___waitms_ret
02130     2D 00 64 FD | 	ret
02134                 | 
02134                 | __system___basic_open
02134     05 4C 05 F6 | 	mov	COUNT_, #5
02138     A9 00 A0 FD | 	call	#pushregs_
0213c     05 11 02 F6 | 	mov	local01, arg02
02140     06 13 02 F6 | 	mov	local02, arg03
02144     07 15 02 F6 | 	mov	local03, arg04
02148     00 16 06 F6 | 	mov	local04, #0
0214c     D0 18 B0 FD | 	call	#__system____getftab
02150     FB 18 0A F6 | 	mov	local05, result1 wz
02154     18 00 90 5D |  if_ne	jmp	#LR__0105
02158     EE 08 02 F6 | 	mov	arg01, abortchain
0215c     0C 0A 06 F6 | 	mov	arg02, #12
02160     01 0C 06 F6 | 	mov	arg03, #1
02164     DB 00 A0 FD | 	call	#__longjmp
02168     01 F6 65 F6 | 	neg	result1, #1
0216c     FC 00 90 FD | 	jmp	#LR__0113
02170                 | LR__0105
02170     08 18 06 F1 | 	add	local05, #8
02174     0C F7 09 FB | 	rdlong	result1, local05 wz
02178     08 18 86 F1 | 	sub	local05, #8
0217c     0C 09 02 56 |  if_ne	mov	arg01, local05
02180     84 12 B0 5D |  if_ne	call	#__system___closeraw
02184     00 10 0E F2 | 	cmp	local01, #0 wz
02188     00 12 0E A2 |  if_e	cmp	local02, #0 wz
0218c     38 00 90 AD |  if_e	jmp	#LR__0107
02190     08 08 06 F6 | 	mov	arg01, #8
02194     F8 0C B0 FD | 	call	#__system___gc_alloc_managed
02198     FB 16 0A F6 | 	mov	local04, result1 wz
0219c     18 00 90 5D |  if_ne	jmp	#LR__0106
021a0     EE 08 02 F6 | 	mov	arg01, abortchain
021a4     07 0A 06 F6 | 	mov	arg02, #7
021a8     01 0C 06 F6 | 	mov	arg03, #1
021ac     DB 00 A0 FD | 	call	#__longjmp
021b0     01 F6 65 F6 | 	neg	result1, #1
021b4     B4 00 90 FD | 	jmp	#LR__0113
021b8                 | LR__0106
021b8     0B 01 68 FC | 	wrlong	#0, local04
021bc     04 16 06 F1 | 	add	local04, #4
021c0     0B 01 68 FC | 	wrlong	#0, local04
021c4     04 16 86 F1 | 	sub	local04, #4
021c8                 | LR__0107
021c8     00 10 0E F2 | 	cmp	local01, #0 wz
021cc     48 00 90 AD |  if_e	jmp	#LR__0109
021d0     08 08 06 F6 | 	mov	arg01, #8
021d4     B8 0C B0 FD | 	call	#__system___gc_alloc_managed
021d8     FB 16 0A F6 | 	mov	local04, result1 wz
021dc     18 00 90 5D |  if_ne	jmp	#LR__0108
021e0     EE 08 02 F6 | 	mov	arg01, abortchain
021e4     07 0A 06 F6 | 	mov	arg02, #7
021e8     01 0C 06 F6 | 	mov	arg03, #1
021ec     DB 00 A0 FD | 	call	#__longjmp
021f0     01 F6 65 F6 | 	neg	result1, #1
021f4     74 00 90 FD | 	jmp	#LR__0113
021f8                 | LR__0108
021f8     0B 11 62 FC | 	wrlong	local01, local04
021fc     F3 0A 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
02200     0B 09 02 F6 | 	mov	arg01, local04
02204     88 FD BF FD | 	call	#__system___make_methodptr
02208     18 18 06 F1 | 	add	local05, #24
0220c     0C F7 61 FC | 	wrlong	result1, local05
02210     18 18 86 F1 | 	sub	local05, #24
02214     0C 00 90 FD | 	jmp	#LR__0110
02218                 | LR__0109
02218     18 18 06 F1 | 	add	local05, #24
0221c     0C 01 68 FC | 	wrlong	#0, local05
02220     18 18 86 F1 | 	sub	local05, #24
02224                 | LR__0110
02224     08 18 06 F1 | 	add	local05, #8
02228     0C 0F 68 FC | 	wrlong	#7, local05
0222c     08 18 86 F1 | 	sub	local05, #8
02230     00 12 0E F2 | 	cmp	local02, #0 wz
02234     1C 00 90 AD |  if_e	jmp	#LR__0111
02238     F2 0A 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_rx_
0223c     0B 09 02 F6 | 	mov	arg01, local04
02240     4C FD BF FD | 	call	#__system___make_methodptr
02244     1C 18 06 F1 | 	add	local05, #28
02248     0C F7 61 FC | 	wrlong	result1, local05
0224c     1C 18 86 F1 | 	sub	local05, #28
02250     0C 00 90 FD | 	jmp	#LR__0112
02254                 | LR__0111
02254     1C 18 06 F1 | 	add	local05, #28
02258     0C 01 68 FC | 	wrlong	#0, local05
0225c     1C 18 86 F1 | 	sub	local05, #28
02260                 | LR__0112
02260     20 18 06 F1 | 	add	local05, #32
02264     0C 15 62 FC | 	wrlong	local03, local05
02268     00 F6 05 F6 | 	mov	result1, #0
0226c                 | LR__0113
0226c     A8 F0 03 F6 | 	mov	ptra, fp
02270     B3 00 A0 FD | 	call	#popregs_
02274                 | __system___basic_open_ret
02274     2D 00 64 FD | 	ret
02278                 | 
02278                 | __system___float_fromuns
02278     04 0D 0A F6 | 	mov	arg03, arg01 wz
0227c     06 F7 01 A6 |  if_e	mov	result1, arg03
02280     24 00 90 AD |  if_e	jmp	#LR__0114
02284     06 0B 92 F7 | 	encod	arg02, arg03 wc
02288     01 0A 06 C1 |  if_b	add	arg02, #1
0228c     01 0A 86 F1 | 	sub	arg02, #1
02290     1F 08 06 F6 | 	mov	arg01, #31
02294     05 09 82 F1 | 	sub	arg01, arg02
02298     04 0D 62 F0 | 	shl	arg03, arg01
0229c     02 0C 46 F0 | 	shr	arg03, #2
022a0     00 08 06 F6 | 	mov	arg01, #0
022a4     70 08 B0 FD | 	call	#__system___float_Pack
022a8                 | LR__0114
022a8                 | __system___float_fromuns_ret
022a8     2D 00 64 FD | 	ret
022ac                 | 
022ac                 | __system___float_add
022ac     18 4C 05 F6 | 	mov	COUNT_, #24
022b0     A9 00 A0 FD | 	call	#pushregs_
022b4     04 11 02 F6 | 	mov	local01, arg01
022b8     05 13 02 F6 | 	mov	local02, arg02
022bc     00 14 06 F6 | 	mov	local03, #0
022c0     08 17 02 F6 | 	mov	local04, local01
022c4     0B 19 02 F6 | 	mov	local05, local04
022c8     09 18 66 F0 | 	shl	local05, #9
022cc     0C 1B 02 F6 | 	mov	local06, local05
022d0     09 1A 46 F0 | 	shr	local06, #9
022d4     0D 1D 02 F6 | 	mov	local07, local06
022d8     0B 1F 02 F6 | 	mov	local08, local04
022dc     01 1E 66 F0 | 	shl	local08, #1
022e0     0F 21 02 F6 | 	mov	local09, local08
022e4     18 20 46 F0 | 	shr	local09, #24
022e8     10 23 02 F6 | 	mov	local10, local09
022ec     1F 16 46 F0 | 	shr	local04, #31
022f0     09 09 02 F6 | 	mov	arg01, local02
022f4     04 F7 01 F6 | 	mov	result1, arg01
022f8     FB 24 02 F6 | 	mov	local11, result1
022fc     09 24 66 F0 | 	shl	local11, #9
02300     12 27 02 F6 | 	mov	local12, local11
02304     09 26 46 F0 | 	shr	local12, #9
02308     13 29 02 F6 | 	mov	local13, local12
0230c     FB 2A 02 F6 | 	mov	local14, result1
02310     01 2A 66 F0 | 	shl	local14, #1
02314     15 2D 02 F6 | 	mov	local15, local14
02318     18 2C 46 F0 | 	shr	local15, #24
0231c     16 2F 02 F6 | 	mov	local16, local15
02320     FB 30 02 F6 | 	mov	local17, result1
02324     1F 30 46 F0 | 	shr	local17, #31
02328     18 33 02 F6 | 	mov	local18, local17
0232c     00 34 06 F6 | 	mov	local19, #0
02330     00 36 06 F6 | 	mov	local20, #0
02334     17 23 12 F2 | 	cmp	local10, local16 wc
02338     17 23 0A 32 |  if_ae	cmp	local10, local16 wz
0233c     2C 00 90 1D |  if_a	jmp	#LR__0115
02340     14 1D 12 32 |  if_ae	cmp	local07, local13 wc
02344     24 00 90 3D |  if_ae	jmp	#LR__0115
02348     0E 39 02 F6 | 	mov	local21, local07
0234c     14 1D 02 F6 | 	mov	local07, local13
02350     1C 29 02 F6 | 	mov	local13, local21
02354     11 39 02 F6 | 	mov	local21, local10
02358     17 23 02 F6 | 	mov	local10, local16
0235c     1C 2F 02 F6 | 	mov	local16, local21
02360     0B 39 02 F6 | 	mov	local21, local04
02364     19 17 02 F6 | 	mov	local04, local18
02368     1C 33 02 F6 | 	mov	local18, local21
0236c                 | LR__0115
0236c     FF 22 0E F2 | 	cmp	local10, #255 wz
02370     80 01 90 AD |  if_e	jmp	#LR__0130
02374     00 22 0E F2 | 	cmp	local10, #0 wz
02378     BC 01 90 AD |  if_e	jmp	#LR__0132
0237c     17 1C 26 F4 | 	bith	local07, #23
02380                 | LR__0116
02380     00 2E 0E F2 | 	cmp	local16, #0 wz
02384     04 02 90 AD |  if_e	jmp	#LR__0136
02388     17 28 26 F4 | 	bith	local13, #23
0238c                 | LR__0117
0238c     7F 22 86 F1 | 	sub	local10, #127
02390     17 31 02 F6 | 	mov	local17, local16
02394     7F 30 86 F1 | 	sub	local17, #127
02398     18 2F 02 F6 | 	mov	local16, local17
0239c     11 3B 02 F6 | 	mov	local22, local10
023a0     17 3B 82 F1 | 	sub	local22, local16
023a4     1D 3D 02 F6 | 	mov	local23, local22
023a8     7C DC 9F FE | 	loc	pa,	#(@LR__0119-@LR__0118)
023ac     8C 00 A0 FD | 	call	#FCACHE_LOAD_
023b0                 | LR__0118
023b0     20 3C 56 F2 | 	cmps	local23, #32 wc
023b4     20 00 90 CD |  if_b	jmp	#LR__0120
023b8     00 34 0E F2 | 	cmp	local19, #0 wz
023bc     6F 34 62 FD | 	wrnz	local19
023c0     14 35 42 F5 | 	or	local19, local13
023c4     00 28 06 F6 | 	mov	local13, #0
023c8     1E 31 02 F6 | 	mov	local17, local23
023cc     20 30 86 F1 | 	sub	local17, #32
023d0     18 3D 02 F6 | 	mov	local23, local17
023d4     D8 FF 9F FD | 	jmp	#LR__0118
023d8                 | LR__0119
023d8                 | LR__0120
023d8     00 3C 0E F2 | 	cmp	local23, #0 wz
023dc     38 00 90 AD |  if_e	jmp	#LR__0121
023e0     14 3B 02 F6 | 	mov	local22, local13
023e4     20 38 06 F6 | 	mov	local21, #32
023e8     1E 39 82 F1 | 	sub	local21, local23
023ec     1C 3B 62 F0 | 	shl	local22, local21
023f0     1A 39 02 F6 | 	mov	local21, local19
023f4     20 30 06 F6 | 	mov	local17, #32
023f8     1E 31 82 F1 | 	sub	local17, local23
023fc     18 39 6A F0 | 	shl	local21, local17 wz
02400     1E 35 42 F0 | 	shr	local19, local23
02404     1E 29 42 F0 | 	shr	local13, local23
02408     1D 35 42 F5 | 	or	local19, local22
0240c     00 3E 06 F6 | 	mov	local24, #0
02410     01 3E 06 56 |  if_ne	mov	local24, #1
02414     1F 35 42 F5 | 	or	local19, local24
02418                 | LR__0121
02418     0B 3F 02 F6 | 	mov	local24, local04
0241c     19 3F 62 F5 | 	xor	local24, local18
02420     01 3E CE F7 | 	test	local24, #1 wz
02424     18 00 90 AD |  if_e	jmp	#LR__0122
02428     14 29 22 F6 | 	not	local13, local13
0242c     1A 35 22 F6 | 	not	local19, local19
02430     01 34 0E F1 | 	add	local19, #1 wz
02434     00 3E 06 F6 | 	mov	local24, #0
02438     01 3E 06 A6 |  if_e	mov	local24, #1
0243c     1F 29 02 F1 | 	add	local13, local24
02440                 | LR__0122
02440     1A 37 12 F1 | 	add	local20, local19 wc
02444     14 1D 22 F1 | 	addx	local07, local13
02448     00 1C 56 F2 | 	cmps	local07, #0 wc
0244c     1C 00 90 3D |  if_ae	jmp	#LR__0123
02450     01 16 66 F5 | 	xor	local04, #1
02454     0E 1D 22 F6 | 	not	local07, local07
02458     1B 37 22 F6 | 	not	local20, local20
0245c     01 36 0E F1 | 	add	local20, #1 wz
02460     00 3E 06 F6 | 	mov	local24, #0
02464     01 3E 06 A6 |  if_e	mov	local24, #1
02468     1F 1D 02 F1 | 	add	local07, local24
0246c                 | LR__0123
0246c     00 80 00 FF 
02470     00 1C 16 F2 | 	cmp	local07, ##16777216 wc
02474     28 00 90 CD |  if_b	jmp	#LR__0124
02478     01 22 06 F1 | 	add	local10, #1
0247c     1B 3F 02 F6 | 	mov	local24, local20
02480     01 3E 06 F5 | 	and	local24, #1
02484     01 36 46 F0 | 	shr	local20, #1
02488     0E 3D 02 F6 | 	mov	local23, local07
0248c     1F 3C 66 F0 | 	shl	local23, #31
02490     1E 37 42 F5 | 	or	local20, local23
02494     1F 37 42 F5 | 	or	local20, local24
02498     01 1C 46 F0 | 	shr	local07, #1
0249c     3C 00 90 FD | 	jmp	#LR__0129
024a0                 | LR__0124
024a0     00 40 00 FF 
024a4     00 1C 16 F2 | 	cmp	local07, ##8388608 wc
024a8     30 00 90 3D |  if_ae	jmp	#LR__0128
024ac     00 1C 0E F2 | 	cmp	local07, #0 wz
024b0     00 36 0E A2 |  if_e	cmp	local20, #0 wz
024b4     08 16 46 A5 |  if_e	or	local04, #8
024b8     01 16 26 A5 |  if_e	andn	local04, #1
024bc     1C 00 90 AD |  if_e	jmp	#LR__0127
024c0                 | LR__0125
024c0     00 40 00 FF 
024c4     00 1C 16 F2 | 	cmp	local07, ##8388608 wc
024c8     10 00 90 3D |  if_ae	jmp	#LR__0126
024cc     1B 37 12 F1 | 	add	local20, local20 wc
024d0     0E 1D 22 F1 | 	addx	local07, local07
024d4     01 22 86 F1 | 	sub	local10, #1
024d8     E4 FF 9F FD | 	jmp	#LR__0125
024dc                 | LR__0126
024dc                 | LR__0127
024dc                 | LR__0128
024dc                 | LR__0129
024dc     0E 09 02 F6 | 	mov	arg01, local07
024e0     1B 0B 02 F6 | 	mov	arg02, local20
024e4     11 0D 02 F6 | 	mov	arg03, local10
024e8     0B 0F 02 F6 | 	mov	arg04, local04
024ec     5C 15 B0 FD | 	call	#__system__pack_0145
024f0     E4 00 90 FD | 	jmp	#LR__0140
024f4                 | LR__0130
024f4     FF 2E 0E F2 | 	cmp	local16, #255 wz
024f8     10 00 90 5D |  if_ne	jmp	#LR__0131
024fc     0B 33 0A F2 | 	cmp	local18, local04 wz
02500     00 F8 3F 5F 
02504     00 F6 05 56 |  if_ne	mov	result1, ##2146435072
02508     CC 00 90 5D |  if_ne	jmp	#LR__0140
0250c                 | LR__0131
0250c     00 1C 0E F2 | 	cmp	local07, #0 wz
02510     00 F8 3F 5F 
02514     00 F6 05 56 |  if_ne	mov	result1, ##2146435072
02518     BC 00 90 5D |  if_ne	jmp	#LR__0140
0251c     0B 0F 02 F6 | 	mov	arg04, local04
02520     02 0E 46 F5 | 	or	arg04, #2
02524     1B 0B 02 F6 | 	mov	arg02, local20
02528     11 0D 02 F6 | 	mov	arg03, local10
0252c     0E 09 02 F6 | 	mov	arg01, local07
02530     18 15 B0 FD | 	call	#__system__pack_0145
02534     A0 00 90 FD | 	jmp	#LR__0140
02538                 | LR__0132
02538     00 1C 0E F2 | 	cmp	local07, #0 wz
0253c     2C 00 90 AD |  if_e	jmp	#LR__0135
02540     01 1C 66 F0 | 	shl	local07, #1
02544     D4 DA 9F FE | 	loc	pa,	#(@LR__0134-@LR__0133)
02548     8C 00 A0 FD | 	call	#FCACHE_LOAD_
0254c                 | LR__0133
0254c     00 40 00 FF 
02550     00 1C 16 F2 | 	cmp	local07, ##8388608 wc
02554     11 3F 02 C6 |  if_b	mov	local24, local10
02558     01 3E 86 C1 |  if_b	sub	local24, #1
0255c     1F 23 02 C6 |  if_b	mov	local10, local24
02560     01 1C 66 C0 |  if_b	shl	local07, #1
02564     E4 FF 9F CD |  if_b	jmp	#LR__0133
02568                 | LR__0134
02568     14 FE 9F FD | 	jmp	#LR__0116
0256c                 | LR__0135
0256c     19 17 02 F5 | 	and	local04, local18
02570     0B 0F 02 F6 | 	mov	arg04, local04
02574     08 0E 46 F5 | 	or	arg04, #8
02578     00 08 06 F6 | 	mov	arg01, #0
0257c     00 0A 06 F6 | 	mov	arg02, #0
02580     00 0C 06 F6 | 	mov	arg03, #0
02584     C4 14 B0 FD | 	call	#__system__pack_0145
02588     4C 00 90 FD | 	jmp	#LR__0140
0258c                 | LR__0136
0258c     00 28 0E F2 | 	cmp	local13, #0 wz
02590     2C 00 90 AD |  if_e	jmp	#LR__0139
02594     01 28 66 F0 | 	shl	local13, #1
02598     80 DA 9F FE | 	loc	pa,	#(@LR__0138-@LR__0137)
0259c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
025a0                 | LR__0137
025a0     00 40 00 FF 
025a4     00 28 16 F2 | 	cmp	local13, ##8388608 wc
025a8     17 3F 02 C6 |  if_b	mov	local24, local16
025ac     01 3E 86 C1 |  if_b	sub	local24, #1
025b0     1F 2F 02 C6 |  if_b	mov	local16, local24
025b4     01 28 66 C0 |  if_b	shl	local13, #1
025b8     E4 FF 9F CD |  if_b	jmp	#LR__0137
025bc                 | LR__0138
025bc     CC FD 9F FD | 	jmp	#LR__0117
025c0                 | LR__0139
025c0     11 0D 02 F6 | 	mov	arg03, local10
025c4     7F 0C 86 F1 | 	sub	arg03, #127
025c8     1B 0B 02 F6 | 	mov	arg02, local20
025cc     0B 0F 02 F6 | 	mov	arg04, local04
025d0     0E 09 02 F6 | 	mov	arg01, local07
025d4     74 14 B0 FD | 	call	#__system__pack_0145
025d8                 | LR__0140
025d8     A8 F0 03 F6 | 	mov	ptra, fp
025dc     B3 00 A0 FD | 	call	#popregs_
025e0                 | __system___float_add_ret
025e0     2D 00 64 FD | 	ret
025e4                 | 
025e4                 | __system___float_mul
025e4     15 4C 05 F6 | 	mov	COUNT_, #21
025e8     A9 00 A0 FD | 	call	#pushregs_
025ec     04 11 02 F6 | 	mov	local01, arg01
025f0     05 13 02 F6 | 	mov	local02, arg02
025f4     08 15 02 F6 | 	mov	local03, local01
025f8     0A 17 02 F6 | 	mov	local04, local03
025fc     09 16 66 F0 | 	shl	local04, #9
02600     0B 19 02 F6 | 	mov	local05, local04
02604     09 18 46 F0 | 	shr	local05, #9
02608     0C 1B 02 F6 | 	mov	local06, local05
0260c     0A 1D 02 F6 | 	mov	local07, local03
02610     01 1C 66 F0 | 	shl	local07, #1
02614     0E 1F 02 F6 | 	mov	local08, local07
02618     18 1E 46 F0 | 	shr	local08, #24
0261c     0F 21 02 F6 | 	mov	local09, local08
02620     1F 14 46 F0 | 	shr	local03, #31
02624     09 09 02 F6 | 	mov	arg01, local02
02628     04 F7 01 F6 | 	mov	result1, arg01
0262c     FB 22 02 F6 | 	mov	local10, result1
02630     11 25 02 F6 | 	mov	local11, local10
02634     12 27 02 F6 | 	mov	local12, local11
02638     09 26 66 F0 | 	shl	local12, #9
0263c     13 29 02 F6 | 	mov	local13, local12
02640     09 28 46 F0 | 	shr	local13, #9
02644     14 2B 02 F6 | 	mov	local14, local13
02648     12 2D 02 F6 | 	mov	local15, local11
0264c     01 2C 66 F0 | 	shl	local15, #1
02650     16 2F 02 F6 | 	mov	local16, local15
02654     18 2E 46 F0 | 	shr	local16, #24
02658     17 31 02 F6 | 	mov	local17, local16
0265c     1F 24 46 F0 | 	shr	local11, #31
02660     00 32 06 F6 | 	mov	local18, #0
02664     12 15 62 F5 | 	xor	local03, local11
02668     FF 20 0E F2 | 	cmp	local09, #255 wz
0266c     7C 00 90 AD |  if_e	jmp	#LR__0144
02670     FF 30 0E F2 | 	cmp	local17, #255 wz
02674     CC 00 90 AD |  if_e	jmp	#LR__0147
02678     00 20 0E F2 | 	cmp	local09, #0 wz
0267c     00 01 90 AD |  if_e	jmp	#LR__0148
02680     17 1A 26 F4 | 	bith	local06, #23
02684                 | LR__0141
02684     00 30 0E F2 | 	cmp	local17, #0 wz
02688     44 01 90 AD |  if_e	jmp	#LR__0152
0268c     17 2A 26 F4 | 	bith	local14, #23
02690                 | LR__0142
02690     04 1A 66 F0 | 	shl	local06, #4
02694     05 2A 66 F0 | 	shl	local14, #5
02698     15 1B 02 FD | 	qmul	local06, local14
0269c     10 35 02 F6 | 	mov	local19, local09
026a0     18 35 02 F1 | 	add	local19, local17
026a4     FE 34 86 F1 | 	sub	local19, #254
026a8     18 32 62 FD | 	getqx	local18
026ac     19 36 62 FD | 	getqy	local20
026b0     00 80 00 FF 
026b4     00 36 16 F2 | 	cmp	local20, ##16777216 wc
026b8     18 00 90 CD |  if_b	jmp	#LR__0143
026bc     01 34 06 F1 | 	add	local19, #1
026c0     01 32 46 F0 | 	shr	local18, #1
026c4     1B 31 02 F6 | 	mov	local17, local20
026c8     1F 30 66 F0 | 	shl	local17, #31
026cc     18 33 42 F5 | 	or	local18, local17
026d0     01 36 46 F0 | 	shr	local20, #1
026d4                 | LR__0143
026d4     1B 09 02 F6 | 	mov	arg01, local20
026d8     19 0B 02 F6 | 	mov	arg02, local18
026dc     1A 0D 02 F6 | 	mov	arg03, local19
026e0     0A 0F 02 F6 | 	mov	arg04, local03
026e4     64 13 B0 FD | 	call	#__system__pack_0145
026e8     28 01 90 FD | 	jmp	#LR__0156
026ec                 | LR__0144
026ec     00 1A 0E F2 | 	cmp	local06, #0 wz
026f0     08 F7 01 56 |  if_ne	mov	result1, local01
026f4     1C 01 90 5D |  if_ne	jmp	#LR__0156
026f8     FF 30 56 F2 | 	cmps	local17, #255 wc
026fc     1C 00 90 3D |  if_ae	jmp	#LR__0145
02700     00 30 0E F2 | 	cmp	local17, #0 wz
02704     20 00 90 5D |  if_ne	jmp	#LR__0146
02708     00 2A 0E F2 | 	cmp	local14, #0 wz
0270c     18 00 90 5D |  if_ne	jmp	#LR__0146
02710     00 F8 3F FF 
02714     00 F6 05 F6 | 	mov	result1, ##2146435072
02718     F8 00 90 FD | 	jmp	#LR__0156
0271c                 | LR__0145
0271c     00 2A 0E F2 | 	cmp	local14, #0 wz
02720     09 F7 01 56 |  if_ne	mov	result1, local02
02724     EC 00 90 5D |  if_ne	jmp	#LR__0156
02728                 | LR__0146
02728     02 14 46 F5 | 	or	local03, #2
0272c     00 08 06 F6 | 	mov	arg01, #0
02730     00 0A 06 F6 | 	mov	arg02, #0
02734     10 0D 02 F6 | 	mov	arg03, local09
02738     0A 0F 02 F6 | 	mov	arg04, local03
0273c     0C 13 B0 FD | 	call	#__system__pack_0145
02740     D0 00 90 FD | 	jmp	#LR__0156
02744                 | LR__0147
02744     00 20 0E F2 | 	cmp	local09, #0 wz
02748     00 1A 0E A2 |  if_e	cmp	local06, #0 wz
0274c     00 F8 3F AF 
02750     00 F6 05 A6 |  if_e	mov	result1, ##2146435072
02754     BC 00 90 AD |  if_e	jmp	#LR__0156
02758     00 2A 0E F2 | 	cmp	local14, #0 wz
0275c     09 F7 01 56 |  if_ne	mov	result1, local02
02760     B0 00 90 5D |  if_ne	jmp	#LR__0156
02764     0A 0F 02 F6 | 	mov	arg04, local03
02768     02 0E 46 F5 | 	or	arg04, #2
0276c     18 0D 02 F6 | 	mov	arg03, local17
02770     00 08 06 F6 | 	mov	arg01, #0
02774     00 0A 06 F6 | 	mov	arg02, #0
02778     D0 12 B0 FD | 	call	#__system__pack_0145
0277c     94 00 90 FD | 	jmp	#LR__0156
02780                 | LR__0148
02780     00 1A 0E F2 | 	cmp	local06, #0 wz
02784     2C 00 90 AD |  if_e	jmp	#LR__0151
02788     01 1A 66 F0 | 	shl	local06, #1
0278c     8C D8 9F FE | 	loc	pa,	#(@LR__0150-@LR__0149)
02790     8C 00 A0 FD | 	call	#FCACHE_LOAD_
02794                 | LR__0149
02794     00 40 00 FF 
02798     00 1A 16 F2 | 	cmp	local06, ##8388608 wc
0279c     10 39 02 C6 |  if_b	mov	local21, local09
027a0     01 38 86 C1 |  if_b	sub	local21, #1
027a4     1C 21 02 C6 |  if_b	mov	local09, local21
027a8     01 1A 66 C0 |  if_b	shl	local06, #1
027ac     E4 FF 9F CD |  if_b	jmp	#LR__0149
027b0                 | LR__0150
027b0     D0 FE 9F FD | 	jmp	#LR__0141
027b4                 | LR__0151
027b4     08 14 46 F5 | 	or	local03, #8
027b8     00 08 06 F6 | 	mov	arg01, #0
027bc     00 0A 06 F6 | 	mov	arg02, #0
027c0     00 0C 06 F6 | 	mov	arg03, #0
027c4     0A 0F 02 F6 | 	mov	arg04, local03
027c8     80 12 B0 FD | 	call	#__system__pack_0145
027cc     44 00 90 FD | 	jmp	#LR__0156
027d0                 | LR__0152
027d0     00 2A 0E F2 | 	cmp	local14, #0 wz
027d4     24 00 90 AD |  if_e	jmp	#LR__0155
027d8     01 2A 66 F0 | 	shl	local14, #1
027dc     34 D8 9F FE | 	loc	pa,	#(@LR__0154-@LR__0153)
027e0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
027e4                 | LR__0153
027e4     00 40 00 FF 
027e8     00 2A 16 F2 | 	cmp	local14, ##8388608 wc
027ec     01 30 86 C1 |  if_b	sub	local17, #1
027f0     01 2A 66 C0 |  if_b	shl	local14, #1
027f4     EC FF 9F CD |  if_b	jmp	#LR__0153
027f8                 | LR__0154
027f8     94 FE 9F FD | 	jmp	#LR__0142
027fc                 | LR__0155
027fc     0A 0F 02 F6 | 	mov	arg04, local03
02800     08 0E 46 F5 | 	or	arg04, #8
02804     00 08 06 F6 | 	mov	arg01, #0
02808     00 0A 06 F6 | 	mov	arg02, #0
0280c     00 0C 06 F6 | 	mov	arg03, #0
02810     38 12 B0 FD | 	call	#__system__pack_0145
02814                 | LR__0156
02814     A8 F0 03 F6 | 	mov	ptra, fp
02818     B3 00 A0 FD | 	call	#popregs_
0281c                 | __system___float_mul_ret
0281c     2D 00 64 FD | 	ret
02820                 | 
02820                 | __system___float_div
02820     16 4C 05 F6 | 	mov	COUNT_, #22
02824     A9 00 A0 FD | 	call	#pushregs_
02828     04 15 02 F6 | 	mov	local03, arg01
0282c     05 17 02 F6 | 	mov	local04, arg02
02830     0A 19 02 F6 | 	mov	local05, local03
02834     0C 1B 02 F6 | 	mov	local06, local05
02838     09 1A 66 F0 | 	shl	local06, #9
0283c     0D 1D 02 F6 | 	mov	local07, local06
02840     09 1C 46 F0 | 	shr	local07, #9
02844     0E 1F 02 F6 | 	mov	local08, local07
02848     0C 21 02 F6 | 	mov	local09, local05
0284c     01 20 66 F0 | 	shl	local09, #1
02850     10 23 02 F6 | 	mov	local10, local09
02854     18 22 46 F0 | 	shr	local10, #24
02858     11 25 02 F6 | 	mov	local11, local10
0285c     1F 18 46 F0 | 	shr	local05, #31
02860     0B F7 01 F6 | 	mov	result1, local04
02864     FB 26 02 F6 | 	mov	local12, result1
02868     13 29 02 F6 | 	mov	local13, local12
0286c     09 28 66 F0 | 	shl	local13, #9
02870     14 2B 02 F6 | 	mov	local14, local13
02874     09 2A 46 F0 | 	shr	local14, #9
02878     15 2D 02 F6 | 	mov	local15, local14
0287c     13 2F 02 F6 | 	mov	local16, local12
02880     01 2E 66 F0 | 	shl	local16, #1
02884     17 31 02 F6 | 	mov	local17, local16
02888     18 30 46 F0 | 	shr	local17, #24
0288c     18 33 02 F6 | 	mov	local18, local17
02890     1F 26 46 F0 | 	shr	local12, #31
02894     13 19 62 F5 | 	xor	local05, local12
02898     FF 24 0E F2 | 	cmp	local11, #255 wz
0289c     D4 00 90 AD |  if_e	jmp	#LR__0162
028a0     FF 32 0E F2 | 	cmp	local18, #255 wz
028a4     04 01 90 AD |  if_e	jmp	#LR__0163
028a8     00 24 0E F2 | 	cmp	local11, #0 wz
028ac     24 01 90 AD |  if_e	jmp	#LR__0164
028b0     17 1E 26 F4 | 	bith	local08, #23
028b4                 | LR__0157
028b4     00 32 0E F2 | 	cmp	local18, #0 wz
028b8     74 01 90 AD |  if_e	jmp	#LR__0168
028bc     17 2C 26 F4 | 	bith	local15, #23
028c0                 | LR__0158
028c0     12 35 02 F6 | 	mov	local19, local11
028c4     19 35 82 F1 | 	sub	local19, local18
028c8     0F 09 02 F6 | 	mov	arg01, local08
028cc     02 08 46 F0 | 	shr	arg01, #2
028d0     0F 0B 02 F6 | 	mov	arg02, local08
028d4     1E 0A 66 F0 | 	shl	arg02, #30
028d8     16 0D 02 F6 | 	mov	arg03, local15
028dc     28 08 62 FD | 	setq	arg01
028e0     06 0B 12 FD | 	qdiv	arg02, arg03
028e4     00 36 06 F6 | 	mov	local20, #0
028e8     18 10 62 FD | 	getqx	local01
028ec     19 F8 61 FD | 	getqy	result2
028f0     FC 12 02 F6 | 	mov	local02, result2
028f4     08 39 02 F6 | 	mov	local21, local01
028f8     00 12 4E F2 | 	cmps	local02, #0 wz
028fc     1C 3B 02 F6 | 	mov	local22, local21
02900     19 3A 66 F0 | 	shl	local22, #25
02904     01 36 06 56 |  if_ne	mov	local20, #1
02908     1B 3B 42 F5 | 	or	local22, local20
0290c     07 38 46 F0 | 	shr	local21, #7
02910     00 80 00 FF 
02914     00 38 16 F2 | 	cmp	local21, ##16777216 wc
02918     1C 00 90 CD |  if_b	jmp	#LR__0159
0291c     01 34 06 F1 | 	add	local19, #1
02920     01 3A 46 F0 | 	shr	local22, #1
02924     1C 37 02 F6 | 	mov	local20, local21
02928     1F 36 66 F0 | 	shl	local20, #31
0292c     1B 3B 42 F5 | 	or	local22, local20
02930     01 38 46 F0 | 	shr	local21, #1
02934     24 00 90 FD | 	jmp	#LR__0161
02938                 | LR__0159
02938     00 40 00 FF 
0293c     00 38 16 F2 | 	cmp	local21, ##8388608 wc
02940     18 00 90 3D |  if_ae	jmp	#LR__0160
02944     01 34 86 F1 | 	sub	local19, #1
02948     01 38 66 F0 | 	shl	local21, #1
0294c     1D 37 02 F6 | 	mov	local20, local22
02950     1F 36 46 F0 | 	shr	local20, #31
02954     1B 39 42 F5 | 	or	local21, local20
02958     01 3A 66 F0 | 	shl	local22, #1
0295c                 | LR__0160
0295c                 | LR__0161
0295c     1C 09 02 F6 | 	mov	arg01, local21
02960     1D 0B 02 F6 | 	mov	arg02, local22
02964     1A 0D 02 F6 | 	mov	arg03, local19
02968     0C 0F 02 F6 | 	mov	arg04, local05
0296c     DC 10 B0 FD | 	call	#__system__pack_0145
02970     00 01 90 FD | 	jmp	#LR__0172
02974                 | LR__0162
02974     00 1E 0E F2 | 	cmp	local08, #0 wz
02978     0A F7 01 56 |  if_ne	mov	result1, local03
0297c     F4 00 90 5D |  if_ne	jmp	#LR__0172
02980     FF 32 0E F2 | 	cmp	local18, #255 wz
02984     00 F8 3F AF 
02988     00 F6 05 A6 |  if_e	mov	result1, ##2146435072
0298c     E4 00 90 AD |  if_e	jmp	#LR__0172
02990     02 18 46 F5 | 	or	local05, #2
02994     00 08 06 F6 | 	mov	arg01, #0
02998     00 0A 06 F6 | 	mov	arg02, #0
0299c     12 0D 02 F6 | 	mov	arg03, local11
029a0     0C 0F 02 F6 | 	mov	arg04, local05
029a4     A4 10 B0 FD | 	call	#__system__pack_0145
029a8     C8 00 90 FD | 	jmp	#LR__0172
029ac                 | LR__0163
029ac     00 2C 0E F2 | 	cmp	local15, #0 wz
029b0     0B F7 01 56 |  if_ne	mov	result1, local04
029b4     BC 00 90 5D |  if_ne	jmp	#LR__0172
029b8     0C 0F 02 F6 | 	mov	arg04, local05
029bc     08 0E 46 F5 | 	or	arg04, #8
029c0     00 08 06 F6 | 	mov	arg01, #0
029c4     00 0A 06 F6 | 	mov	arg02, #0
029c8     00 0C 06 F6 | 	mov	arg03, #0
029cc     7C 10 B0 FD | 	call	#__system__pack_0145
029d0     A0 00 90 FD | 	jmp	#LR__0172
029d4                 | LR__0164
029d4     00 1E 0E F2 | 	cmp	local08, #0 wz
029d8     24 00 90 AD |  if_e	jmp	#LR__0167
029dc     01 1E 66 F0 | 	shl	local08, #1
029e0     30 D6 9F FE | 	loc	pa,	#(@LR__0166-@LR__0165)
029e4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
029e8                 | LR__0165
029e8     00 40 00 FF 
029ec     00 1E 16 F2 | 	cmp	local08, ##8388608 wc
029f0     01 24 86 C1 |  if_b	sub	local11, #1
029f4     01 1E 66 C0 |  if_b	shl	local08, #1
029f8     EC FF 9F CD |  if_b	jmp	#LR__0165
029fc                 | LR__0166
029fc     B4 FE 9F FD | 	jmp	#LR__0157
02a00                 | LR__0167
02a00     00 32 0E F2 | 	cmp	local18, #0 wz
02a04     00 2C 0E A2 |  if_e	cmp	local15, #0 wz
02a08     00 F8 3F AF 
02a0c     00 F6 05 A6 |  if_e	mov	result1, ##2146435072
02a10     60 00 90 AD |  if_e	jmp	#LR__0172
02a14     0C 0F 02 F6 | 	mov	arg04, local05
02a18     08 0E 46 F5 | 	or	arg04, #8
02a1c     00 08 06 F6 | 	mov	arg01, #0
02a20     00 0A 06 F6 | 	mov	arg02, #0
02a24     00 0C 06 F6 | 	mov	arg03, #0
02a28     20 10 B0 FD | 	call	#__system__pack_0145
02a2c     44 00 90 FD | 	jmp	#LR__0172
02a30                 | LR__0168
02a30     00 2C 0E F2 | 	cmp	local15, #0 wz
02a34     24 00 90 AD |  if_e	jmp	#LR__0171
02a38     01 2C 66 F0 | 	shl	local15, #1
02a3c     D4 D5 9F FE | 	loc	pa,	#(@LR__0170-@LR__0169)
02a40     8C 00 A0 FD | 	call	#FCACHE_LOAD_
02a44                 | LR__0169
02a44     00 40 00 FF 
02a48     00 2C 16 F2 | 	cmp	local15, ##8388608 wc
02a4c     01 32 86 C1 |  if_b	sub	local18, #1
02a50     01 2C 66 C0 |  if_b	shl	local15, #1
02a54     EC FF 9F CD |  if_b	jmp	#LR__0169
02a58                 | LR__0170
02a58     64 FE 9F FD | 	jmp	#LR__0158
02a5c                 | LR__0171
02a5c     0C 0F 02 F6 | 	mov	arg04, local05
02a60     02 0E 46 F5 | 	or	arg04, #2
02a64     00 08 06 F6 | 	mov	arg01, #0
02a68     00 0A 06 F6 | 	mov	arg02, #0
02a6c     00 0C 06 F6 | 	mov	arg03, #0
02a70     D8 0F B0 FD | 	call	#__system__pack_0145
02a74                 | LR__0172
02a74     A8 F0 03 F6 | 	mov	ptra, fp
02a78     B3 00 A0 FD | 	call	#popregs_
02a7c                 | __system___float_div_ret
02a7c     2D 00 64 FD | 	ret
02a80                 | 
02a80                 | __system___float_cmp
02a80     04 FD 01 F6 | 	mov	_var01, arg01
02a84     00 C0 3F FF 
02a88     01 FC 55 F2 | 	cmps	_var01, ##2139095041 wc
02a8c     00 C0 3F CF 
02a90     01 0A 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
02a94     06 F7 01 36 |  if_ae	mov	result1, arg03
02a98     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
02a9c     00 C0 7F FF 
02aa0     01 FC 15 F2 | 	cmp	_var01, ##-8388607 wc
02aa4     00 C0 7F CF 
02aa8     01 FC 15 C2 |  if_b	cmp	_var01, ##-8388607 wc
02aac     06 F7 01 36 |  if_ae	mov	result1, arg03
02ab0     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
02ab4     00 FC 55 F2 | 	cmps	_var01, #0 wc
02ab8     2C 00 90 3D |  if_ae	jmp	#LR__0173
02abc     00 0A 56 F2 | 	cmps	arg02, #0 wc
02ac0     05 F7 01 C6 |  if_b	mov	result1, arg02
02ac4     FE F6 81 C1 |  if_b	sub	result1, _var01
02ac8     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
02acc     00 0A 0E F2 | 	cmp	arg02, #0 wz
02ad0     00 00 40 AF 
02ad4     00 FC 0D A2 |  if_e	cmp	_var01, ##-2147483648 wz
02ad8     00 F6 05 A6 |  if_e	mov	result1, #0
02adc     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
02ae0     01 F6 65 F6 | 	neg	result1, #1
02ae4     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
02ae8                 | LR__0173
02ae8     00 0A 56 F2 | 	cmps	arg02, #0 wc
02aec     1C 00 90 3D |  if_ae	jmp	#LR__0174
02af0     00 FC 0D F2 | 	cmp	_var01, #0 wz
02af4     00 00 40 AF 
02af8     00 0A 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
02afc     00 F6 05 A6 |  if_e	mov	result1, #0
02b00     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
02b04     01 F6 05 F6 | 	mov	result1, #1
02b08     08 00 90 FD | 	jmp	#__system___float_cmp_ret
02b0c                 | LR__0174
02b0c     05 FD 81 F1 | 	sub	_var01, arg02
02b10     FE F6 01 F6 | 	mov	result1, _var01
02b14                 | __system___float_cmp_ret
02b14     2D 00 64 FD | 	ret
02b18                 | 
02b18                 | __system___float_Pack
02b18     00 FC 05 F6 | 	mov	_var01, #0
02b1c     00 0C 0E F2 | 	cmp	arg03, #0 wz
02b20     80 00 90 AD |  if_e	jmp	#LR__0176
02b24     06 FF 91 F7 | 	encod	_var02, arg03 wc
02b28     01 FE 05 C1 |  if_b	add	_var02, #1
02b2c     21 FC 05 F6 | 	mov	_var01, #33
02b30     FF FC 81 F1 | 	sub	_var01, _var02
02b34     FE 0C 62 F0 | 	shl	arg03, _var01
02b38     03 FE 05 F6 | 	mov	_var02, #3
02b3c     FE FE 81 F1 | 	sub	_var02, _var01
02b40     FF 0A 02 F1 | 	add	arg02, _var02
02b44     00 0D 06 F1 | 	add	arg03, #256
02b48     06 FF 01 F6 | 	mov	_var02, arg03
02b4c     FF FE 2D F5 | 	andn	_var02, #255 wz
02b50     01 0A 06 A1 |  if_e	add	arg02, #1
02b54     7F 0A 06 F1 | 	add	arg02, #127
02b58     FF FF 7F FF 
02b5c     E9 0B 46 F3 | 	fges	arg02, ##-23
02b60     FF 0A 66 F3 | 	fles	arg02, #255
02b64     01 0A 56 F2 | 	cmps	arg02, #1 wc
02b68     1C 00 90 3D |  if_ae	jmp	#LR__0175
02b6c     01 0C 46 F0 | 	shr	arg03, #1
02b70     1F FE C5 F9 | 	decod	_var02, #31
02b74     06 FF 01 F1 | 	add	_var02, arg03
02b78     05 0B 62 F6 | 	neg	arg02, arg02
02b7c     05 FF 41 F0 | 	shr	_var02, arg02
02b80     FF 0C 02 F6 | 	mov	arg03, _var02
02b84     00 0A 06 F6 | 	mov	arg02, #0
02b88                 | LR__0175
02b88     1F 08 66 F0 | 	shl	arg01, #31
02b8c     04 F7 01 F6 | 	mov	result1, arg01
02b90     17 0A 66 F0 | 	shl	arg02, #23
02b94     05 F7 41 F5 | 	or	result1, arg02
02b98     09 0C 46 F0 | 	shr	arg03, #9
02b9c     06 F7 41 F5 | 	or	result1, arg03
02ba0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
02ba4                 | LR__0176
02ba4     FE F6 01 F6 | 	mov	result1, _var01
02ba8                 | __system___float_Pack_ret
02ba8     2D 00 64 FD | 	ret
02bac                 | 
02bac                 | __system___gc_ptrs
02bac     02 4C 05 F6 | 	mov	COUNT_, #2
02bb0     A9 00 A0 FD | 	call	#pushregs_
02bb4     ED 10 02 F6 | 	mov	local01, __heap_ptr
02bb8     08 13 02 F6 | 	mov	local02, local01
02bbc     07 00 00 FF 
02bc0     F8 13 06 F1 | 	add	local02, ##4088
02bc4     08 F9 09 FB | 	rdlong	result2, local01 wz
02bc8     74 00 90 5D |  if_ne	jmp	#LR__0177
02bcc     09 F9 01 F6 | 	mov	result2, local02
02bd0     08 F9 81 F1 | 	sub	result2, local01
02bd4     08 03 58 FC | 	wrword	#1, local01
02bd8     08 F7 01 F6 | 	mov	result1, local01
02bdc     02 F6 05 F1 | 	add	result1, #2
02be0     36 00 80 FF 
02be4     FB 20 59 FC | 	wrword	##27792, result1
02be8     08 F7 01 F6 | 	mov	result1, local01
02bec     04 F6 05 F1 | 	add	result1, #4
02bf0     FB 00 58 FC | 	wrword	#0, result1
02bf4     08 F7 01 F6 | 	mov	result1, local01
02bf8     06 F6 05 F1 | 	add	result1, #6
02bfc     FB 02 58 FC | 	wrword	#1, result1
02c00     10 10 06 F1 | 	add	local01, #16
02c04     FC F8 51 F6 | 	abs	result2, result2 wc
02c08     04 F8 45 F0 | 	shr	result2, #4
02c0c     FC F8 81 F6 | 	negc	result2, result2
02c10     08 F9 51 FC | 	wrword	result2, local01
02c14     08 F9 01 F6 | 	mov	result2, local01
02c18     02 F8 05 F1 | 	add	result2, #2
02c1c     36 00 80 FF 
02c20     FC 1E 59 FC | 	wrword	##27791, result2
02c24     08 F9 01 F6 | 	mov	result2, local01
02c28     04 F8 05 F1 | 	add	result2, #4
02c2c     FC 00 58 FC | 	wrword	#0, result2
02c30     08 F9 01 F6 | 	mov	result2, local01
02c34     06 F8 05 F1 | 	add	result2, #6
02c38     FC 00 58 FC | 	wrword	#0, result2
02c3c     10 10 86 F1 | 	sub	local01, #16
02c40                 | LR__0177
02c40     09 F9 01 F6 | 	mov	result2, local02
02c44     08 F7 01 F6 | 	mov	result1, local01
02c48     A8 F0 03 F6 | 	mov	ptra, fp
02c4c     B3 00 A0 FD | 	call	#popregs_
02c50                 | __system___gc_ptrs_ret
02c50     2D 00 64 FD | 	ret
02c54                 | 
02c54                 | __system___gc_nextBlockPtr
02c54     02 4C 05 F6 | 	mov	COUNT_, #2
02c58     A9 00 A0 FD | 	call	#pushregs_
02c5c     04 11 02 F6 | 	mov	local01, arg01
02c60     08 13 EA FA | 	rdword	local02, local01 wz
02c64     10 00 90 5D |  if_ne	jmp	#LR__0178
02c68     20 00 00 FF 
02c6c     A4 09 06 F6 | 	mov	arg01, ##@LR__0266
02c70     EC 01 B0 FD | 	call	#__system___gc_errmsg
02c74     0C 00 90 FD | 	jmp	#LR__0179
02c78                 | LR__0178
02c78     04 12 66 F0 | 	shl	local02, #4
02c7c     08 F7 01 F6 | 	mov	result1, local01
02c80     09 F7 01 F1 | 	add	result1, local02
02c84                 | LR__0179
02c84     A8 F0 03 F6 | 	mov	ptra, fp
02c88     B3 00 A0 FD | 	call	#popregs_
02c8c                 | __system___gc_nextBlockPtr_ret
02c8c     2D 00 64 FD | 	ret
02c90                 | 
02c90                 | __system___gc_tryalloc
02c90     18 4C 05 F6 | 	mov	COUNT_, #24
02c94     A9 00 A0 FD | 	call	#pushregs_
02c98     04 11 02 F6 | 	mov	local01, arg01
02c9c     05 13 02 F6 | 	mov	local02, arg02
02ca0     08 FF BF FD | 	call	#__system___gc_ptrs
02ca4     FB 14 02 F6 | 	mov	local03, result1
02ca8     FC 16 02 F6 | 	mov	local04, result2
02cac     0A 19 02 F6 | 	mov	local05, local03
02cb0     00 1A 06 F6 | 	mov	local06, #0
02cb4     94 D3 9F FE | 	loc	pa,	#(@LR__0181-@LR__0180)
02cb8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
02cbc                 | LR__0180
02cbc     0C 1D 02 F6 | 	mov	local07, local05
02cc0     06 18 06 F1 | 	add	local05, #6
02cc4     0C 1F 02 F6 | 	mov	local08, local05
02cc8     0F 0B EA FA | 	rdword	arg02, local08 wz
02ccc     0A 09 02 F6 | 	mov	arg01, local03
02cd0     00 F6 05 A6 |  if_e	mov	result1, #0
02cd4     04 0A 66 50 |  if_ne	shl	arg02, #4
02cd8     05 09 02 51 |  if_ne	add	arg01, arg02
02cdc     04 F7 01 56 |  if_ne	mov	result1, arg01
02ce0     FB 20 02 F6 | 	mov	local09, result1
02ce4     10 19 0A F6 | 	mov	local05, local09 wz
02ce8     0C 21 02 56 |  if_ne	mov	local09, local05
02cec     10 23 02 56 |  if_ne	mov	local10, local09
02cf0     11 1B E2 5A |  if_ne	rdword	local06, local10
02cf4     00 18 0E F2 | 	cmp	local05, #0 wz
02cf8     0B 19 52 52 |  if_ne	cmps	local05, local04 wc
02cfc     08 00 90 1D |  if_a	jmp	#LR__0182
02d00     0D 11 5A 52 |  if_ne	cmps	local01, local06 wcz
02d04     B4 FF 9F 1D |  if_a	jmp	#LR__0180
02d08                 | LR__0181
02d08                 | LR__0182
02d08     00 18 0E F2 | 	cmp	local05, #0 wz
02d0c     0C F7 01 A6 |  if_e	mov	result1, local05
02d10     40 01 90 AD |  if_e	jmp	#LR__0185
02d14     0C 25 02 F6 | 	mov	local11, local05
02d18     06 24 06 F1 | 	add	local11, #6
02d1c     12 27 E2 FA | 	rdword	local12, local11
02d20     0D 11 52 F2 | 	cmps	local01, local06 wc
02d24     C8 00 90 3D |  if_ae	jmp	#LR__0184
02d28     0C 29 02 F6 | 	mov	local13, local05
02d2c     14 11 52 FC | 	wrword	local01, local13
02d30     08 2B 02 F6 | 	mov	local14, local01
02d34     04 2A 66 F0 | 	shl	local14, #4
02d38     0C 2D 02 F6 | 	mov	local15, local05
02d3c     15 2D 02 F1 | 	add	local15, local14
02d40     0D 2F 02 F6 | 	mov	local16, local06
02d44     08 2F 82 F1 | 	sub	local16, local01
02d48     16 31 02 F6 | 	mov	local17, local15
02d4c     18 2F 52 FC | 	wrword	local16, local17
02d50     16 33 02 F6 | 	mov	local18, local15
02d54     02 32 06 F1 | 	add	local18, #2
02d58     36 00 80 FF 
02d5c     19 1F 59 FC | 	wrword	##27791, local18
02d60     16 35 02 F6 | 	mov	local19, local15
02d64     04 34 06 F1 | 	add	local19, #4
02d68     0C 0B 0A F6 | 	mov	arg02, local05 wz
02d6c     00 F6 05 A6 |  if_e	mov	result1, #0
02d70     0A 0B 82 51 |  if_ne	sub	arg02, local03
02d74     04 0A 46 50 |  if_ne	shr	arg02, #4
02d78     05 F7 01 56 |  if_ne	mov	result1, arg02
02d7c     1A F7 51 FC | 	wrword	result1, local19
02d80     16 37 02 F6 | 	mov	local20, local15
02d84     12 21 E2 FA | 	rdword	local09, local11
02d88     06 36 06 F1 | 	add	local20, #6
02d8c     1B 21 52 FC | 	wrword	local09, local20
02d90     16 39 02 F6 | 	mov	local21, local15
02d94     1C 0B 0A F6 | 	mov	arg02, local21 wz
02d98     00 F6 05 A6 |  if_e	mov	result1, #0
02d9c     0A 0B 82 51 |  if_ne	sub	arg02, local03
02da0     04 0A 46 50 |  if_ne	shr	arg02, #4
02da4     05 F7 01 56 |  if_ne	mov	result1, arg02
02da8     FB 26 02 F6 | 	mov	local12, result1
02dac     16 09 02 F6 | 	mov	arg01, local15
02db0     A0 FE BF FD | 	call	#__system___gc_nextBlockPtr
02db4     FB 3A 0A F6 | 	mov	local22, result1 wz
02db8     34 00 90 AD |  if_e	jmp	#LR__0183
02dbc     0B 3B 52 F2 | 	cmps	local22, local04 wc
02dc0     2C 00 90 3D |  if_ae	jmp	#LR__0183
02dc4     1D 3D 02 F6 | 	mov	local23, local22
02dc8     04 3C 06 F1 | 	add	local23, #4
02dcc     1C 3F 02 F6 | 	mov	local24, local21
02dd0     0A 09 02 F6 | 	mov	arg01, local03
02dd4     1F 0B 0A F6 | 	mov	arg02, local24 wz
02dd8     00 F6 05 A6 |  if_e	mov	result1, #0
02ddc     04 0B 82 51 |  if_ne	sub	arg02, arg01
02de0     04 0A 46 50 |  if_ne	shr	arg02, #4
02de4     05 F7 01 56 |  if_ne	mov	result1, arg02
02de8     FB 20 02 F6 | 	mov	local09, result1
02dec     1E 21 52 FC | 	wrword	local09, local23
02df0                 | LR__0183
02df0                 | LR__0184
02df0     06 1C 06 F1 | 	add	local07, #6
02df4     0E 27 52 FC | 	wrword	local12, local07
02df8     36 00 00 FF 
02dfc     80 20 06 F6 | 	mov	local09, ##27776
02e00     09 21 42 F5 | 	or	local09, local02
02e04     0C 3F 02 F6 | 	mov	local24, local05
02e08     02 3E 06 F1 | 	add	local24, #2
02e0c     00 F6 05 F6 | 	mov	result1, #0
02e10     01 F6 61 FD | 	cogid	result1
02e14     FB 20 42 F5 | 	or	local09, result1
02e18     1F 21 52 FC | 	wrword	local09, local24
02e1c     0A 3F 02 F6 | 	mov	local24, local03
02e20     08 3E 06 F1 | 	add	local24, #8
02e24     1F 21 E2 FA | 	rdword	local09, local24
02e28     12 21 52 FC | 	wrword	local09, local11
02e2c     0C 0B 0A F6 | 	mov	arg02, local05 wz
02e30     00 F6 05 A6 |  if_e	mov	result1, #0
02e34     0A 0B 82 51 |  if_ne	sub	arg02, local03
02e38     04 0A 46 50 |  if_ne	shr	arg02, #4
02e3c     05 F7 01 56 |  if_ne	mov	result1, arg02
02e40     1F F7 51 FC | 	wrword	result1, local24
02e44     08 18 06 F1 | 	add	local05, #8
02e48     0C F7 01 F6 | 	mov	result1, local05
02e4c     00 C0 31 FF 
02e50     00 F6 45 F5 | 	or	result1, ##1669332992
02e54                 | LR__0185
02e54     A8 F0 03 F6 | 	mov	ptra, fp
02e58     B3 00 A0 FD | 	call	#popregs_
02e5c                 | __system___gc_tryalloc_ret
02e5c     2D 00 64 FD | 	ret
02e60                 | 
02e60                 | __system___gc_errmsg
02e60     01 4C 05 F6 | 	mov	COUNT_, #1
02e64     A9 00 A0 FD | 	call	#pushregs_
02e68     04 11 02 F6 | 	mov	local01, arg01
02e6c                 | LR__0186
02e6c     08 09 CA FA | 	rdbyte	arg01, local01 wz
02e70     01 10 06 F1 | 	add	local01, #1
02e74     08 00 90 AD |  if_e	jmp	#LR__0187
02e78     84 F1 BF FD | 	call	#__system___tx
02e7c     EC FF 9F FD | 	jmp	#LR__0186
02e80                 | LR__0187
02e80     00 F6 05 F6 | 	mov	result1, #0
02e84     A8 F0 03 F6 | 	mov	ptra, fp
02e88     B3 00 A0 FD | 	call	#popregs_
02e8c                 | __system___gc_errmsg_ret
02e8c     2D 00 64 FD | 	ret
02e90                 | 
02e90                 | __system___gc_alloc_managed
02e90     02 4C 05 F6 | 	mov	COUNT_, #2
02e94     A9 00 A0 FD | 	call	#pushregs_
02e98     04 11 02 F6 | 	mov	local01, arg01
02e9c     00 0A 06 F6 | 	mov	arg02, #0
02ea0     30 00 B0 FD | 	call	#__system___gc_doalloc
02ea4     FB 12 0A F6 | 	mov	local02, result1 wz
02ea8     18 00 90 5D |  if_ne	jmp	#LR__0188
02eac     01 10 56 F2 | 	cmps	local01, #1 wc
02eb0     10 00 90 CD |  if_b	jmp	#LR__0188
02eb4     20 00 00 FF 
02eb8     C0 09 06 F6 | 	mov	arg01, ##@LR__0267
02ebc     A0 FF BF FD | 	call	#__system___gc_errmsg
02ec0     04 00 90 FD | 	jmp	#LR__0189
02ec4                 | LR__0188
02ec4     09 F7 01 F6 | 	mov	result1, local02
02ec8                 | LR__0189
02ec8     A8 F0 03 F6 | 	mov	ptra, fp
02ecc     B3 00 A0 FD | 	call	#popregs_
02ed0                 | __system___gc_alloc_managed_ret
02ed0     2D 00 64 FD | 	ret
02ed4                 | 
02ed4                 | __system___gc_doalloc
02ed4     07 4C 05 F6 | 	mov	COUNT_, #7
02ed8     A9 00 A0 FD | 	call	#pushregs_
02edc     04 11 0A F6 | 	mov	local01, arg01 wz
02ee0     05 13 02 F6 | 	mov	local02, arg02
02ee4     00 F6 05 A6 |  if_e	mov	result1, #0
02ee8     88 00 90 AD |  if_e	jmp	#LR__0197
02eec     17 10 06 F1 | 	add	local01, #23
02ef0     0F 10 26 F5 | 	andn	local01, #15
02ef4     04 10 46 F0 | 	shr	local01, #4
02ef8     14 E8 05 F1 | 	add	ptr___system__dat__, #20
02efc     F4 14 02 F6 | 	mov	local03, ptr___system__dat__
02f00     0A 09 02 F6 | 	mov	arg01, local03
02f04     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
02f08     BC F0 BF FD | 	call	#__system___lockmem
02f0c     08 09 02 F6 | 	mov	arg01, local01
02f10     09 0B 02 F6 | 	mov	arg02, local02
02f14     78 FD BF FD | 	call	#__system___gc_tryalloc
02f18     FB 16 0A F6 | 	mov	local04, result1 wz
02f1c     14 00 90 5D |  if_ne	jmp	#LR__0190
02f20     F4 02 B0 FD | 	call	#__system___gc_docollect
02f24     08 09 02 F6 | 	mov	arg01, local01
02f28     09 0B 02 F6 | 	mov	arg02, local02
02f2c     60 FD BF FD | 	call	#__system___gc_tryalloc
02f30     FB 16 02 F6 | 	mov	local04, result1
02f34                 | LR__0190
02f34     0A 01 68 FC | 	wrlong	#0, local03
02f38     00 16 0E F2 | 	cmp	local04, #0 wz
02f3c     30 00 90 AD |  if_e	jmp	#LR__0196
02f40     04 10 66 F0 | 	shl	local01, #4
02f44     08 10 86 F1 | 	sub	local01, #8
02f48     08 19 52 F6 | 	abs	local05, local01 wc
02f4c     02 18 46 F0 | 	shr	local05, #2
02f50     0C 1B 8A F6 | 	negc	local06, local05 wz
02f54     0B 1D 02 F6 | 	mov	local07, local04
02f58     14 00 90 AD |  if_e	jmp	#LR__0195
02f5c     AC D0 9F FE | 	loc	pa,	#(@LR__0193-@LR__0191)
02f60     8C 00 A0 FD | 	call	#FCACHE_LOAD_
02f64                 | LR__0191
02f64     0D 05 D8 FC | 	rep	@LR__0194, local06
02f68                 | LR__0192
02f68     0E 01 68 FC | 	wrlong	#0, local07
02f6c     04 1C 06 F1 | 	add	local07, #4
02f70                 | LR__0193
02f70                 | LR__0194
02f70                 | LR__0195
02f70                 | LR__0196
02f70     0B F7 01 F6 | 	mov	result1, local04
02f74                 | LR__0197
02f74     A8 F0 03 F6 | 	mov	ptra, fp
02f78     B3 00 A0 FD | 	call	#popregs_
02f7c                 | __system___gc_doalloc_ret
02f7c     2D 00 64 FD | 	ret
02f80                 | 
02f80                 | __system___gc_isvalidptr
02f80     06 FD 01 F6 | 	mov	_var01, arg03
02f84     FE FE 01 F6 | 	mov	_var02, _var01
02f88     00 F8 7F FF 
02f8c     00 FE 05 F5 | 	and	_var02, ##-1048576
02f90     00 C0 31 FF 
02f94     00 FE 0D F2 | 	cmp	_var02, ##1669332992 wz
02f98     00 F6 05 56 |  if_ne	mov	result1, #0
02f9c     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
02fa0     08 FC 85 F1 | 	sub	_var01, #8
02fa4     FE 00 02 F6 | 	mov	_var03, _var01
02fa8     74 01 06 F4 | 	bitl	_var03, #372
02fac     04 01 52 F2 | 	cmps	_var03, arg01 wc
02fb0     08 00 90 CD |  if_b	jmp	#LR__0198
02fb4     05 01 52 F2 | 	cmps	_var03, arg02 wc
02fb8     08 00 90 CD |  if_b	jmp	#LR__0199
02fbc                 | LR__0198
02fbc     00 F6 05 F6 | 	mov	result1, #0
02fc0     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
02fc4                 | LR__0199
02fc4     00 FF 01 F6 | 	mov	_var02, _var03
02fc8     04 FF 61 F5 | 	xor	_var02, arg01
02fcc     0F FE 0D F5 | 	and	_var02, #15 wz
02fd0     00 F6 05 56 |  if_ne	mov	result1, #0
02fd4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
02fd8     00 FF 01 F6 | 	mov	_var02, _var03
02fdc     02 FE 05 F1 | 	add	_var02, #2
02fe0     FF FE E1 FA | 	rdword	_var02, _var02
02fe4     7F 00 00 FF 
02fe8     C0 FF 05 F5 | 	and	_var02, ##65472
02fec     36 00 00 FF 
02ff0     80 FE 0D F2 | 	cmp	_var02, ##27776 wz
02ff4     00 F6 05 56 |  if_ne	mov	result1, #0
02ff8     00 F7 01 A6 |  if_e	mov	result1, _var03
02ffc                 | __system___gc_isvalidptr_ret
02ffc     2D 00 64 FD | 	ret
03000                 | 
03000                 | __system___gc_dofree
03000     17 4C 05 F6 | 	mov	COUNT_, #23
03004     A9 00 A0 FD | 	call	#pushregs_
03008     04 11 02 F6 | 	mov	local01, arg01
0300c     9C FB BF FD | 	call	#__system___gc_ptrs
03010     FC 12 02 F6 | 	mov	local02, result2
03014     FB 14 02 F6 | 	mov	local03, result1
03018     08 17 02 F6 | 	mov	local04, local01
0301c     02 16 06 F1 | 	add	local04, #2
03020     36 00 80 FF 
03024     0B 1F 59 FC | 	wrword	##27791, local04
03028     08 19 02 F6 | 	mov	local05, local01
0302c     08 09 02 F6 | 	mov	arg01, local01
03030     20 FC BF FD | 	call	#__system___gc_nextBlockPtr
03034     FB 1A 02 F6 | 	mov	local06, result1
03038     10 D0 9F FE | 	loc	pa,	#(@LR__0201-@LR__0200)
0303c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
03040                 | LR__0200
03040     04 18 06 F1 | 	add	local05, #4
03044     0C 1D 02 F6 | 	mov	local07, local05
03048     0E 0B EA FA | 	rdword	arg02, local07 wz
0304c     0A 09 02 F6 | 	mov	arg01, local03
03050     00 F6 05 A6 |  if_e	mov	result1, #0
03054     04 0A 66 50 |  if_ne	shl	arg02, #4
03058     05 09 02 51 |  if_ne	add	arg01, arg02
0305c     04 F7 01 56 |  if_ne	mov	result1, arg01
03060     FB 18 0A F6 | 	mov	local05, result1 wz
03064     24 00 90 AD |  if_e	jmp	#LR__0202
03068     0C 09 02 F6 | 	mov	arg01, local05
0306c     00 F6 05 F6 | 	mov	result1, #0
03070     02 08 06 F1 | 	add	arg01, #2
03074     04 09 E2 FA | 	rdword	arg01, arg01
03078     36 00 00 FF 
0307c     8F 08 0E F2 | 	cmp	arg01, ##27791 wz
03080     01 F6 65 A6 |  if_e	neg	result1, #1
03084     00 F6 4D F2 | 	cmps	result1, #0 wz
03088     B4 FF 9F AD |  if_e	jmp	#LR__0200
0308c                 | LR__0201
0308c                 | LR__0202
0308c     00 18 0E F2 | 	cmp	local05, #0 wz
03090     0A 19 02 A6 |  if_e	mov	local05, local03
03094     0C 1F 02 F6 | 	mov	local08, local05
03098     06 1E 06 F1 | 	add	local08, #6
0309c     08 21 02 F6 | 	mov	local09, local01
030a0     0F 0B E2 FA | 	rdword	arg02, local08
030a4     06 20 06 F1 | 	add	local09, #6
030a8     10 0B 52 FC | 	wrword	arg02, local09
030ac     08 0B 0A F6 | 	mov	arg02, local01 wz
030b0     00 F6 05 A6 |  if_e	mov	result1, #0
030b4     0A 0B 82 51 |  if_ne	sub	arg02, local03
030b8     04 0A 46 50 |  if_ne	shr	arg02, #4
030bc     05 F7 01 56 |  if_ne	mov	result1, arg02
030c0     0F F7 51 FC | 	wrword	result1, local08
030c4     0A 19 0A F2 | 	cmp	local05, local03 wz
030c8     70 00 90 AD |  if_e	jmp	#LR__0205
030cc     0C 09 02 F6 | 	mov	arg01, local05
030d0     80 FB BF FD | 	call	#__system___gc_nextBlockPtr
030d4     08 F7 09 F2 | 	cmp	result1, local01 wz
030d8     60 00 90 5D |  if_ne	jmp	#LR__0204
030dc     0C 23 02 F6 | 	mov	local10, local05
030e0     11 25 E2 FA | 	rdword	local11, local10
030e4     08 27 02 F6 | 	mov	local12, local01
030e8     13 1B E2 FA | 	rdword	local06, local12
030ec     0D 25 02 F1 | 	add	local11, local06
030f0     11 25 52 FC | 	wrword	local11, local10
030f4     0B 01 58 FC | 	wrword	#0, local04
030f8     08 09 02 F6 | 	mov	arg01, local01
030fc     54 FB BF FD | 	call	#__system___gc_nextBlockPtr
03100     FB 1A 02 F6 | 	mov	local06, result1
03104     09 1B 52 F2 | 	cmps	local06, local02 wc
03108     20 00 90 3D |  if_ae	jmp	#LR__0203
0310c     0D 29 02 F6 | 	mov	local13, local06
03110     04 28 06 F1 | 	add	local13, #4
03114     0C 0B 0A F6 | 	mov	arg02, local05 wz
03118     00 F6 05 A6 |  if_e	mov	result1, #0
0311c     0A 0B 82 51 |  if_ne	sub	arg02, local03
03120     04 0A 46 50 |  if_ne	shr	arg02, #4
03124     05 F7 01 56 |  if_ne	mov	result1, arg02
03128     14 F7 51 FC | 	wrword	result1, local13
0312c                 | LR__0203
0312c     10 11 E2 FA | 	rdword	local01, local09
03130     0F 11 52 FC | 	wrword	local01, local08
03134     10 01 58 FC | 	wrword	#0, local09
03138     0C 11 02 F6 | 	mov	local01, local05
0313c                 | LR__0204
0313c                 | LR__0205
0313c     08 09 02 F6 | 	mov	arg01, local01
03140     10 FB BF FD | 	call	#__system___gc_nextBlockPtr
03144     FB 2A 0A F6 | 	mov	local14, result1 wz
03148     BC 00 90 AD |  if_e	jmp	#LR__0207
0314c     09 2B 52 F2 | 	cmps	local14, local02 wc
03150     B4 00 90 3D |  if_ae	jmp	#LR__0207
03154     15 09 02 F6 | 	mov	arg01, local14
03158     00 F6 05 F6 | 	mov	result1, #0
0315c     02 08 06 F1 | 	add	arg01, #2
03160     04 09 E2 FA | 	rdword	arg01, arg01
03164     36 00 00 FF 
03168     8F 08 0E F2 | 	cmp	arg01, ##27791 wz
0316c     01 F6 65 A6 |  if_e	neg	result1, #1
03170     00 F6 0D F2 | 	cmp	result1, #0 wz
03174     90 00 90 AD |  if_e	jmp	#LR__0207
03178     08 19 02 F6 | 	mov	local05, local01
0317c     15 11 02 F6 | 	mov	local01, local14
03180     0C 2D 02 F6 | 	mov	local15, local05
03184     16 2F E2 FA | 	rdword	local16, local15
03188     08 31 02 F6 | 	mov	local17, local01
0318c     18 33 E2 FA | 	rdword	local18, local17
03190     19 2F 02 F1 | 	add	local16, local18
03194     16 2F 52 FC | 	wrword	local16, local15
03198     08 35 02 F6 | 	mov	local19, local01
0319c     06 34 06 F1 | 	add	local19, #6
031a0     0C 37 02 F6 | 	mov	local20, local05
031a4     1A 1B E2 FA | 	rdword	local06, local19
031a8     06 36 06 F1 | 	add	local20, #6
031ac     1B 1B 52 FC | 	wrword	local06, local20
031b0     08 39 02 F6 | 	mov	local21, local01
031b4     02 38 06 F1 | 	add	local21, #2
031b8     1C 55 59 FC | 	wrword	#170, local21
031bc     1A 01 58 FC | 	wrword	#0, local19
031c0     08 09 02 F6 | 	mov	arg01, local01
031c4     8C FA BF FD | 	call	#__system___gc_nextBlockPtr
031c8     FB 3A 02 F6 | 	mov	local22, result1
031cc     1D 1B 0A F6 | 	mov	local06, local22 wz
031d0     34 00 90 AD |  if_e	jmp	#LR__0206
031d4     09 1B 52 F2 | 	cmps	local06, local02 wc
031d8     2C 00 90 3D |  if_ae	jmp	#LR__0206
031dc     0D 3D 02 F6 | 	mov	local23, local06
031e0     04 3C 06 F1 | 	add	local23, #4
031e4     0C 33 02 F6 | 	mov	local18, local05
031e8     0A 09 02 F6 | 	mov	arg01, local03
031ec     19 0B 0A F6 | 	mov	arg02, local18 wz
031f0     00 F6 05 A6 |  if_e	mov	result1, #0
031f4     04 0B 82 51 |  if_ne	sub	arg02, arg01
031f8     04 0A 46 50 |  if_ne	shr	arg02, #4
031fc     05 F7 01 56 |  if_ne	mov	result1, arg02
03200     FB 3A 02 F6 | 	mov	local22, result1
03204     1E 3B 52 FC | 	wrword	local22, local23
03208                 | LR__0206
03208                 | LR__0207
03208     0D F7 01 F6 | 	mov	result1, local06
0320c     A8 F0 03 F6 | 	mov	ptra, fp
03210     B3 00 A0 FD | 	call	#popregs_
03214                 | __system___gc_dofree_ret
03214     2D 00 64 FD | 	ret
03218                 | 
03218                 | __system___gc_docollect
03218     0B 4C 05 F6 | 	mov	COUNT_, #11
0321c     A9 00 A0 FD | 	call	#pushregs_
03220     88 F9 BF FD | 	call	#__system___gc_ptrs
03224     FC 10 02 F6 | 	mov	local01, result2
03228     FB 12 02 F6 | 	mov	local02, result1
0322c     09 09 02 F6 | 	mov	arg01, local02
03230     20 FA BF FD | 	call	#__system___gc_nextBlockPtr
03234     FB 14 0A F6 | 	mov	local03, result1 wz
03238     00 16 06 F6 | 	mov	local04, #0
0323c     01 16 62 FD | 	cogid	local04
03240     2C 00 90 AD |  if_e	jmp	#LR__0209
03244                 | LR__0208
03244     08 15 52 F2 | 	cmps	local03, local01 wc
03248     24 00 90 3D |  if_ae	jmp	#LR__0209
0324c     0A 19 02 F6 | 	mov	local05, local03
03250     02 18 06 F1 | 	add	local05, #2
03254     0C 1B E2 FA | 	rdword	local06, local05
03258     20 1A 26 F5 | 	andn	local06, #32
0325c     0C 1B 52 FC | 	wrword	local06, local05
03260     0A 09 02 F6 | 	mov	arg01, local03
03264     EC F9 BF FD | 	call	#__system___gc_nextBlockPtr
03268     FB 14 0A F6 | 	mov	local03, result1 wz
0326c     D4 FF 9F 5D |  if_ne	jmp	#LR__0208
03270                 | LR__0209
03270     00 1C 06 F6 | 	mov	local07, #0
03274     00 08 06 F6 | 	mov	arg01, #0
03278     EC EC BF FD | 	call	#__system____topofstack
0327c     FB 0A 02 F6 | 	mov	arg02, result1
03280     0E 09 02 F6 | 	mov	arg01, local07
03284     90 00 B0 FD | 	call	#__system___gc_markhub
03288     14 01 B0 FD | 	call	#__system___gc_markcog
0328c     09 09 02 F6 | 	mov	arg01, local02
03290     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03294     FB 1E 0A F6 | 	mov	local08, result1 wz
03298     10 00 90 5D |  if_ne	jmp	#LR__0210
0329c     20 00 00 FF 
032a0     DD 09 06 F6 | 	mov	arg01, ##@LR__0268
032a4     B8 FB BF FD | 	call	#__system___gc_errmsg
032a8     60 00 90 FD | 	jmp	#LR__0214
032ac                 | LR__0210
032ac                 | LR__0211
032ac     0F 15 02 F6 | 	mov	local03, local08
032b0     0A 09 02 F6 | 	mov	arg01, local03
032b4     9C F9 BF FD | 	call	#__system___gc_nextBlockPtr
032b8     FB 1E 02 F6 | 	mov	local08, result1
032bc     0A 21 02 F6 | 	mov	local09, local03
032c0     02 20 06 F1 | 	add	local09, #2
032c4     10 1D E2 FA | 	rdword	local07, local09
032c8     20 1C CE F7 | 	test	local07, #32 wz
032cc     30 00 90 5D |  if_ne	jmp	#LR__0213
032d0     0E 23 02 F6 | 	mov	local10, local07
032d4     10 22 0E F5 | 	and	local10, #16 wz
032d8     24 00 90 5D |  if_ne	jmp	#LR__0213
032dc     0E 1D 42 F8 | 	getnib	local07, local07, #0
032e0     0E 25 02 F6 | 	mov	local11, local07
032e4     0B 25 0A F2 | 	cmp	local11, local04 wz
032e8     0E 24 0E 52 |  if_ne	cmp	local11, #14 wz
032ec     10 00 90 5D |  if_ne	jmp	#LR__0212
032f0     0A 09 02 F6 | 	mov	arg01, local03
032f4     08 FD BF FD | 	call	#__system___gc_dofree
032f8     FB 1C 02 F6 | 	mov	local07, result1
032fc     0E 1F 02 F6 | 	mov	local08, local07
03300                 | LR__0212
03300                 | LR__0213
03300     00 1E 0E F2 | 	cmp	local08, #0 wz
03304     08 1F 52 52 |  if_ne	cmps	local08, local01 wc
03308     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__0211
0330c                 | LR__0214
0330c     A8 F0 03 F6 | 	mov	ptra, fp
03310     B3 00 A0 FD | 	call	#popregs_
03314                 | __system___gc_docollect_ret
03314     2D 00 64 FD | 	ret
03318                 | 
03318                 | __system___gc_markhub
03318     04 4C 05 F6 | 	mov	COUNT_, #4
0331c     A9 00 A0 FD | 	call	#pushregs_
03320     04 11 02 F6 | 	mov	local01, arg01
03324     05 13 02 F6 | 	mov	local02, arg02
03328     80 F8 BF FD | 	call	#__system___gc_ptrs
0332c     FB 14 02 F6 | 	mov	local03, result1
03330     FC 16 02 F6 | 	mov	local04, result2
03334                 | LR__0215
03334     09 11 52 F2 | 	cmps	local01, local02 wc
03338     58 00 90 3D |  if_ae	jmp	#LR__0216
0333c     08 0D 02 FB | 	rdlong	arg03, local01
03340     04 10 06 F1 | 	add	local01, #4
03344     0B 0B 02 F6 | 	mov	arg02, local04
03348     0A 09 02 F6 | 	mov	arg01, local03
0334c     30 FC BF FD | 	call	#__system___gc_isvalidptr
03350     FB 0C 0A F6 | 	mov	arg03, result1 wz
03354     DC FF 9F AD |  if_e	jmp	#LR__0215
03358     06 09 02 F6 | 	mov	arg01, arg03
0335c     00 F6 05 F6 | 	mov	result1, #0
03360     02 08 06 F1 | 	add	arg01, #2
03364     04 09 E2 FA | 	rdword	arg01, arg01
03368     36 00 00 FF 
0336c     8F 08 0E F2 | 	cmp	arg01, ##27791 wz
03370     01 F6 65 A6 |  if_e	neg	result1, #1
03374     00 F6 0D F2 | 	cmp	result1, #0 wz
03378     B8 FF 9F 5D |  if_ne	jmp	#LR__0215
0337c     02 0C 06 F1 | 	add	arg03, #2
03380     06 F9 E1 FA | 	rdword	result2, arg03
03384     0F F8 25 F5 | 	andn	result2, #15
03388     2E F8 45 F5 | 	or	result2, #46
0338c     06 F9 51 FC | 	wrword	result2, arg03
03390     A0 FF 9F FD | 	jmp	#LR__0215
03394                 | LR__0216
03394     A8 F0 03 F6 | 	mov	ptra, fp
03398     B3 00 A0 FD | 	call	#popregs_
0339c                 | __system___gc_markhub_ret
0339c     2D 00 64 FD | 	ret
033a0                 | 
033a0                 | __system___gc_markcog
033a0     05 4C 05 F6 | 	mov	COUNT_, #5
033a4     A9 00 A0 FD | 	call	#pushregs_
033a8     00 F8 BF FD | 	call	#__system___gc_ptrs
033ac     FB 10 02 F6 | 	mov	local01, result1
033b0     FC 12 02 F6 | 	mov	local02, result2
033b4     00 14 06 F6 | 	mov	local03, #0
033b8                 | LR__0217
033b8     F0 17 06 F6 | 	mov	local04, #496
033bc     0A 17 82 F1 | 	sub	local04, local03
033c0     F0 17 06 F1 | 	add	local04, #496
033c4                 | 	'.live	local04
033c4     00 16 96 F9 | 	alts	local04, #0
033c8     0B 17 02 F6 | 	mov	local04, local04
033cc     09 0B 02 F6 | 	mov	arg02, local02
033d0     08 09 02 F6 | 	mov	arg01, local01
033d4     0B 0D 02 F6 | 	mov	arg03, local04
033d8     A4 FB BF FD | 	call	#__system___gc_isvalidptr
033dc     00 F6 0D F2 | 	cmp	result1, #0 wz
033e0     02 F6 05 51 |  if_ne	add	result1, #2
033e4     FB 18 E2 5A |  if_ne	rdword	local05, result1
033e8     20 18 46 55 |  if_ne	or	local05, #32
033ec     FB 18 52 5C |  if_ne	wrword	local05, result1
033f0     01 14 06 F1 | 	add	local03, #1
033f4     F0 15 56 F2 | 	cmps	local03, #496 wc
033f8     BC FF 9F CD |  if_b	jmp	#LR__0217
033fc     A8 F0 03 F6 | 	mov	ptra, fp
03400     B3 00 A0 FD | 	call	#popregs_
03404                 | __system___gc_markcog_ret
03404     2D 00 64 FD | 	ret
03408                 | 
03408                 | __system___closeraw
03408     05 4C 05 F6 | 	mov	COUNT_, #5
0340c     A9 00 A0 FD | 	call	#pushregs_
03410     04 11 02 F6 | 	mov	local01, arg01
03414     00 12 06 F6 | 	mov	local02, #0
03418     08 10 06 F1 | 	add	local01, #8
0341c     08 F7 09 FB | 	rdlong	result1, local01 wz
03420     08 10 86 F1 | 	sub	local01, #8
03424     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
03428     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
0342c     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
03430     01 F6 65 A6 |  if_e	neg	result1, #1
03434     90 00 90 AD |  if_e	jmp	#LR__0220
03438     28 10 06 F1 | 	add	local01, #40
0343c     08 F7 09 FB | 	rdlong	result1, local01 wz
03440     28 10 86 F1 | 	sub	local01, #40
03444     2C 00 90 AD |  if_e	jmp	#LR__0218
03448     28 10 06 F1 | 	add	local01, #40
0344c     08 09 02 FB | 	rdlong	arg01, local01
03450     28 10 86 F1 | 	sub	local01, #40
03454     04 15 02 FB | 	rdlong	local03, arg01
03458     04 08 06 F1 | 	add	arg01, #4
0345c     04 17 02 FB | 	rdlong	local04, arg01
03460     08 09 02 F6 | 	mov	arg01, local01
03464     F1 18 02 F6 | 	mov	local05, objptr
03468     0A E3 01 F6 | 	mov	objptr, local03
0346c     2D 16 62 FD | 	call	local04
03470     0C E3 01 F6 | 	mov	objptr, local05
03474                 | LR__0218
03474     20 10 06 F1 | 	add	local01, #32
03478     08 19 0A FB | 	rdlong	local05, local01 wz
0347c     20 10 86 F1 | 	sub	local01, #32
03480     30 00 90 AD |  if_e	jmp	#LR__0219
03484     20 10 06 F1 | 	add	local01, #32
03488     08 19 02 FB | 	rdlong	local05, local01
0348c     20 10 86 F1 | 	sub	local01, #32
03490     0C 15 02 FB | 	rdlong	local03, local05
03494     04 18 06 F1 | 	add	local05, #4
03498     0C 17 02 FB | 	rdlong	local04, local05
0349c     08 09 02 F6 | 	mov	arg01, local01
034a0     F1 18 02 F6 | 	mov	local05, objptr
034a4     0A E3 01 F6 | 	mov	objptr, local03
034a8     2D 16 62 FD | 	call	local04
034ac     0C E3 01 F6 | 	mov	objptr, local05
034b0     FB 12 02 F6 | 	mov	local02, result1
034b4                 | LR__0219
034b4     08 09 02 F6 | 	mov	arg01, local01
034b8     00 0A 06 F6 | 	mov	arg02, #0
034bc     30 0C 06 F6 | 	mov	arg03, #48
034c0     99 00 A0 FD | 	call	#\builtin_bytefill_
034c4     09 F7 01 F6 | 	mov	result1, local02
034c8                 | LR__0220
034c8     A8 F0 03 F6 | 	mov	ptra, fp
034cc     B3 00 A0 FD | 	call	#popregs_
034d0                 | __system___closeraw_ret
034d0     2D 00 64 FD | 	ret
034d4                 | 
034d4                 | __system____default_getc
034d4     06 4C 05 F6 | 	mov	COUNT_, #6
034d8     A9 00 A0 FD | 	call	#pushregs_
034dc     04 11 02 F6 | 	mov	local01, arg01
034e0     08 13 02 FB | 	rdlong	local02, local01
034e4     08 12 06 F1 | 	add	local02, #8
034e8     09 F7 01 FB | 	rdlong	result1, local02
034ec     02 F6 CD F7 | 	test	result1, #2 wz
034f0     08 09 02 56 |  if_ne	mov	arg01, local01
034f4     DC 01 B0 5D |  if_ne	call	#__system____default_flush
034f8     09 09 02 FB | 	rdlong	arg01, local02
034fc     01 08 46 F5 | 	or	arg01, #1
03500     09 09 62 FC | 	wrlong	arg01, local02
03504     08 12 86 F1 | 	sub	local02, #8
03508     09 15 0A FB | 	rdlong	local03, local02 wz
0350c     7C 00 90 5D |  if_ne	jmp	#LR__0222
03510     08 09 02 F6 | 	mov	arg01, local01
03514     04 17 02 FB | 	rdlong	local04, arg01
03518     0C 16 06 F1 | 	add	local04, #12
0351c     0B 0B 02 F6 | 	mov	arg02, local04
03520     0C 16 86 F1 | 	sub	local04, #12
03524     10 08 06 F1 | 	add	arg01, #16
03528     04 0D 02 FB | 	rdlong	arg03, arg01
0352c     10 08 86 F1 | 	sub	arg01, #16
03530     06 19 02 FB | 	rdlong	local05, arg03
03534     04 0C 06 F1 | 	add	arg03, #4
03538     06 15 02 FB | 	rdlong	local03, arg03
0353c     0A 0C C6 F9 | 	decod	arg03, #10
03540     F1 10 02 F6 | 	mov	local01, objptr
03544     0C E3 01 F6 | 	mov	objptr, local05
03548     2D 14 62 FD | 	call	local03
0354c     08 E3 01 F6 | 	mov	objptr, local01
03550     FB 1A 02 F6 | 	mov	local06, result1
03554     00 1A 56 F2 | 	cmps	local06, #0 wc
03558     01 F6 65 C6 |  if_b	neg	result1, #1
0355c     28 00 90 CD |  if_b	jmp	#LR__0221
03560     0B 1B 62 FC | 	wrlong	local06, local04
03564     0C 16 06 F1 | 	add	local04, #12
03568     0B 19 02 F6 | 	mov	local05, local04
0356c     08 16 86 F1 | 	sub	local04, #8
03570     0B 19 62 FC | 	wrlong	local05, local04
03574     04 16 06 F1 | 	add	local04, #4
03578     0B 19 02 FB | 	rdlong	local05, local04
0357c     01 18 46 F5 | 	or	local05, #1
03580     0B 19 62 FC | 	wrlong	local05, local04
03584     0D F7 01 F6 | 	mov	result1, local06
03588                 | LR__0221
03588     FB 14 02 F6 | 	mov	local03, result1
0358c                 | LR__0222
0358c     01 14 56 F2 | 	cmps	local03, #1 wc
03590     01 F6 65 C6 |  if_b	neg	result1, #1
03594     1C 00 90 CD |  if_b	jmp	#LR__0223
03598     01 14 86 F1 | 	sub	local03, #1
0359c     09 15 62 FC | 	wrlong	local03, local02
035a0     04 12 06 F1 | 	add	local02, #4
035a4     09 15 02 FB | 	rdlong	local03, local02
035a8     0A F7 C1 FA | 	rdbyte	result1, local03
035ac     01 14 06 F1 | 	add	local03, #1
035b0     09 15 62 FC | 	wrlong	local03, local02
035b4                 | LR__0223
035b4     A8 F0 03 F6 | 	mov	ptra, fp
035b8     B3 00 A0 FD | 	call	#popregs_
035bc                 | __system____default_getc_ret
035bc     2D 00 64 FD | 	ret
035c0                 | 
035c0                 | __system____default_putc
035c0     04 4C 05 F6 | 	mov	COUNT_, #4
035c4     A9 00 A0 FD | 	call	#pushregs_
035c8     04 11 02 F6 | 	mov	local01, arg01
035cc     05 13 02 F6 | 	mov	local02, arg02
035d0     09 15 02 FB | 	rdlong	local03, local02
035d4     08 14 06 F1 | 	add	local03, #8
035d8     0A F7 01 FB | 	rdlong	result1, local03
035dc     01 F6 CD F7 | 	test	result1, #1 wz
035e0     09 09 02 56 |  if_ne	mov	arg01, local02
035e4     EC 00 B0 5D |  if_ne	call	#__system____default_flush
035e8     0A 09 02 FB | 	rdlong	arg01, local03
035ec     02 08 46 F5 | 	or	arg01, #2
035f0     0A 09 62 FC | 	wrlong	arg01, local03
035f4     08 14 86 F1 | 	sub	local03, #8
035f8     0A 09 02 FB | 	rdlong	arg01, local03
035fc     04 17 02 F6 | 	mov	local04, arg01
03600     0C 14 06 F1 | 	add	local03, #12
03604     0A 17 02 F1 | 	add	local04, local03
03608     0B 11 42 FC | 	wrbyte	local01, local04
0360c     08 11 E2 F8 | 	getbyte	local01, local01, #0
03610     01 08 06 F1 | 	add	arg01, #1
03614     0C 14 86 F1 | 	sub	local03, #12
03618     0A 09 62 FC | 	wrlong	arg01, local03
0361c     02 00 00 FF 
03620     00 08 0E F2 | 	cmp	arg01, ##1024 wz
03624     10 00 90 5D |  if_ne	jmp	#LR__0224
03628     09 09 02 F6 | 	mov	arg01, local02
0362c     A4 00 B0 FD | 	call	#__system____default_flush
03630     00 F6 0D F2 | 	cmp	result1, #0 wz
03634     01 10 66 56 |  if_ne	neg	local01, #1
03638                 | LR__0224
03638     08 F7 01 F6 | 	mov	result1, local01
0363c     A8 F0 03 F6 | 	mov	ptra, fp
03640     B3 00 A0 FD | 	call	#popregs_
03644                 | __system____default_putc_ret
03644     2D 00 64 FD | 	ret
03648                 | 
03648                 | __system____default_putc_terminal
03648     04 4C 05 F6 | 	mov	COUNT_, #4
0364c     A9 00 A0 FD | 	call	#pushregs_
03650     04 11 02 F6 | 	mov	local01, arg01
03654     05 13 02 F6 | 	mov	local02, arg02
03658     09 15 02 FB | 	rdlong	local03, local02
0365c     08 14 06 F1 | 	add	local03, #8
03660     0A F7 01 FB | 	rdlong	result1, local03
03664     01 F6 CD F7 | 	test	result1, #1 wz
03668     09 09 02 56 |  if_ne	mov	arg01, local02
0366c     64 00 B0 5D |  if_ne	call	#__system____default_flush
03670     0A 09 02 FB | 	rdlong	arg01, local03
03674     02 08 46 F5 | 	or	arg01, #2
03678     0A 09 62 FC | 	wrlong	arg01, local03
0367c     08 14 86 F1 | 	sub	local03, #8
03680     0A 09 02 FB | 	rdlong	arg01, local03
03684     04 17 02 F6 | 	mov	local04, arg01
03688     0C 14 06 F1 | 	add	local03, #12
0368c     0A 17 02 F1 | 	add	local04, local03
03690     0B 11 42 FC | 	wrbyte	local01, local04
03694     08 11 E2 F8 | 	getbyte	local01, local01, #0
03698     0C 14 86 F1 | 	sub	local03, #12
0369c     01 08 06 F1 | 	add	arg01, #1
036a0     0A 09 62 FC | 	wrlong	arg01, local03
036a4     0A 10 0E F2 | 	cmp	local01, #10 wz
036a8     02 00 00 5F 
036ac     00 08 0E 52 |  if_ne	cmp	arg01, ##1024 wz
036b0     10 00 90 5D |  if_ne	jmp	#LR__0225
036b4     09 09 02 F6 | 	mov	arg01, local02
036b8     18 00 B0 FD | 	call	#__system____default_flush
036bc     00 F6 0D F2 | 	cmp	result1, #0 wz
036c0     01 10 66 56 |  if_ne	neg	local01, #1
036c4                 | LR__0225
036c4     08 F7 01 F6 | 	mov	result1, local01
036c8     A8 F0 03 F6 | 	mov	ptra, fp
036cc     B3 00 A0 FD | 	call	#popregs_
036d0                 | __system____default_putc_terminal_ret
036d0     2D 00 64 FD | 	ret
036d4                 | 
036d4                 | __system____default_flush
036d4     0D 4C 05 F6 | 	mov	COUNT_, #13
036d8     A9 00 A0 FD | 	call	#pushregs_
036dc     04 11 02 F6 | 	mov	local01, arg01
036e0     08 13 02 FB | 	rdlong	local02, local01
036e4     09 15 02 FB | 	rdlong	local03, local02
036e8     08 12 06 F1 | 	add	local02, #8
036ec     09 17 02 FB | 	rdlong	local04, local02
036f0     08 12 86 F1 | 	sub	local02, #8
036f4     02 16 CE F7 | 	test	local04, #2 wz
036f8     B8 00 90 AD |  if_e	jmp	#LR__0228
036fc     01 14 56 F2 | 	cmps	local03, #1 wc
03700     24 01 90 CD |  if_b	jmp	#LR__0230
03704     08 10 06 F1 | 	add	local01, #8
03708     08 17 02 FB | 	rdlong	local04, local01
0370c     08 10 86 F1 | 	sub	local01, #8
03710     40 16 CE F7 | 	test	local04, #64 wz
03714     5C 00 90 AD |  if_e	jmp	#LR__0227
03718     08 10 06 F1 | 	add	local01, #8
0371c     08 17 02 FB | 	rdlong	local04, local01
03720     08 10 86 F1 | 	sub	local01, #8
03724     80 16 CE F7 | 	test	local04, #128 wz
03728     48 00 90 AD |  if_e	jmp	#LR__0226
0372c     2C 10 06 F1 | 	add	local01, #44
03730     08 17 02 FB | 	rdlong	local04, local01
03734     2C 10 86 F1 | 	sub	local01, #44
03738     0B 19 02 FB | 	rdlong	local05, local04
0373c     04 16 06 F1 | 	add	local04, #4
03740     0B 17 02 FB | 	rdlong	local04, local04
03744     08 09 02 F6 | 	mov	arg01, local01
03748     00 0A 06 F6 | 	mov	arg02, #0
0374c     02 0C 06 F6 | 	mov	arg03, #2
03750     F1 1A 02 F6 | 	mov	local06, objptr
03754     0C E3 01 F6 | 	mov	objptr, local05
03758     2D 16 62 FD | 	call	local04
0375c     0D E3 01 F6 | 	mov	objptr, local06
03760     08 10 06 F1 | 	add	local01, #8
03764     08 17 02 FB | 	rdlong	local04, local01
03768     80 16 26 F5 | 	andn	local04, #128
0376c     08 17 62 FC | 	wrlong	local04, local01
03770     08 10 86 F1 | 	sub	local01, #8
03774                 | LR__0226
03774                 | LR__0227
03774     0C 12 06 F1 | 	add	local02, #12
03778     09 0B 02 F6 | 	mov	arg02, local02
0377c     0C 12 86 F1 | 	sub	local02, #12
03780     14 10 06 F1 | 	add	local01, #20
03784     08 17 02 FB | 	rdlong	local04, local01
03788     14 10 86 F1 | 	sub	local01, #20
0378c     0B 19 02 FB | 	rdlong	local05, local04
03790     04 16 06 F1 | 	add	local04, #4
03794     0B 1D 02 FB | 	rdlong	local07, local04
03798     08 09 02 F6 | 	mov	arg01, local01
0379c     0A 0D 02 F6 | 	mov	arg03, local03
037a0     F1 1A 02 F6 | 	mov	local06, objptr
037a4     0C E3 01 F6 | 	mov	objptr, local05
037a8     2D 1C 62 FD | 	call	local07
037ac     0D E3 01 F6 | 	mov	objptr, local06
037b0     74 00 90 FD | 	jmp	#LR__0230
037b4                 | LR__0228
037b4     08 12 06 F1 | 	add	local02, #8
037b8     09 17 02 FB | 	rdlong	local04, local02
037bc     08 12 86 F1 | 	sub	local02, #8
037c0     01 16 CE F7 | 	test	local04, #1 wz
037c4     60 00 90 AD |  if_e	jmp	#LR__0229
037c8     00 14 0E F2 | 	cmp	local03, #0 wz
037cc     58 00 90 AD |  if_e	jmp	#LR__0229
037d0     2C 10 06 F1 | 	add	local01, #44
037d4     08 1F 02 FB | 	rdlong	local08, local01
037d8     2C 10 86 F1 | 	sub	local01, #44
037dc     0F 17 02 F6 | 	mov	local04, local08
037e0     0B 19 02 FB | 	rdlong	local05, local04
037e4     04 16 06 F1 | 	add	local04, #4
037e8     0B 21 02 FB | 	rdlong	local09, local04
037ec     10 1D 02 F6 | 	mov	local07, local09
037f0     08 23 02 F6 | 	mov	local10, local01
037f4     0A 25 62 F6 | 	neg	local11, local03
037f8     01 26 06 F6 | 	mov	local12, #1
037fc     11 09 02 F6 | 	mov	arg01, local10
03800     12 0B 02 F6 | 	mov	arg02, local11
03804     01 0C 06 F6 | 	mov	arg03, #1
03808     F1 1A 02 F6 | 	mov	local06, objptr
0380c     0C E3 01 F6 | 	mov	objptr, local05
03810     2D 1C 62 FD | 	call	local07
03814     0D E3 01 F6 | 	mov	objptr, local06
03818     FB 16 02 F6 | 	mov	local04, result1
0381c     0B 29 02 F6 | 	mov	local13, local04
03820     00 28 56 F2 | 	cmps	local13, #0 wc
03824     0A 29 02 36 |  if_ae	mov	local13, local03
03828                 | LR__0229
03828                 | LR__0230
03828     09 01 68 FC | 	wrlong	#0, local02
0382c     04 12 06 F1 | 	add	local02, #4
03830     09 01 68 FC | 	wrlong	#0, local02
03834     04 12 06 F1 | 	add	local02, #4
03838     09 01 68 FC | 	wrlong	#0, local02
0383c     00 F6 05 F6 | 	mov	result1, #0
03840     A8 F0 03 F6 | 	mov	ptra, fp
03844     B3 00 A0 FD | 	call	#popregs_
03848                 | __system____default_flush_ret
03848     2D 00 64 FD | 	ret
0384c                 | 
0384c                 | __system__write
0384c     01 4C 05 F6 | 	mov	COUNT_, #1
03850     A9 00 A0 FD | 	call	#pushregs_
03854     04 11 02 F6 | 	mov	local01, arg01
03858     0A 10 16 F2 | 	cmp	local01, #10 wc
0385c     18 E8 05 31 |  if_ae	add	ptr___system__dat__, #24
03860     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
03864     18 E8 85 31 |  if_ae	sub	ptr___system__dat__, #24
03868     01 F6 65 36 |  if_ae	neg	result1, #1
0386c     20 00 90 3D |  if_ae	jmp	#LR__0231
03870     08 09 02 F6 | 	mov	arg01, local01
03874     01 08 66 F0 | 	shl	arg01, #1
03878     08 09 02 F1 | 	add	arg01, local01
0387c     04 08 66 F0 | 	shl	arg01, #4
03880     20 E8 05 F1 | 	add	ptr___system__dat__, #32
03884     F4 08 02 F1 | 	add	arg01, ptr___system__dat__
03888     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0388c     5C 03 B0 FD | 	call	#__system___vfswrite
03890                 | LR__0231
03890     A8 F0 03 F6 | 	mov	ptra, fp
03894     B3 00 A0 FD | 	call	#popregs_
03898                 | __system__write_ret
03898     2D 00 64 FD | 	ret
0389c                 | 
0389c                 | __system__read
0389c     01 4C 05 F6 | 	mov	COUNT_, #1
038a0     A9 00 A0 FD | 	call	#pushregs_
038a4     04 11 02 F6 | 	mov	local01, arg01
038a8     0A 10 16 F2 | 	cmp	local01, #10 wc
038ac     18 E8 05 31 |  if_ae	add	ptr___system__dat__, #24
038b0     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
038b4     18 E8 85 31 |  if_ae	sub	ptr___system__dat__, #24
038b8     01 F6 65 36 |  if_ae	neg	result1, #1
038bc     20 00 90 3D |  if_ae	jmp	#LR__0232
038c0     08 09 02 F6 | 	mov	arg01, local01
038c4     01 08 66 F0 | 	shl	arg01, #1
038c8     08 09 02 F1 | 	add	arg01, local01
038cc     04 08 66 F0 | 	shl	arg01, #4
038d0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
038d4     F4 08 02 F1 | 	add	arg01, ptr___system__dat__
038d8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
038dc     B0 04 B0 FD | 	call	#__system___vfsread
038e0                 | LR__0232
038e0     A8 F0 03 F6 | 	mov	ptra, fp
038e4     B3 00 A0 FD | 	call	#popregs_
038e8                 | __system__read_ret
038e8     2D 00 64 FD | 	ret
038ec                 | 
038ec                 | __system__close
038ec     01 4C 05 F6 | 	mov	COUNT_, #1
038f0     A9 00 A0 FD | 	call	#pushregs_
038f4     04 11 02 F6 | 	mov	local01, arg01
038f8     0A 10 16 F2 | 	cmp	local01, #10 wc
038fc     18 E8 05 31 |  if_ae	add	ptr___system__dat__, #24
03900     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
03904     18 E8 85 31 |  if_ae	sub	ptr___system__dat__, #24
03908     01 F6 65 36 |  if_ae	neg	result1, #1
0390c     20 00 90 3D |  if_ae	jmp	#LR__0233
03910     08 09 02 F6 | 	mov	arg01, local01
03914     01 08 66 F0 | 	shl	arg01, #1
03918     08 09 02 F1 | 	add	arg01, local01
0391c     04 08 66 F0 | 	shl	arg01, #4
03920     20 E8 05 F1 | 	add	ptr___system__dat__, #32
03924     F4 08 02 F1 | 	add	arg01, ptr___system__dat__
03928     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0392c     D8 FA BF FD | 	call	#__system___closeraw
03930                 | LR__0233
03930     A8 F0 03 F6 | 	mov	ptra, fp
03934     B3 00 A0 FD | 	call	#popregs_
03938                 | __system__close_ret
03938     2D 00 64 FD | 	ret
0393c                 | 
0393c                 | __system__lseek
0393c     06 4C 05 F6 | 	mov	COUNT_, #6
03940     A9 00 A0 FD | 	call	#pushregs_
03944     0A 08 16 F2 | 	cmp	arg01, #10 wc
03948     18 E8 05 31 |  if_ae	add	ptr___system__dat__, #24
0394c     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
03950     18 E8 85 31 |  if_ae	sub	ptr___system__dat__, #24
03954     01 F6 65 36 |  if_ae	neg	result1, #1
03958     B8 00 90 3D |  if_ae	jmp	#LR__0235
0395c     04 11 02 F6 | 	mov	local01, arg01
03960     01 10 66 F0 | 	shl	local01, #1
03964     04 11 02 F1 | 	add	local01, arg01
03968     04 10 66 F0 | 	shl	local01, #4
0396c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
03970     F4 10 02 F1 | 	add	local01, ptr___system__dat__
03974     2C 10 06 F1 | 	add	local01, #44
03978     08 09 0A FB | 	rdlong	arg01, local01 wz
0397c     2C 10 86 F1 | 	sub	local01, #44
03980     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
03984     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
03988     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
0398c     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
03990     01 F6 65 A6 |  if_e	neg	result1, #1
03994     7C 00 90 AD |  if_e	jmp	#LR__0235
03998     08 10 06 F1 | 	add	local01, #8
0399c     08 13 02 FB | 	rdlong	local02, local01
039a0     08 10 86 F1 | 	sub	local01, #8
039a4     40 12 CE F7 | 	test	local02, #64 wz
039a8     08 10 06 51 |  if_ne	add	local01, #8
039ac     08 13 02 5B |  if_ne	rdlong	local02, local01
039b0     80 12 46 55 |  if_ne	or	local02, #128
039b4     08 13 62 5C |  if_ne	wrlong	local02, local01
039b8     08 10 86 51 |  if_ne	sub	local01, #8
039bc     2C 10 06 F1 | 	add	local01, #44
039c0     08 13 02 FB | 	rdlong	local02, local01
039c4     2C 10 86 F1 | 	sub	local01, #44
039c8     09 15 02 FB | 	rdlong	local03, local02
039cc     04 12 06 F1 | 	add	local02, #4
039d0     09 17 02 FB | 	rdlong	local04, local02
039d4     08 09 02 F6 | 	mov	arg01, local01
039d8     F1 18 02 F6 | 	mov	local05, objptr
039dc     0A E3 01 F6 | 	mov	objptr, local03
039e0     2D 16 62 FD | 	call	local04
039e4     0C E3 01 F6 | 	mov	objptr, local05
039e8     FB 1A 02 F6 | 	mov	local06, result1
039ec     00 1A 56 F2 | 	cmps	local06, #0 wc
039f0     1C 00 90 3D |  if_ae	jmp	#LR__0234
039f4     0D 09 6A F6 | 	neg	arg01, local06 wz
039f8     18 E8 05 F1 | 	add	ptr___system__dat__, #24
039fc     F4 08 62 FC | 	wrlong	arg01, ptr___system__dat__
03a00     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
03a04     01 F6 65 56 |  if_ne	neg	result1, #1
03a08     00 F6 05 A6 |  if_e	mov	result1, #0
03a0c     04 00 90 FD | 	jmp	#LR__0235
03a10                 | LR__0234
03a10     0D F7 01 F6 | 	mov	result1, local06
03a14                 | LR__0235
03a14     A8 F0 03 F6 | 	mov	ptra, fp
03a18     B3 00 A0 FD | 	call	#popregs_
03a1c                 | __system__lseek_ret
03a1c     2D 00 64 FD | 	ret
03a20                 | 
03a20                 | __system____getftab
03a20     0A 08 16 F2 | 	cmp	arg01, #10 wc
03a24     00 F6 05 36 |  if_ae	mov	result1, #0
03a28     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
03a2c     04 F7 01 F6 | 	mov	result1, arg01
03a30     01 F6 65 F0 | 	shl	result1, #1
03a34     04 F7 01 F1 | 	add	result1, arg01
03a38     04 F6 65 F0 | 	shl	result1, #4
03a3c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
03a40     F4 F6 01 F1 | 	add	result1, ptr___system__dat__
03a44     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
03a48                 | __system____getftab_ret
03a48     2D 00 64 FD | 	ret
03a4c                 | 
03a4c                 | __system__pack_0145
03a4c     07 4C 05 F6 | 	mov	COUNT_, #7
03a50     A9 00 A0 FD | 	call	#pushregs_
03a54     04 11 02 F6 | 	mov	local01, arg01
03a58     05 13 02 F6 | 	mov	local02, arg02
03a5c     06 15 02 F6 | 	mov	local03, arg03
03a60     07 17 02 F6 | 	mov	local04, arg04
03a64     7F 14 06 F1 | 	add	local03, #127
03a68     04 16 CE F7 | 	test	local04, #4 wz
03a6c     10 00 90 AD |  if_e	jmp	#LR__0236
03a70     00 10 0E F2 | 	cmp	local01, #0 wz
03a74     16 10 C6 A9 |  if_e	decod	local01, #22
03a78     F7 10 26 F4 | 	bith	local01, #247
03a7c     B8 00 90 FD | 	jmp	#LR__0245
03a80                 | LR__0236
03a80     02 16 CE F7 | 	test	local04, #2 wz
03a84     00 C0 3F 5F 
03a88     00 10 06 56 |  if_ne	mov	local01, ##2139095040
03a8c     00 12 06 56 |  if_ne	mov	local02, #0
03a90     A4 00 90 5D |  if_ne	jmp	#LR__0244
03a94     08 16 CE F7 | 	test	local04, #8 wz
03a98     00 10 06 56 |  if_ne	mov	local01, #0
03a9c     98 00 90 5D |  if_ne	jmp	#LR__0243
03aa0     FF 14 56 F2 | 	cmps	local03, #255 wc
03aa4     00 C0 3F 3F 
03aa8     00 10 06 36 |  if_ae	mov	local01, ##2139095040
03aac     00 12 06 36 |  if_ae	mov	local02, #0
03ab0     84 00 90 3D |  if_ae	jmp	#LR__0242
03ab4     01 14 56 F2 | 	cmps	local03, #1 wc
03ab8     70 00 90 3D |  if_ae	jmp	#LR__0240
03abc     01 12 46 F0 | 	shr	local02, #1
03ac0     08 19 02 F6 | 	mov	local05, local01
03ac4     01 18 06 F5 | 	and	local05, #1
03ac8     1F 18 66 F0 | 	shl	local05, #31
03acc     0C 13 42 F5 | 	or	local02, local05
03ad0     01 10 46 F0 | 	shr	local01, #1
03ad4     64 C5 9F FE | 	loc	pa,	#(@LR__0238-@LR__0237)
03ad8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
03adc                 | LR__0237
03adc     00 14 56 F2 | 	cmps	local03, #0 wc
03ae0     34 00 90 3D |  if_ae	jmp	#LR__0239
03ae4     00 10 0E F2 | 	cmp	local01, #0 wz
03ae8     2C 00 90 AD |  if_e	jmp	#LR__0239
03aec     09 1B 02 F6 | 	mov	local06, local02
03af0     01 1A 06 F5 | 	and	local06, #1
03af4     01 14 06 F1 | 	add	local03, #1
03af8     01 12 46 F0 | 	shr	local02, #1
03afc     08 1D 02 F6 | 	mov	local07, local01
03b00     01 1C 06 F5 | 	and	local07, #1
03b04     1F 1C 66 F0 | 	shl	local07, #31
03b08     0E 13 42 F5 | 	or	local02, local07
03b0c     0D 13 42 F5 | 	or	local02, local06
03b10     01 10 46 F0 | 	shr	local01, #1
03b14     C4 FF 9F FD | 	jmp	#LR__0237
03b18                 | LR__0238
03b18                 | LR__0239
03b18     00 14 56 F2 | 	cmps	local03, #0 wc
03b1c     18 00 90 3D |  if_ae	jmp	#LR__0241
03b20     00 12 0E F2 | 	cmp	local02, #0 wz
03b24     6F 12 62 FD | 	wrnz	local02
03b28     0C 00 90 FD | 	jmp	#LR__0241
03b2c                 | LR__0240
03b2c     17 11 06 F4 | 	bitl	local01, #279
03b30     17 14 66 F0 | 	shl	local03, #23
03b34     0A 11 42 F5 | 	or	local01, local03
03b38                 | LR__0241
03b38                 | LR__0242
03b38                 | LR__0243
03b38                 | LR__0244
03b38                 | LR__0245
03b38     01 10 CE F7 | 	test	local01, #1 wz
03b3c     01 12 46 55 |  if_ne	or	local02, #1
03b40     09 1D 02 F6 | 	mov	local07, local02
03b44     00 1A 06 F6 | 	mov	local06, #0
03b48     FF FF 3F FF 
03b4c     FF 13 06 F1 | 	add	local02, ##2147483647
03b50     0E 13 12 F2 | 	cmp	local02, local07 wc
03b54     01 1A 06 C6 |  if_b	mov	local06, #1
03b58     0D 11 02 F1 | 	add	local01, local06
03b5c     01 16 CE F7 | 	test	local04, #1 wz
03b60     1F 10 26 54 |  if_ne	bith	local01, #31
03b64     08 F7 01 F6 | 	mov	result1, local01
03b68     A8 F0 03 F6 | 	mov	ptra, fp
03b6c     B3 00 A0 FD | 	call	#popregs_
03b70                 | __system__pack_0145_ret
03b70     2D 00 64 FD | 	ret
03b74                 | 
03b74                 | __system___rxtxioctl_0190
03b74     02 4C 05 F6 | 	mov	COUNT_, #2
03b78     A9 00 A0 FD | 	call	#pushregs_
03b7c     05 11 02 F6 | 	mov	local01, arg02
03b80     06 13 02 F6 | 	mov	local02, arg03
03b84     00 11 0E F2 | 	cmp	local01, #256 wz
03b88     0C 00 90 AD |  if_e	jmp	#LR__0246
03b8c     01 11 0E F2 | 	cmp	local01, #257 wz
03b90     1C 00 90 AD |  if_e	jmp	#LR__0247
03b94     30 00 90 FD | 	jmp	#LR__0248
03b98                 | LR__0246
03b98     08 E8 05 F1 | 	add	ptr___system__dat__, #8
03b9c     F4 F6 01 FB | 	rdlong	result1, ptr___system__dat__
03ba0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
03ba4     09 F7 61 FC | 	wrlong	result1, local02
03ba8     00 F6 05 F6 | 	mov	result1, #0
03bac     28 00 90 FD | 	jmp	#LR__0249
03bb0                 | LR__0247
03bb0     09 09 02 FB | 	rdlong	arg01, local02
03bb4     08 E8 05 F1 | 	add	ptr___system__dat__, #8
03bb8     F4 08 62 FC | 	wrlong	arg01, ptr___system__dat__
03bbc     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
03bc0     00 F6 05 F6 | 	mov	result1, #0
03bc4     10 00 90 FD | 	jmp	#LR__0249
03bc8                 | LR__0248
03bc8     18 E8 05 F1 | 	add	ptr___system__dat__, #24
03bcc     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
03bd0     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
03bd4     01 F6 65 F6 | 	neg	result1, #1
03bd8                 | LR__0249
03bd8     A8 F0 03 F6 | 	mov	ptra, fp
03bdc     B3 00 A0 FD | 	call	#popregs_
03be0                 | __system___rxtxioctl_0190_ret
03be0     2D 00 64 FD | 	ret
03be4                 | 
03be4                 | __system____dummy_flush_0191
03be4     00 F6 05 F6 | 	mov	result1, #0
03be8                 | __system____dummy_flush_0191_ret
03be8     2D 00 64 FD | 	ret
03bec                 | 
03bec                 | __system___vfswrite
03bec     09 4C 05 F6 | 	mov	COUNT_, #9
03bf0     A9 00 A0 FD | 	call	#pushregs_
03bf4     04 11 02 F6 | 	mov	local01, arg01
03bf8     05 13 02 F6 | 	mov	local02, arg02
03bfc     06 15 02 F6 | 	mov	local03, arg03
03c00     09 17 02 F6 | 	mov	local04, local02
03c04     08 10 06 F1 | 	add	local01, #8
03c08     08 09 02 FB | 	rdlong	arg01, local01
03c0c     08 10 86 F1 | 	sub	local01, #8
03c10     02 08 CE F7 | 	test	arg01, #2 wz
03c14     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
03c18     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
03c1c     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
03c20     01 F6 65 A6 |  if_e	neg	result1, #1
03c24     5C 01 90 AD |  if_e	jmp	#LR__0256
03c28     08 10 06 F1 | 	add	local01, #8
03c2c     08 F7 01 FB | 	rdlong	result1, local01
03c30     08 10 86 F1 | 	sub	local01, #8
03c34     40 F6 CD F7 | 	test	result1, #64 wz
03c38     5C 00 90 AD |  if_e	jmp	#LR__0251
03c3c     08 10 06 F1 | 	add	local01, #8
03c40     08 F7 01 FB | 	rdlong	result1, local01
03c44     08 10 86 F1 | 	sub	local01, #8
03c48     80 F6 CD F7 | 	test	result1, #128 wz
03c4c     48 00 90 AD |  if_e	jmp	#LR__0250
03c50     2C 10 06 F1 | 	add	local01, #44
03c54     08 0D 02 FB | 	rdlong	arg03, local01
03c58     2C 10 86 F1 | 	sub	local01, #44
03c5c     06 19 02 FB | 	rdlong	local05, arg03
03c60     04 0C 06 F1 | 	add	arg03, #4
03c64     06 1B 02 FB | 	rdlong	local06, arg03
03c68     08 09 02 F6 | 	mov	arg01, local01
03c6c     00 0A 06 F6 | 	mov	arg02, #0
03c70     02 0C 06 F6 | 	mov	arg03, #2
03c74     F1 1C 02 F6 | 	mov	local07, objptr
03c78     0C E3 01 F6 | 	mov	objptr, local05
03c7c     2D 1A 62 FD | 	call	local06
03c80     0E E3 01 F6 | 	mov	objptr, local07
03c84     08 10 06 F1 | 	add	local01, #8
03c88     08 1D 02 FB | 	rdlong	local07, local01
03c8c     80 1C 26 F5 | 	andn	local07, #128
03c90     08 1D 62 FC | 	wrlong	local07, local01
03c94     08 10 86 F1 | 	sub	local01, #8
03c98                 | LR__0250
03c98                 | LR__0251
03c98     14 10 06 F1 | 	add	local01, #20
03c9c     08 1D 0A FB | 	rdlong	local07, local01 wz
03ca0     14 10 86 F1 | 	sub	local01, #20
03ca4     74 00 90 AD |  if_e	jmp	#LR__0253
03ca8     14 10 06 F1 | 	add	local01, #20
03cac     08 1D 02 FB | 	rdlong	local07, local01
03cb0     14 10 86 F1 | 	sub	local01, #20
03cb4     0E 19 02 FB | 	rdlong	local05, local07
03cb8     04 1C 06 F1 | 	add	local07, #4
03cbc     0E 1B 02 FB | 	rdlong	local06, local07
03cc0     09 0B 02 F6 | 	mov	arg02, local02
03cc4     0A 0D 02 F6 | 	mov	arg03, local03
03cc8     08 09 02 F6 | 	mov	arg01, local01
03ccc     F1 1C 02 F6 | 	mov	local07, objptr
03cd0     0C E3 01 F6 | 	mov	objptr, local05
03cd4     2D 1A 62 FD | 	call	local06
03cd8     0E E3 01 F6 | 	mov	objptr, local07
03cdc     FB 1E 02 F6 | 	mov	local08, result1
03ce0     00 1E 56 F2 | 	cmps	local08, #0 wc
03ce4     2C 00 90 3D |  if_ae	jmp	#LR__0252
03ce8     08 10 06 F1 | 	add	local01, #8
03cec     08 1D 02 FB | 	rdlong	local07, local01
03cf0     20 1C 46 F5 | 	or	local07, #32
03cf4     08 1D 62 FC | 	wrlong	local07, local01
03cf8     18 E8 05 F1 | 	add	ptr___system__dat__, #24
03cfc     F4 1E 62 FC | 	wrlong	local08, ptr___system__dat__
03d00     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
03d04     00 1E 0E F2 | 	cmp	local08, #0 wz
03d08     01 F6 65 56 |  if_ne	neg	result1, #1
03d0c     00 F6 05 A6 |  if_e	mov	result1, #0
03d10     70 00 90 FD | 	jmp	#LR__0256
03d14                 | LR__0252
03d14     0F F7 01 F6 | 	mov	result1, local08
03d18     68 00 90 FD | 	jmp	#LR__0256
03d1c                 | LR__0253
03d1c     18 10 06 F1 | 	add	local01, #24
03d20     08 21 0A FB | 	rdlong	local09, local01 wz
03d24     18 10 86 F1 | 	sub	local01, #24
03d28     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
03d2c     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
03d30     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
03d34     01 F6 65 A6 |  if_e	neg	result1, #1
03d38     48 00 90 AD |  if_e	jmp	#LR__0256
03d3c     00 1E 06 F6 | 	mov	local08, #0
03d40                 | LR__0254
03d40     01 14 16 F2 | 	cmp	local03, #1 wc
03d44     38 00 90 CD |  if_b	jmp	#LR__0255
03d48     10 1D 02 F6 | 	mov	local07, local09
03d4c     0E 19 02 FB | 	rdlong	local05, local07
03d50     04 1C 06 F1 | 	add	local07, #4
03d54     0E 1B 02 FB | 	rdlong	local06, local07
03d58     0B 09 C2 FA | 	rdbyte	arg01, local04
03d5c     08 0B 02 F6 | 	mov	arg02, local01
03d60     F1 1C 02 F6 | 	mov	local07, objptr
03d64     0C E3 01 F6 | 	mov	objptr, local05
03d68     2D 1A 62 FD | 	call	local06
03d6c     0E E3 01 F6 | 	mov	objptr, local07
03d70     FB 1E 02 F1 | 	add	local08, result1
03d74     01 14 86 F1 | 	sub	local03, #1
03d78     01 16 06 F1 | 	add	local04, #1
03d7c     C0 FF 9F FD | 	jmp	#LR__0254
03d80                 | LR__0255
03d80     0F F7 01 F6 | 	mov	result1, local08
03d84                 | LR__0256
03d84     A8 F0 03 F6 | 	mov	ptra, fp
03d88     B3 00 A0 FD | 	call	#popregs_
03d8c                 | __system___vfswrite_ret
03d8c     2D 00 64 FD | 	ret
03d90                 | 
03d90                 | __system___vfsread
03d90     0C 4C 05 F6 | 	mov	COUNT_, #12
03d94     A9 00 A0 FD | 	call	#pushregs_
03d98     2C F0 07 F1 | 	add	ptra, #44
03d9c     04 50 05 F1 | 	add	fp, #4
03da0     A8 08 62 FC | 	wrlong	arg01, fp
03da4     04 50 05 F1 | 	add	fp, #4
03da8     A8 0A 62 FC | 	wrlong	arg02, fp
03dac     04 50 05 F1 | 	add	fp, #4
03db0     A8 0C 62 FC | 	wrlong	arg03, fp
03db4     04 50 85 F1 | 	sub	fp, #4
03db8     A8 10 02 FB | 	rdlong	local01, fp
03dbc     14 50 05 F1 | 	add	fp, #20
03dc0     A8 10 62 FC | 	wrlong	local01, fp
03dc4     04 50 05 F1 | 	add	fp, #4
03dc8     A8 00 68 FC | 	wrlong	#0, fp
03dcc     1C 50 85 F1 | 	sub	fp, #28
03dd0     A8 12 02 FB | 	rdlong	local02, fp
03dd4     04 50 85 F1 | 	sub	fp, #4
03dd8     08 12 06 F1 | 	add	local02, #8
03ddc     09 11 02 FB | 	rdlong	local01, local02
03de0     01 10 CE F7 | 	test	local01, #1 wz
03de4     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
03de8     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
03dec     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
03df0     01 F6 65 A6 |  if_e	neg	result1, #1
03df4     74 02 90 AD |  if_e	jmp	#LR__0263
03df8     04 50 05 F1 | 	add	fp, #4
03dfc     A8 10 02 FB | 	rdlong	local01, fp
03e00     04 50 85 F1 | 	sub	fp, #4
03e04     10 10 06 F1 | 	add	local01, #16
03e08     08 11 0A FB | 	rdlong	local01, local01 wz
03e0c     AC 00 90 AD |  if_e	jmp	#LR__0258
03e10     04 50 05 F1 | 	add	fp, #4
03e14     A8 08 02 FB | 	rdlong	arg01, fp
03e18     04 13 02 F6 | 	mov	local02, arg01
03e1c     10 12 06 F1 | 	add	local02, #16
03e20     09 11 02 FB | 	rdlong	local01, local02
03e24     08 13 02 FB | 	rdlong	local02, local01
03e28     04 10 06 F1 | 	add	local01, #4
03e2c     08 11 02 FB | 	rdlong	local01, local01
03e30     04 50 05 F1 | 	add	fp, #4
03e34     A8 0A 02 FB | 	rdlong	arg02, fp
03e38     04 50 05 F1 | 	add	fp, #4
03e3c     A8 0C 02 FB | 	rdlong	arg03, fp
03e40     0C 50 85 F1 | 	sub	fp, #12
03e44     F1 14 02 F6 | 	mov	local03, objptr
03e48     09 E3 01 F6 | 	mov	objptr, local02
03e4c     2D 10 62 FD | 	call	local01
03e50     0A E3 01 F6 | 	mov	objptr, local03
03e54     10 50 05 F1 | 	add	fp, #16
03e58     A8 F6 61 FC | 	wrlong	result1, fp
03e5c     10 50 85 F1 | 	sub	fp, #16
03e60     00 F6 55 F2 | 	cmps	result1, #0 wc
03e64     44 00 90 3D |  if_ae	jmp	#LR__0257
03e68     04 50 05 F1 | 	add	fp, #4
03e6c     A8 14 02 FB | 	rdlong	local03, fp
03e70     0A 11 02 F6 | 	mov	local01, local03
03e74     08 14 06 F1 | 	add	local03, #8
03e78     0A 15 02 FB | 	rdlong	local03, local03
03e7c     20 14 46 F5 | 	or	local03, #32
03e80     08 10 06 F1 | 	add	local01, #8
03e84     08 15 62 FC | 	wrlong	local03, local01
03e88     0C 50 05 F1 | 	add	fp, #12
03e8c     A8 08 0A FB | 	rdlong	arg01, fp wz
03e90     10 50 85 F1 | 	sub	fp, #16
03e94     18 E8 05 F1 | 	add	ptr___system__dat__, #24
03e98     F4 08 62 FC | 	wrlong	arg01, ptr___system__dat__
03e9c     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
03ea0     01 F6 65 56 |  if_ne	neg	result1, #1
03ea4     00 F6 05 A6 |  if_e	mov	result1, #0
03ea8     C0 01 90 FD | 	jmp	#LR__0263
03eac                 | LR__0257
03eac     10 50 05 F1 | 	add	fp, #16
03eb0     A8 F6 01 FB | 	rdlong	result1, fp
03eb4     10 50 85 F1 | 	sub	fp, #16
03eb8     B0 01 90 FD | 	jmp	#LR__0263
03ebc                 | LR__0258
03ebc     04 50 05 F1 | 	add	fp, #4
03ec0     A8 10 02 FB | 	rdlong	local01, fp
03ec4     1C 10 06 F1 | 	add	local01, #28
03ec8     08 11 0A FB | 	rdlong	local01, local01 wz
03ecc     14 50 05 F1 | 	add	fp, #20
03ed0     A8 10 62 FC | 	wrlong	local01, fp
03ed4     18 50 85 F1 | 	sub	fp, #24
03ed8     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
03edc     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
03ee0     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
03ee4     01 F6 65 A6 |  if_e	neg	result1, #1
03ee8     80 01 90 AD |  if_e	jmp	#LR__0263
03eec     04 50 05 F1 | 	add	fp, #4
03ef0     A8 10 02 FB | 	rdlong	local01, fp
03ef4     04 50 85 F1 | 	sub	fp, #4
03ef8     24 10 06 F1 | 	add	local01, #36
03efc     08 17 0A FB | 	rdlong	local04, local01 wz
03f00     94 00 90 AD |  if_e	jmp	#LR__0260
03f04     24 50 05 F1 | 	add	fp, #36
03f08     A8 18 02 F6 | 	mov	local05, fp
03f0c     20 50 85 F1 | 	sub	fp, #32
03f10     A8 1A 02 FB | 	rdlong	local06, fp
03f14     0D 1D 02 F6 | 	mov	local07, local06
03f18     24 1C 06 F1 | 	add	local07, #36
03f1c     0E 1F 02 FB | 	rdlong	local08, local07
03f20     0F 11 02 F6 | 	mov	local01, local08
03f24     08 13 02 FB | 	rdlong	local02, local01
03f28     04 10 06 F1 | 	add	local01, #4
03f2c     08 21 02 FB | 	rdlong	local09, local01
03f30     10 17 02 F6 | 	mov	local04, local09
03f34     04 50 85 F1 | 	sub	fp, #4
03f38     0D 23 02 F6 | 	mov	local10, local06
03f3c     00 25 06 F6 | 	mov	local11, #256
03f40     0C 27 02 F6 | 	mov	local12, local05
03f44     11 09 02 F6 | 	mov	arg01, local10
03f48     00 0B 06 F6 | 	mov	arg02, #256
03f4c     13 0D 02 F6 | 	mov	arg03, local12
03f50     F1 14 02 F6 | 	mov	local03, objptr
03f54     09 E3 01 F6 | 	mov	objptr, local02
03f58     2D 16 62 FD | 	call	local04
03f5c     0A E3 01 F6 | 	mov	objptr, local03
03f60     10 50 05 F1 | 	add	fp, #16
03f64     A8 F6 61 FC | 	wrlong	result1, fp
03f68     FB 12 0A F6 | 	mov	local02, result1 wz
03f6c     10 50 85 F1 | 	sub	fp, #16
03f70     24 00 90 5D |  if_ne	jmp	#LR__0259
03f74     24 50 05 F1 | 	add	fp, #36
03f78     A8 1C 02 FB | 	rdlong	local07, fp
03f7c     24 50 85 F1 | 	sub	fp, #36
03f80     0E 17 02 F6 | 	mov	local04, local07
03f84     02 16 0E F5 | 	and	local04, #2 wz
03f88     01 10 06 56 |  if_ne	mov	local01, #1
03f8c     20 50 05 51 |  if_ne	add	fp, #32
03f90     A8 02 68 5C |  if_ne	wrlong	#1, fp
03f94     20 50 85 51 |  if_ne	sub	fp, #32
03f98                 | LR__0259
03f98                 | LR__0260
03f98     10 50 05 F1 | 	add	fp, #16
03f9c     A8 00 68 FC | 	wrlong	#0, fp
03fa0     10 50 85 F1 | 	sub	fp, #16
03fa4                 | LR__0261
03fa4     0C 50 05 F1 | 	add	fp, #12
03fa8     A8 10 02 FB | 	rdlong	local01, fp
03fac     0C 50 85 F1 | 	sub	fp, #12
03fb0     01 10 16 F2 | 	cmp	local01, #1 wc
03fb4     A8 00 90 CD |  if_b	jmp	#LR__0262
03fb8     18 50 05 F1 | 	add	fp, #24
03fbc     A8 10 02 FB | 	rdlong	local01, fp
03fc0     08 13 02 FB | 	rdlong	local02, local01
03fc4     04 10 06 F1 | 	add	local01, #4
03fc8     08 17 02 FB | 	rdlong	local04, local01
03fcc     14 50 85 F1 | 	sub	fp, #20
03fd0     A8 08 02 FB | 	rdlong	arg01, fp
03fd4     04 50 85 F1 | 	sub	fp, #4
03fd8     F1 20 02 F6 | 	mov	local09, objptr
03fdc     09 E3 01 F6 | 	mov	objptr, local02
03fe0     2D 16 62 FD | 	call	local04
03fe4     10 E3 01 F6 | 	mov	objptr, local09
03fe8     14 50 05 F1 | 	add	fp, #20
03fec     A8 F6 61 FC | 	wrlong	result1, fp
03ff0     14 50 85 F1 | 	sub	fp, #20
03ff4     00 F6 55 F2 | 	cmps	result1, #0 wc
03ff8     64 00 90 CD |  if_b	jmp	#LR__0262
03ffc     1C 50 05 F1 | 	add	fp, #28
04000     A8 12 02 FB | 	rdlong	local02, fp
04004     09 17 02 F6 | 	mov	local04, local02
04008     01 16 06 F1 | 	add	local04, #1
0400c     A8 16 62 FC | 	wrlong	local04, fp
04010     08 50 85 F1 | 	sub	fp, #8
04014     A8 1A 02 FB | 	rdlong	local06, fp
04018     09 1B 42 FC | 	wrbyte	local06, local02
0401c     04 50 85 F1 | 	sub	fp, #4
04020     A8 10 02 FB | 	rdlong	local01, fp
04024     01 10 06 F1 | 	add	local01, #1
04028     A8 10 62 FC | 	wrlong	local01, fp
0402c     04 50 85 F1 | 	sub	fp, #4
04030     A8 10 02 FB | 	rdlong	local01, fp
04034     01 10 86 F1 | 	sub	local01, #1
04038     A8 10 62 FC | 	wrlong	local01, fp
0403c     14 50 05 F1 | 	add	fp, #20
04040     A8 10 0A FB | 	rdlong	local01, fp wz
04044     20 50 85 F1 | 	sub	fp, #32
04048     58 FF 9F AD |  if_e	jmp	#LR__0261
0404c     14 50 05 F1 | 	add	fp, #20
04050     A8 16 02 FB | 	rdlong	local04, fp
04054     14 50 85 F1 | 	sub	fp, #20
04058     0A 16 0E F2 | 	cmp	local04, #10 wz
0405c     44 FF 9F 5D |  if_ne	jmp	#LR__0261
04060                 | LR__0262
04060     10 50 05 F1 | 	add	fp, #16
04064     A8 F6 01 FB | 	rdlong	result1, fp
04068     10 50 85 F1 | 	sub	fp, #16
0406c                 | LR__0263
0406c     A8 F0 03 F6 | 	mov	ptra, fp
04070     B3 00 A0 FD | 	call	#popregs_
04074                 | __system___vfsread_ret
04074     2D 00 64 FD | 	ret
04078                 | 
04078                 | __struct__s_vfs_file_t_putchar
04078     04 4C 05 F6 | 	mov	COUNT_, #4
0407c     A9 00 A0 FD | 	call	#pushregs_
04080     18 E2 05 F1 | 	add	objptr, #24
04084     F1 0A 0A FB | 	rdlong	arg02, objptr wz
04088     18 E2 85 F1 | 	sub	objptr, #24
0408c     00 F6 05 A6 |  if_e	mov	result1, #0
04090     3C 00 90 AD |  if_e	jmp	#LR__0264
04094     18 E2 05 F1 | 	add	objptr, #24
04098     F1 10 02 FB | 	rdlong	local01, objptr
0409c     18 E2 85 F1 | 	sub	objptr, #24
040a0     08 13 02 FB | 	rdlong	local02, local01
040a4     04 10 06 F1 | 	add	local01, #4
040a8     08 15 02 FB | 	rdlong	local03, local01
040ac     F1 0A 02 F6 | 	mov	arg02, objptr
040b0     F1 16 02 F6 | 	mov	local04, objptr
040b4     09 E3 01 F6 | 	mov	objptr, local02
040b8     2D 14 62 FD | 	call	local03
040bc     0B E3 01 F6 | 	mov	objptr, local04
040c0     00 F6 55 F2 | 	cmps	result1, #0 wc
040c4     00 10 06 C6 |  if_b	mov	local01, #0
040c8     01 10 06 36 |  if_ae	mov	local01, #1
040cc     08 F7 01 F6 | 	mov	result1, local01
040d0                 | LR__0264
040d0     A8 F0 03 F6 | 	mov	ptra, fp
040d4     B3 00 A0 FD | 	call	#popregs_
040d8                 | __struct__s_vfs_file_t_putchar_ret
040d8     2D 00 64 FD | 	ret
040dc                 | 
040dc                 | __struct__s_vfs_file_t_getchar
040dc     03 4C 05 F6 | 	mov	COUNT_, #3
040e0     A9 00 A0 FD | 	call	#pushregs_
040e4     1C E2 05 F1 | 	add	objptr, #28
040e8     F1 08 0A FB | 	rdlong	arg01, objptr wz
040ec     1C E2 85 F1 | 	sub	objptr, #28
040f0     01 F6 65 A6 |  if_e	neg	result1, #1
040f4     2C 00 90 AD |  if_e	jmp	#LR__0265
040f8                 | '         return getcf(__this);
040f8     1C E2 05 F1 | 	add	objptr, #28
040fc     F1 08 02 FB | 	rdlong	arg01, objptr
04100     1C E2 85 F1 | 	sub	objptr, #28
04104     04 11 02 FB | 	rdlong	local01, arg01
04108     04 08 06 F1 | 	add	arg01, #4
0410c     04 13 02 FB | 	rdlong	local02, arg01
04110     F1 08 02 F6 | 	mov	arg01, objptr
04114     F1 14 02 F6 | 	mov	local03, objptr
04118     08 E3 01 F6 | 	mov	objptr, local01
0411c     2D 12 62 FD | 	call	local02
04120     0A E3 01 F6 | 	mov	objptr, local03
04124                 | LR__0265
04124     A8 F0 03 F6 | 	mov	ptra, fp
04128     B3 00 A0 FD | 	call	#popregs_
0412c                 | __struct__s_vfs_file_t_getchar_ret
0412c     2D 00 64 FD | 	ret
04130                 | 
04130                 | __struct___bas_wrap_sender_tx
04130     03 4C 05 F6 | 	mov	COUNT_, #3
04134     A9 00 A0 FD | 	call	#pushregs_
04138     F1 10 02 FB | 	rdlong	local01, objptr
0413c     08 13 02 FB | 	rdlong	local02, local01
04140     04 10 06 F1 | 	add	local01, #4
04144     08 11 02 FB | 	rdlong	local01, local01
04148     F1 14 02 F6 | 	mov	local03, objptr
0414c     09 E3 01 F6 | 	mov	objptr, local02
04150     2D 10 62 FD | 	call	local01
04154     0A E3 01 F6 | 	mov	objptr, local03
04158     01 F6 05 F6 | 	mov	result1, #1
0415c     A8 F0 03 F6 | 	mov	ptra, fp
04160     B3 00 A0 FD | 	call	#popregs_
04164                 | __struct___bas_wrap_sender_tx_ret
04164     2D 00 64 FD | 	ret
04168                 | 
04168                 | __struct___bas_wrap_sender_rx
04168     03 4C 05 F6 | 	mov	COUNT_, #3
0416c     A9 00 A0 FD | 	call	#pushregs_
04170     04 E2 05 F1 | 	add	objptr, #4
04174     F1 10 02 FB | 	rdlong	local01, objptr
04178     04 E2 85 F1 | 	sub	objptr, #4
0417c     08 13 02 FB | 	rdlong	local02, local01
04180     04 10 06 F1 | 	add	local01, #4
04184     08 11 02 FB | 	rdlong	local01, local01
04188     F1 14 02 F6 | 	mov	local03, objptr
0418c     09 E3 01 F6 | 	mov	objptr, local02
04190     2D 10 62 FD | 	call	local01
04194     0A E3 01 F6 | 	mov	objptr, local03
04198     A8 F0 03 F6 | 	mov	ptra, fp
0419c     B3 00 A0 FD | 	call	#popregs_
041a0                 | __struct___bas_wrap_sender_rx_ret
041a0     2D 00 64 FD | 	ret
041a4                 | 
041a4                 | LR__0266
041a4     20 21 21 21 
041a8     20 63 6F 72 
041ac     72 75 70 74 
041b0     65 64 20 68 
041b4     65 61 70 3F 
041b8     3F 3F 20 21 
041bc     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
041bf     00          | 	byte	0
041c0                 | LR__0267
041c0     20 21 21 21 
041c4     20 6F 75 74 
041c8     20 6F 66 20 
041cc     68 65 61 70 
041d0     20 6D 65 6D 
041d4     6F 72 79 20 
041d8     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
041dc     00          | 	byte	0
041dd                 | LR__0268
041dd     20 21 21 21 
041e1     20 63 6F 72 
041e5     72 75 70 74 
041e9     65 64 20 68 
041ed     65 61 70 20 
041f1     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
041f5     00          | 	byte	0
041f6     00 00       | 	alignl
041f8                 | _hng030rm_spin2_dat_
041f8     00 00 00 00 
041fc     00 00 00 00 
04200     00 00 00 00 
04204     00 00 00 00 
04208     00 00 00    | vga_font       file "vgafont.def"
0420b     7E 81 A5 81 
0420f     81 BD 99 81 
04213     81 7E 00 00 
04217     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
0421b     7E FF DB FF 
0421f     FF C3 E7 FF 
04223     FF 7E 00 00 
04227     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
0422b     00 36 7F 7F 
0422f     7F 7F 3E 1C 
04233     08 00 00 00 
04237     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
0423b     00 08 1C 3E 
0423f     7F 3E 1C 08 
04243     00 00 00 00 
04247     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
0424b     18 3C 3C E7 
0424f     E7 E7 18 18 
04253     3C 00 00 00 
04257     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0425b     18 3C 7E FF 
0425f     FF 7E 18 18 
04263     3C 00 00 00 
04267     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0426b     00 00 00 18 
0426f     3C 3C 18 00 
04273     00 00 00 00 
04277     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
0427b     FF FF FF E7 
0427f     C3 C3 E7 FF 
04283     FF FF FF FF 
04287     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
0428b     00 00 3C 66 
0428f     42 42 66 3C 
04293     00 00 00 00 
04297     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
0429b     FF FF C3 99 
0429f     BD BD 99 C3 
042a3     FF FF FF FF 
042a7     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
042ab     78 70 58 4C 
042af     1E 33 33 33 
042b3     33 1E 00 00 
042b7     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
042bb     3C 66 66 66 
042bf     66 3C 18 7E 
042c3     18 18 00 00 
042c7     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
042cb     FC CC FC 0C 
042cf     0C 0C 0C 0E 
042d3     0F 07 00 00 
042d7     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
042db     FE C6 FE C6 
042df     C6 C6 C6 E6 
042e3     E7 67 03 00 
042e7     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
042eb     18 18 DB 3C 
042ef     E7 3C DB 18 
042f3     18 00 00 00 
042f7     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
042fb     03 07 0F 1F 
042ff     7F 1F 0F 07 
04303     03 01 00 00 
04307     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
0430b     60 70 78 7C 
0430f     7F 7C 78 70 
04313     60 40 00 00 
04317     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
0431b     18 3C 7E 18 
0431f     18 18 7E 3C 
04323     18 00 00 00 
04327     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
0432b     66 66 66 66 
0432f     66 66 66    | 	byte	$66[7]
04332     00 66 66 00 
04336     00 00 00 00 
0433a     00 FE DB DB 
0433e     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
04342     D8 D8 D8 00 
04346     00 00 00 3E 
0434a     63 06 1C 36 
0434e     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
04352     30 63 3E 00 
04356     00 00 00 00 
0435a     00 00 00 00 
0435e     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
04362     7F 7F 7F 00 
04366     00 00 00 00 
0436a     00 18 3C 7E 
0436e     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
04372     3C 18 7E 00 
04376     00 00 00 00 
0437a     00 18 3C 7E 
0437e     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
04382     18 18 18 00 
04386     00 00 00 00 
0438a     00 18 18 18 
0438e     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04392     7E 3C 18 00 
04396     00 00 00 00 
0439a     00 00 00 18 
0439e     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
043a2     00 00 00 00 
043a6     00 00 00 00 
043aa     00 00 00    | 	byte	$00[11]
043ad     0C 06 7F 06 
043b1     0C 00 00 00 
043b5     00 00 00 00 
043b9     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
043bd     00 03 03 03 
043c1     7F 00 00 00 
043c5     00 00 00 00 
043c9     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
043cd     14 36 7F 36 
043d1     14 00 00 00 
043d5     00 00 00 00 
043d9     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
043dd     1C 1C 3E 3E 
043e1     7F 7F 00 00 
043e5     00 00 00 00 
043e9     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
043ed     7F 3E 3E 1C 
043f1     1C 08 00 00 
043f5     00 00 00 00 
043f9     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
043fd     00 00 00 00 
04401     00 00 00 00 
04405     00 00 00 00 
04409     00 00       | 	byte	$00[14]
0440b     18 3C 3C 3C 
0440f     18 18 18 00 
04413     18 18 00 00 
04417     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
0441b     66 24 00 00 
0441f     00 00 00 00 
04423     00 00 00 00 
04427     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0442b     00 36 36 7F 
0442f     36 36 36 7F 
04433     36 36 00 00 
04437     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
0443b     3E 63 43 03 
0443f     3E 60 60 61 
04443     63 3E 18 18 
04447     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
0444b     00 00 43 63 
0444f     30 18 0C 06 
04453     63 61 00 00 
04457     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
0445b     1C 36 36 1C 
0445f     6E 3B 33 33 
04463     33 6E 00 00 
04467     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
0446b     0C 0C 0C 06 
0446f     00 00 00 00 
04473     00 00 00 00 
04477     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0447b     30 18 0C 0C 
0447f     0C 0C 0C 0C 
04483     18 30 00 00 
04487     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
0448b     0C 18 30 30 
0448f     30 30 30 30 
04493     18 0C 00 00 
04497     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
0449b     00 00 00 66 
0449f     3C FF 3C 66 
044a3     00 00 00 00 
044a7     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
044ab     00 00 00 18 
044af     18 7E 18 18 
044b3     00 00 00 00 
044b7     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
044bb     00 00 00 00 
044bf     00 00 00 00 | 	byte	$00[8]
044c3     18 18 18 0C 
044c7     00 00 00 00 
044cb     00 00 00 00 
044cf     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
044d3     00 00 00 00 
044d7     00 00 00 00 
044db     00 00 00 00 
044df     00 00 00 00 | 	byte	$00[16]
044e3     18 18 00 00 
044e7     00 00 00 00 
044eb     00 00 40 60 
044ef     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
044f3     03 01 00 00 
044f7     00 00 00 00 
044fb     1C 36 63 63 
044ff     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
04503     36 1C 00 00 
04507     00 00 00 00 
0450b     18 1C 1E 18 
0450f     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
04513     18 7E 00 00 
04517     00 00 00 00 
0451b     3E 63 60 30 
0451f     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
04523     63 7F 00 00 
04527     00 00 00 00 
0452b     3E 63 60 60 
0452f     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
04533     63 3E 00 00 
04537     00 00 00 00 
0453b     30 38 3C 36 
0453f     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
04543     30 78 00 00 
04547     00 00 00 00 
0454b     7F 03 03 03 
0454f     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
04553     63 3E 00 00 
04557     00 00 00 00 
0455b     1C 06 03 03 
0455f     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
04563     63 3E 00 00 
04567     00 00 00 00 
0456b     7F 63 60 60 
0456f     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
04573     0C 0C 00 00 
04577     00 00 00 00 
0457b     3E 63 63 63 
0457f     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
04583     63 3E 00 00 
04587     00 00 00 00 
0458b     3E 63 63 63 
0458f     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
04593     30 1E 00 00 
04597     00 00 00 00 
0459b     00 00 00 18 
0459f     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
045a3     18 18 00 00 
045a7     00 00 00 00 
045ab     00 00 00 18 
045af     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
045b3     18 18 0C 00 
045b7     00 00 00 00 
045bb     00 60 30 18 
045bf     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
045c3     30 60 00 00 
045c7     00 00 00 00 
045cb     00 00 00 7E 
045cf     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
045d3     00 00 00 00 
045d7     00 00 00 00 
045db     00          | 	byte	$00[9]
045dc     06 0C 18 30 
045e0     60 30 18 0C 
045e4     06 00 00 00 
045e8     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
045ec     63 63 30 18 
045f0     18 18 00 18 
045f4     18 00 00 00 
045f8     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
045fc     3E 63 63 7B 
04600     7B 7B 3B 03 
04604     3E 00 00 00 
04608     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
0460c     1C 36 63 63 
04610     7F 63 63 63 
04614     63 00 00 00 
04618     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
0461c     66 66 66 3E 
04620     66 66 66 66 
04624     3F 00 00 00 
04628     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
0462c     66 43 03 03 
04630     03 03 43 66 
04634     3C 00 00 00 
04638     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
0463c     36 66 66 66 
04640     66 66 66 36 
04644     1F 00 00 00 
04648     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
0464c     66 46 16 1E 
04650     16 06 46 66 
04654     7F 00 00 00 
04658     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
0465c     66 46 16 1E 
04660     16 06 06 06 
04664     0F 00 00 00 
04668     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
0466c     66 43 03 03 
04670     7B 63 63 66 
04674     5C 00 00 00 
04678     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
0467c     63 63 63 7F 
04680     63 63 63 63 
04684     63 00 00 00 
04688     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
0468c     18 18 18 18 
04690     18 18 18 18 | 	byte	$18[8]
04694     3C 00 00 00 
04698     00 00 00 78 
0469c     30 30 30 30 
046a0     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
046a4     1E 00 00 00 
046a8     00 00 00 67 
046ac     66 66 36 1E 
046b0     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
046b4     67 00 00 00 
046b8     00 00 00 0F 
046bc     06 06 06 06 
046c0     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
046c4     7F 00 00 00 
046c8     00 00 00 63 
046cc     77 7F 7F 6B 
046d0     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
046d4     63 00 00 00 
046d8     00 00 00 63 
046dc     67 6F 7F 7B 
046e0     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
046e4     63 00 00 00 
046e8     00 00 00 3E 
046ec     63 63 63 63 
046f0     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
046f4     3E 00 00 00 
046f8     00 00 00 3F 
046fc     66 66 66 3E 
04700     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
04704     0F 00 00 00 
04708     00 00 00 3E 
0470c     63 63 63 63 
04710     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
04714     3E 30 70 00 
04718     00 00 00 3F 
0471c     66 66 66 3E 
04720     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
04724     67 00 00 00 
04728     00 00 00 3E 
0472c     63 63 06 1C 
04730     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
04734     3E 00 00 00 
04738     00 00 00 7E 
0473c     7E 5A 18 18 
04740     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
04744     3C 00 00 00 
04748     00 00 00 63 
0474c     63 63 63 63 
04750     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
04754     3E 00 00 00 
04758     00 00 00 63 
0475c     63 63 63 63 
04760     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
04764     08 00 00 00 
04768     00 00 00 63 
0476c     63 63 63 6B 
04770     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
04774     36 00 00 00 
04778     00 00 00 63 
0477c     63 36 3E 1C 
04780     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
04784     63 00 00 00 
04788     00 00 00 66 
0478c     66 66 66 3C 
04790     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
04794     3C 00 00 00 
04798     00 00 00 7F 
0479c     63 61 30 18 
047a0     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
047a4     7F 00 00 00 
047a8     00 00 00 3C 
047ac     0C 0C 0C 0C 
047b0     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
047b4     3C 00 00 00 
047b8     00 00 00 00 
047bc     01 03 07 0E 
047c0     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
047c4     40 00 00 00 
047c8     00 00 00 3C 
047cc     30 30 30 30 
047d0     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
047d4     3C 00 00 00 
047d8     1C 36 00 00 
047dc     00 00 00 00 
047e0     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
047e4     00 00 00 00 
047e8     00 00 00 00 
047ec     00 00 00 00 
047f0     00 00 00 00 
047f4     00          | 	byte	$00[17]
047f5     FF 00 00 0C 
047f9     18 00 00 00 
047fd     00 00 00 00 
04801     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04805     00 00 00 00 
04809     00 00 00 00 
0480d     00          | 	byte	$00[9]
0480e     1E 30 3E 33 
04812     33 33 6E 00 
04816     00 00 00 00 
0481a     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
0481e     1E 36 66 66 
04822     66 66 3E 00 
04826     00 00 00 00 
0482a     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0482e     3E 63 03 03 
04832     03 63 3E 00 
04836     00 00 00 00 
0483a     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
0483e     3C 36 33 33 
04842     33 33 6E 00 
04846     00 00 00 00 
0484a     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0484e     3E 63 7F 03 
04852     03 63 3E 00 
04856     00 00 00 00 
0485a     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
0485e     0C 1E 0C 0C 
04862     0C 0C 1E 00 
04866     00 00 00 00 
0486a     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0486e     6E 33 33 33 
04872     33 33 3E 30 
04876     33 1E 00 00 
0487a     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
0487e     36 6E 66 66 
04882     66 66 67 00 
04886     00 00 00 00 
0488a     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
0488e     1C 18 18 18 
04892     18 18 3C 00 
04896     00 00 00 00 
0489a     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
0489e     70 60 60 60 
048a2     60 60 60 66 
048a6     66 3C 00 00 
048aa     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
048ae     66 36 1E 1E 
048b2     36 66 67 00 
048b6     00 00 00 00 
048ba     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
048be     18 18 18 18 
048c2     18 18       | 	byte	$18[6]
048c4     3C 00 00 00 
048c8     00 00 00 00 
048cc     00 00 37 7F 
048d0     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
048d4     63 00 00 00 
048d8     00 00 00 00 
048dc     00 00 3B 66 
048e0     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
048e4     66 00 00 00 
048e8     00 00 00 00 
048ec     00 00 3E 63 
048f0     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
048f4     3E 00 00 00 
048f8     00 00 00 00 
048fc     00 00 3B 66 
04900     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
04904     3E 06 06 0F 
04908     00 00 00 00 
0490c     00 00 6E 33 
04910     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
04914     3E 30 30 78 
04918     00 00 00 00 
0491c     00 00 3B 6E 
04920     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
04924     0F 00 00 00 
04928     00 00 00 00 
0492c     00 00 3E 63 
04930     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
04934     3E 00 00 00 
04938     00 00 00 08 
0493c     0C 0C 3F 0C 
04940     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
04944     38 00 00 00 
04948     00 00 00 00 
0494c     00 00 33 33 
04950     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
04954     6E 00 00 00 
04958     00 00 00 00 
0495c     00 00 63 63 
04960     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
04964     1C 00 00 00 
04968     00 00 00 00 
0496c     00 00 63 63 
04970     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
04974     36 00 00 00 
04978     00 00 00 00 
0497c     00 00 63 36 
04980     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
04984     63 00 00 00 
04988     00 00 00 00 
0498c     00 00 63 63 
04990     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
04994     7E 60 30 1F 
04998     00 00 00 00 
0499c     00 00 7F 33 
049a0     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
049a4     7F 00 00 00 
049a8     00 00 00 70 
049ac     18 18 18 0E 
049b0     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
049b4     70 00 00 00 
049b8     00 00 00 18 
049bc     18 18 18 18 
049c0     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
049c4     18 00 00 00 
049c8     00 00 00 0E 
049cc     18 18 18 70 
049d0     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
049d4     0E 00 00 00 
049d8     6E 3B 00 00 
049dc     00 00 00 00 
049e0     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
049e4     00 00 00 00 
049e8     00 00 00 00 
049ec     00 00       | 	byte	$00[10]
049ee     08 1C 36 63 
049f2     63 63 7F 00 
049f6     00 00 00 00 
049fa     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
049fe     03 03 03 03 
04a02     43 66 3C 18 
04a06     30 1E 00 00 
04a0a     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
04a0e     33 33 33 33 
04a12     33 33       | 	byte	$33[6]
04a14     6E 00 00 00 
04a18     00 00 60 30 
04a1c     18 00 3E 63 
04a20     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
04a24     3E 00 00 00 
04a28     00 00 08 1C 
04a2c     36 00 1E 30 
04a30     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
04a34     6E 00 00 00 
04a38     00 00 00 00 
04a3c     33 00 1E 30 
04a40     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
04a44     6E 00 00 00 
04a48     00 00 1C 36 
04a4c     1C 00 33 33 
04a50     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
04a54     6E 00 00 00 
04a58     00 00 60 30 
04a5c     18 00 3E 63 
04a60     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
04a64     3E 00 00 00 
04a68     00 00 00 00 
04a6c     00 00 3E 63 
04a70     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
04a74     3E 18 30 1E 
04a78     00 00 00 1C 
04a7c     58 78 38 18 
04a80     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
04a84     3C 00 00 00 
04a88     00 00 00 00 
04a8c     63 00 3E 63 
04a90     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
04a94     3E 00 00 00 
04a98     66 33 00 3E 
04a9c     63 63 63 63 
04aa0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
04aa4     3E 00 00 00 
04aa8     00 00 CC 66 
04aac     33 00 3E 63 
04ab0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
04ab4     3E 00 00 00 
04ab8     00 00 18 3C 
04abc     66 00 1C 18 
04ac0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
04ac4     3C 00 00 00 
04ac8     30 18 00 7F 
04acc     63 61 30 18 
04ad0     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
04ad4     7F 00 00 00 
04ad8     00 63 00 08 
04adc     1C 36 63 63 
04ae0     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
04ae4     63 00 00 00 
04ae8     30 18 00 3C 
04aec     66 43 03 03 
04af0     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
04af4     3C 00 00 00 
04af8     30 18 00 7F 
04afc     66 46 16 1E 
04b00     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
04b04     7F 00 00 00 
04b08     0C 06 00 0F 
04b0c     06 06 06 06 
04b10     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
04b14     7F 00 00 00 
04b18     30 18 00 1C 
04b1c     18 18 18 18 
04b20     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
04b24     3C 00 00 00 
04b28     00 00 08 1C 
04b2c     36 00 3E 63 
04b30     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
04b34     3E 00 00 00 
04b38     00 00 00 00 
04b3c     63 00 3E 63 
04b40     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
04b44     3E 00 00 00 
04b48     00 00 00 6F 
04b4c     46 26 06 06 
04b50     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
04b54     7F 00 00 00 
04b58     00 00 00 6E 
04b5c     4C 2C 0C 0C 
04b60     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
04b64     1E 00 00 00 
04b68     30 18 00 3E 
04b6c     63 63 06 1C 
04b70     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
04b74     3E 00 00 00 
04b78     00 00 60 30 
04b7c     18 00 3E 63 
04b80     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
04b84     3E 00 00 00 
04b88     00 63 00 3E 
04b8c     63 63 63 63 
04b90     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
04b94     3E 00 00 00 
04b98     00 63 00 63 
04b9c     63 63 63 63 
04ba0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
04ba4     3E 00 00 00 
04ba8     6C 38 00 7E 
04bac     7E 5A 18 18 
04bb0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
04bb4     3C 00 00 00 
04bb8     00 00 60 48 
04bbc     2C 0C 3F 0C 
04bc0     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
04bc4     38 00 00 00 
04bc8     00 00 00 0F 
04bcc     26 36 1E 0E 
04bd0     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
04bd4     7F 00 00 00 
04bd8     00 00 00 00 
04bdc     00 63 36 1C 
04be0     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
04be4     00 00 00 00 
04be8     00 00       | 	byte	$00[6]
04bea     36 1C 08 00 
04bee     3E 63 03 03 
04bf2     03 63 3E 00 
04bf6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
04bfa     30 18 0C 00 
04bfe     1E 30 3E 33 
04c02     33 33 6E 00 
04c06     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
04c0a     60 30 18 00 
04c0e     1C 18 18 18 
04c12     18 18 3C 00 
04c16     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
04c1a     60 30 18 00 
04c1e     3E 63 63 63 
04c22     63 63 3E 00 
04c26     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
04c2a     30 18 0C 00 
04c2e     33 33 33 33 
04c32     33 33 6E 00 
04c36     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
04c3a     00 08 1C 36 
04c3e     63 63 7F 63 
04c42     63 63 63 18 
04c46     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
04c4a     00 00 00 00 
04c4e     1E 30 3E 33 
04c52     33 33 6E 18 
04c56     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
04c5a     00 7F 63 61 
04c5e     30 18 0C 06 
04c62     43 63 7F 00 
04c66     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
04c6a     36 1C 08 00 
04c6e     7F 33 18 0C 
04c72     06 63 7F 00 
04c76     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
04c7a     00 7F 66 46 
04c7e     16 1E 16 06 
04c82     46 66 7F 18 
04c86     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
04c8a     00 00 00 00 
04c8e     3E 63 7F 03 
04c92     03 63 3E 18 
04c96     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
04c9a     00 3C 66 03 
04c9e     1F 03 0F 03 
04ca2     03 66 3C 00 
04ca6     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
04caa     60 30 18 00 
04cae     7F 33 18 0C 
04cb2     06 63 7F 00 
04cb6     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
04cba     00 3C 66 43 
04cbe     03 03 03 03 
04cc2     43 66 3C 00 
04cc6     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
04cca     00 00 00 00 
04cce     3E 63 06 1C 
04cd2     30 63 3E 18 
04cd6     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
04cda     00 00 00 00 
04cde     00 00       | 	byte	$00[6]
04ce0     6C 36 1B 36 
04ce4     6C 00 00 00 
04ce8     00 00 00 00 
04cec     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04cf0     1B 36 6C 36 
04cf4     1B 00 00 00 
04cf8     88 22 88 22 
04cfc     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
04d00     88 22 88 22 
04d04     88 22 88 22 
04d08     AA 55 AA 55 
04d0c     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
04d10     AA 55 AA 55 
04d14     AA 55 AA 55 
04d18     BB EE BB EE 
04d1c     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
04d20     BB EE BB EE 
04d24     BB EE BB EE 
04d28     18 18 18 18 
04d2c     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
04d30     18 18 18 18 
04d34     18 18 18 18 
04d38     18 18 18 18 
04d3c     18 18 18    | 	byte	$18[15]
04d3f     1F 18 18 18 
04d43     18 18 18 18 
04d47     18 30 18 00 
04d4b     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
04d4f     63 7F 63 63 
04d53     63 63 00 00 
04d57     00 1C 36 00 
04d5b     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
04d5f     63 7F 63 63 
04d63     63 63 00 00 
04d67     00 36 1C 00 
04d6b     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
04d6f     1E 16 06 46 
04d73     66 7F 00 00 
04d77     00 00 00 00 
04d7b     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
04d7f     1C 30 60 63 
04d83     63 3E 18 30 
04d87     1E 6C 6C 6C 
04d8b     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
04d8f     6F 6C 6C 6C 
04d93     6C 6C 6C 6C 
04d97     6C 6C 6C 6C 
04d9b     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04d9f     6C 6C 6C 6C 
04da3     6C 6C 6C 6C 
04da7     6C          | 	byte	$6c[9]
04da8     00 00 00 00 
04dac     00          | 	byte	$00[5]
04dad     7F 60 6F 6C 
04db1     6C 6C 6C 6C 
04db5     6C 6C 6C 6C 
04db9     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04dbd     6F 60 7F 00 
04dc1     00 00 00 00 
04dc5     00 00 00 18 
04dc9     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
04dcd     61 30 18 0C 
04dd1     06 43 63 7F 
04dd5     00 00 00 00 
04dd9     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
04ddd     00 7F 33 18 
04de1     0C 06 63 7F 
04de5     00 00 00 00 
04de9     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
04ded     00 00 1F 18 
04df1     18 18 18 18 
04df5     18 18 18 18 
04df9     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04dfd     18 18 F8 00 
04e01     00 00 00 00 
04e05     00 00 00 18 
04e09     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
04e0d     18 18 FF 00 
04e11     00 00 00 00 
04e15     00 00 00 00 
04e19     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04e1d     00 00 FF 18 
04e21     18 18 18 18 
04e25     18 18 18 18 
04e29     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04e2d     18 18 F8 18 
04e31     18 18 18 18 
04e35     18 18 18 00 
04e39     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
04e3d     00 00 FF 00 
04e41     00 00 00 00 
04e45     00 00 00 18 
04e49     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
04e4d     18 18 FF 18 
04e51     18 18 18 18 
04e55     18 18 18 63 
04e59     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
04e5d     36 63 63 7F 
04e61     63 63 63 63 
04e65     00 00 00 00 
04e69     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
04e6d     00 1E 30 3E 
04e71     33 33 33 6E 
04e75     00 00 00 6C 
04e79     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
04e7d     EC 0C FC 00 
04e81     00 00 00 00 
04e85     00 00 00 00 
04e89     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04e8d     FC 0C EC 6C 
04e91     6C 6C 6C 6C 
04e95     6C 6C 6C 6C 
04e99     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04e9d     EF 00 FF 00 
04ea1     00 00 00 00 
04ea5     00 00 00 00 
04ea9     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04ead     FF 00 EF 6C 
04eb1     6C 6C 6C 6C 
04eb5     6C 6C 6C 6C 
04eb9     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04ebd     EC 0C EC 6C 
04ec1     6C 6C 6C 6C 
04ec5     6C 6C 6C 00 
04ec9     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04ecd     FF 00 FF 00 
04ed1     00 00 00 00 
04ed5     00 00 00 6C 
04ed9     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
04edd     EF 00 EF 6C 
04ee1     6C 6C 6C 6C 
04ee5     6C 6C 6C 00 
04ee9     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04eed     63 3E 63 63 
04ef1     63 63 3E 63 
04ef5     00 00 00 00 
04ef9     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
04efd     30 3C 36 33 
04f01     33 33 33 6E 
04f05     00 00 00 00 
04f09     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
04f0d     66 66 6F 66 
04f11     66 66 36 1F 
04f15     00 00 00 36 
04f19     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
04f1d     66 66 66 66 
04f21     66 66       | 	byte	$66[6]
04f23     36 1F 00 00 
04f27     00 00 63 00 
04f2b     7F 66 46 16 
04f2f     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
04f33     66 7F 00 00 
04f37     00 6C 38 00 
04f3b     38 30 30 3C 
04f3f     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
04f43     33 6E 00 00 
04f47     00 36 1C 00 
04f4b     63 67 6F 7F 
04f4f     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
04f53     63 63 00 00 
04f57     00 30 18 00 
04f5b     3C 18 18 18 
04f5f     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
04f63     18 3C 00 00 
04f67     00 3C 66 00 
04f6b     3C 18 18 18 
04f6f     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
04f73     18 3C 00 00 
04f77     00 00 00 36 
04f7b     1C 08 00 3E 
04f7f     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
04f83     63 3E 00 00 
04f87     00 18 18 18 
04f8b     18 18 18 18 
04f8f     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
04f93     00 00 00 00 
04f97     00 00 00 00 
04f9b     00 00 00 00 | 	byte	$00[12]
04f9f     F8 18 18 18 
04fa3     18 18 18 18 
04fa7     18 FF FF FF 
04fab     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
04faf     FF FF FF FF 
04fb3     FF FF FF FF 
04fb7     FF          | 	byte	$ff[9]
04fb8     00 00 00 00 
04fbc     00 00 00    | 	byte	$00[7]
04fbf     FF FF FF FF 
04fc3     FF FF FF FF 
04fc7     FF          | 	byte	$ff[9]
04fc8     00 00 00 7E 
04fcc     7E 5A 18 18 
04fd0     18 18 18 18 
04fd4     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
04fd8     1C 36 1C 63 
04fdc     63 63 63 63 
04fe0     63 63 63 63 
04fe4     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04fe8     FF FF FF FF 
04fec     FF FF FF    | 	byte	$ff[7]
04fef     00 00 00 00 
04ff3     00 00 00 00 
04ff7     00          | 	byte	$00[9]
04ff8     30 18 00 3E 
04ffc     63 63 63 63 
05000     63 63 63 63 
05004     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
05008     00 00 00 1E 
0500c     33 33 33 1B 
05010     33 63 63 63 
05014     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
05018     1C 36 00 3E 
0501c     63 63 63 63 
05020     63 63 63 63 
05024     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
05028     30 18 00 63 
0502c     67 6F 7F 7B 
05030     73 63 63 63 
05034     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
05038     00 00 60 30 
0503c     18 00 3B 66 
05040     66 66 66 66 
05044     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
05048     00 00 36 1C 
0504c     08 00 3B 66 
05050     66 66 66 66 
05054     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
05058     36 1C 00 3E 
0505c     63 63 06 1C 
05060     30 60 63 63 
05064     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
05068     00 00 36 1C 
0506c     08 00 3E 63 
05070     06 1C 30 63 
05074     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
05078     30 18 00 3F 
0507c     66 66 66 3E 
05080     36 66 66 66 
05084     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
05088     30 18 00 63 
0508c     63 63 63 63 
05090     63 63 63 63 
05094     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
05098     00 00 60 30 
0509c     18 00 3B 6E 
050a0     66 06 06 06 
050a4     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
050a8     66 33 00 63 
050ac     63 63 63 63 
050b0     63 63 63 63 
050b4     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
050b8     00 00 60 30 
050bc     18 00 63 63 
050c0     63 63 63 63 
050c4     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
050c8     30 18 00 66 
050cc     66 66 66 3C 
050d0     18 18 18 18 
050d4     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
050d8     00 00 00 08 
050dc     0C 0C 3F 0C 
050e0     0C 0C 0C 6C 
050e4     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
050e8     30 18 00 00 
050ec     00 00 00 00 
050f0     00 00 00 00 
050f4     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
050f8     00 00 00 00 
050fc     00 00 00 00 | 	byte	$00[8]
05100     7F 00 00 00 
05104     00 00 00 00 
05108     66 33 00 00 
0510c     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
05110     00 00 00 00 
05114     00 00 00 00 
05118     00 00 00 00 
0511c     00 00 00 00 
05120     00 00 00 00 
05124     00          | 	byte	$00[21]
05125     0C 06 3C 36 
05129     1C 00 00 00 
0512d     00 00 00 00 
05131     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05135     00 00 00 63 
05139     3E 00 00 00 
0513d     00 00 00 00 
05141     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05145     00 00 00 00 
05149     3E 63 06 1C 
0514d     36 63 63 36 
05151     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
05155     00 00 00 00 
05159     00 00 00 00 | 	byte	$00[8]
0515d     18 00 7E 00 
05161     18 00 00 00 
05165     00 00 00 00 
05169     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0516d     00 00 00 00 
05171     00 00 00 00 | 	byte	$00[8]
05175     18 30 1E 00 
05179     00 00 1C 36 
0517d     36 1C 00 00 
05181     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
05185     00 00 00 00 
05189     63 00 00 00 
0518d     00 00 00 00 
05191     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05195     00 00 00 18 
05199     18 00 00 00 
0519d     00 00 00 00 
051a1     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
051a5     00 00 00 00 
051a9     00          | 	byte	$00[5]
051aa     CC 66 33 00 
051ae     33 33 33 33 
051b2     33 33 6E 00 
051b6     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
051ba     00 3F 66 66 
051be     66 3E 36 66 
051c2     66 66 6F 00 
051c6     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
051ca     36 1C 08 00 
051ce     3B 6E 66 06 
051d2     06 06 0F 00 
051d6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
051da     00 00 00 7E 
051de     7E 7E 7E 7E 
051e2     7E 7E 00 00 
051e6     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
051ea     00 00 00 00 
051ee     00 00 00 00 
051f2     00 00 00 00 
051f6     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
051f8     00 00 00 00 
      ...             
05228     00 00 00 00 
0522c     00 00 00    | st_font        file "st4font.def"
0522f     FF FF 00 00 
05233     00 00 00 00 
05237     00 18 18 18 
0523b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0523f     18 18 18 18 
05243     18 18 18 18 
05247     18          | 	byte	$18[9]
05248     00 00 00 00 
0524c     00 00 00    | 	byte	$00[7]
0524f     FF FF 18 18 
05253     18 18 18 18 
05257     18 18 18 18 
0525b     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0525f     FF FF 00 00 
05263     00 00 00 00 
05267     00 18 18 18 
0526b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0526f     1F 1F 18 18 
05273     18 18 18 18 
05277     18 18 18 18 
0527b     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0527f     F8 F8 18 18 
05283     18 18 18 18 
05287     18 00 00 00 
0528b     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0528f     1F 1F 18 18 
05293     18 18 18 18 
05297     18 00 00 00 
0529b     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0529f     F8 F8 18 18 
052a3     18 18 18 18 
052a7     18 18 18 18 
052ab     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
052af     1F 1F 00 00 
052b3     00 00 00 00 
052b7     00 18 18 18 
052bb     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
052bf     F8 F8 00 00 
052c3     00 00 00 00 
052c7     00 18 18 18 
052cb     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
052cf     FF FF 18 18 
052d3     18 18 18 18 
052d7     18 00 00 18 
052db     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
052df     66 7E 7E 66 
052e3     66 66 66 30 
052e7     18 00 00 7E 
052eb     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
052ef     3E 06 06 06 
052f3     06 7E 7E 18 
052f7     0C 30 18 3C 
052fb     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
052ff     06 06 06 66 
05303     66 7E 3C 00 
05307     00 30 18 66 
0530b     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
0530f     7E 7E 76 76 
05313     66 66 66 00 
05317     00 30 18 7C 
0531b     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
0531f     1C 38 70 60 
05323     60 7E 3E 00 
05327     00 30 18 7E 
0532b     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
0532f     18 0C 0C 06 
05333     06 7E 7E 00 
05337     00 18 18 00 
0533b     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
0533f     18 18 0C 0C 
05343     06 7E 7E 00 
05347     00 30 18 3C 
0534b     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
0534f     66 66 66 66 
05353     66          | 	byte	$66[5]
05354     7E 3C 00 00 
05358     00 00 06 06 
0535c     06 06 16 1E 
05360     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
05364     7E 7E 00 00 
05368     00 00 00 00 
0536c     00 3C 7C 60 
05370     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
05374     7E 7C 30 18 
05378     00 00 00 00 
0537c     00 3C 7E 66 
05380     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
05384     7E 7C 18 0C 
05388     00 00 30 18 
0538c     00 3C 3E 06 
05390     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
05394     7E 7C 00 00 
05398     00 00 30 18 
0539c     00 3E 7E 66 
053a0     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
053a4     66 66 00 00 
053a8     00 00 30 18 
053ac     00 7C 7E 06 
053b0     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
053b4     7E 3E 00 00 
053b8     00 00 30 18 
053bc     00 7E 7E 30 
053c0     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
053c4     7E 7E 00 00 
053c8     00 00 18 18 
053cc     00 7E 7E 30 
053d0     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
053d4     7E 7E 00 00 
053d8     00 00 30 18 
053dc     00 3C 7E 66 
053e0     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
053e4     7E 3C 00 00 
053e8     00 00 1C 1C 
053ec     18 18 38 3C 
053f0     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
053f4     3C 3C 00 00 
053f8     00 00 00 00 
053fc     00 00 00 00 
05400     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05404     00 00 00 00 
05408     00 00       | 	byte	$00[6]
0540a     18 18 18 18 
0540e     18 18 18 18 | 	byte	$18[8]
05412     00 00 18 18 
05416     00 00 00 00 
0541a     66 66 66 66 
0541e     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
05422     00 00 00 00 
05426     00 00 00 00 
0542a     00          | 	byte	$00[9]
0542b     66 66 FF FF 
0542f     66 66 FF FF 
05433     66 66 00 00 
05437     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
0543b     7C 7E 06 06 
0543f     3E 7C 60 60 
05443     7E 3E 18 18 
05447     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
0544b     66 30 30 18 
0544f     18 0C 0C 66 
05453     66 00 00 00 
05457     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
0545b     66 66 3C 1C 
0545f     1C FC FE 66 
05463     66 FE FC 00 
05467     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
0546b     18 18 18 18 
0546f     00 00 00 00 
05473     00 00 00 00 
05477     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
0547b     18 1C 0C 0C 
0547f     0C 0C 0C 0C 
05483     1C 18 30 00 
05487     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
0548b     18 38 30 30 
0548f     30 30 30 30 
05493     38 18 0C 00 
05497     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
0549b     66 66 3C 3C 
0549f     FF FF 3C 3C 
054a3     66 66 00 00 
054a7     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
054ab     00 18 18 18 
054af     7E 7E 18 18 
054b3     18 00 00 00 
054b7     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
054bb     00 00 00 00 
054bf     00 00       | 	byte	$00[6]
054c1     18 18 18 18 
054c5     18          | 	byte	$18[5]
054c6     0C 04 00 00 
054ca     00 00 00 00 
054ce     7E 7E 00 00 
054d2     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
054d6     00 00 00 00 
054da     00 00 00 00 
054de     00 00 00 00 
054e2     00          | 	byte	$00[13]
054e3     18 18 18 00 
054e7     00 00 00 60 
054eb     60 60 30 30 
054ef     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
054f3     06 06 06 00 
054f7     00 00 00 3C 
054fb     7E 66 66 66 
054ff     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
05503     66 7E 3C 00 
05507     00 00 00 18 
0550b     18 1C 1C 18 
0550f     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
05513     18 7E 7E 00 
05517     00 00 00 3C 
0551b     7E 66 66 30 
0551f     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
05523     0C 7E 7E 00 
05527     00 00 00 7E 
0552b     7E 30 30 18 
0552f     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
05533     66 7E 3C 00 
05537     00 00 00 30 
0553b     30 38 38 3C 
0553f     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
05543     7E 30 30 00 
05547     00 00 00 7E 
0554b     7E 06 06 3E 
0554f     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
05553     66 7E 3C 00 
05557     00 00 00 38 
0555b     3C 0E 06 06 
0555f     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
05563     66 7E 3C 00 
05567     00 00 00 7E 
0556b     7E 60 60 30 
0556f     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
05573     0C 0C 0C 00 
05577     00 00 00 3C 
0557b     7E 66 66 3C 
0557f     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
05583     66 7E 3C 00 
05587     00 00 00 3C 
0558b     7E 66 66 7E 
0558f     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
05593     70 3C 1C 00 
05597     00 00 00 00 
0559b     00 00 18 18 
0559f     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
055a3     18 18 18 00 
055a7     00 00 00 00 
055ab     00 00 18 18 
055af     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
055b3     18 18 18 0C 
055b7     04 00 00 00 
055bb     70 38 1C 0E 
055bf     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
055c3     70 00 00 00 
055c7     00 00 00 00 
055cb     00 00 7E 7E 
055cf     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
055d3     00 00 00 00 
055d7     00 00 00 00 | 	byte	$00[8]
055db     0E 1C 38 70 
055df     E0 70 38 1C 
055e3     0E 00 00 00 
055e7     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
055eb     7E 66 66 30 
055ef     30 18 18 18 
055f3     00 18 18 00 
055f7     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
055fb     7E 66 66 66 
055ff     66 36 06 66 
05603     66 7E 3C 00 
05607     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
0560b     3C 7E 66 66 
0560f     66 7E 7E 66 
05613     66 66 66 00 
05617     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
0561b     7E 66 66 7E 
0561f     3E 66 66 66 
05623     66 7E 3E 00 
05627     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
0562b     7E 66 66 06 
0562f     06 06 06 66 
05633     66 7E 3C 00 
05637     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
0563b     7E 66 66 66 
0563f     66 66 66 66 
05643     66 7E 3E 00 
05647     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
0564b     7E 06 06 3E 
0564f     3E 06 06 06 
05653     06 7E 7E 00 
05657     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
0565b     7E 06 06 3E 
0565f     3E 06 06 06 
05663     06 06 06 00 
05667     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
0566b     7E 06 06 76 
0566f     76 66 66 66 
05673     66 7E 3C 00 
05677     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
0567b     66 66 66 7E 
0567f     7E 66 66 66 
05683     66 66 66 00 
05687     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
0568b     7E 18 18 18 
0568f     18 18 18 18 
05693     18 7E 7E 00 
05697     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
0569b     60 60 60 60 
0569f     60 60 60    | 	byte	$60[7]
056a2     66 66 7E 3C 
056a6     00 00 00 00 
056aa     66 66 36 36 
056ae     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
056b2     66 66 C6 C6 
056b6     00 00 00 00 
056ba     06 06 06 06 
056be     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
056c2     06 06 7E 7E 
056c6     00 00 00 00 
056ca     C6 C6 EE EE 
056ce     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
056d2     C6 C6 C6 C6 
056d6     00 00 00 00 
056da     66 66 66 6E 
056de     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
056e2     76 66 66 66 
056e6     00 00 00 00 
056ea     3C 7E 66 66 
056ee     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
056f2     66 66 7E 3C 
056f6     00 00 00 00 
056fa     3E 7E 66 66 
056fe     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
05702     06 06 06 06 
05706     00 00 00 00 
0570a     3C 7E 66 66 
0570e     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
05712     66 56 3E 6C 
05716     00 00 00 00 
0571a     3E 7E 66 66 
0571e     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
05722     66 66 C6 C6 
05726     00 00 00 00 
0572a     7C 7E 06 06 
0572e     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
05732     60 60 7E 3E 
05736     00 00 00 00 
0573a     7E 7E 18 18 
0573e     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
05742     18 18 18 18 
05746     00 00 00 00 
0574a     66 66 66 66 
0574e     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
05752     66 66 7E 3C 
05756     00 00 00 00 
0575a     66 66 66 66 
0575e     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
05762     3C 3C 18 18 
05766     00 00 00 00 
0576a     C6 C6 C6 C6 
0576e     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
05772     FE EE C6 82 
05776     00 00 00 00 
0577a     66 66 66 3C 
0577e     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
05782     3C 66 66 66 
05786     00 00 00 00 
0578a     66 66 66 66 
0578e     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
05792     18 18 18 18 
05796     00 00 00 00 
0579a     7E 7E 30 30 
0579e     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
057a2     06 06 7E 7E 
057a6     00 00 00 00 
057aa     3C 3C 0C 0C 
057ae     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
057b2     0C 0C 3C 3C 
057b6     00 00 00 00 
057ba     06 06 0C 0C 
057be     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
057c2     60 60 C0 C0 
057c6     00 00 00 00 
057ca     3C 3C 30 30 
057ce     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
057d2     30 30 3C 3C 
057d6     00 00 00 00 
057da     18 18 3C 3C 
057de     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
057e2     00 00 00 00 
057e6     00 00 00 00 
057ea     00 00 00 00 
057ee     00 00 00 00 
057f2     00 00       | 	byte	$00[18]
057f4     FE FE 00 00 
057f8     00 00 0C 0C 
057fc     18 18 00 00 
05800     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
05804     00 00 00 00 
05808     00 00 00 00 
0580c     00          | 	byte	$00[9]
0580d     3C 7C 60 7C 
05811     7E 66 66 7E 
05815     7C 00 00 00 
05819     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
0581d     3E 7E 66 66 
05821     66 66 66 7E 
05825     3E 00 00 00 
05829     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
0582d     3C 3E 06 06 
05831     06 06 06 7E 
05835     7C 00 00 00 
05839     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
0583d     7C 7E 66 66 
05841     66 66 66 7E 
05845     7C 00 00 00 
05849     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
0584d     3C 7E 66 66 
05851     7E 06 06 7E 
05855     7C 00 00 00 
05859     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
0585d     18 7E 7E 18 
05861     18 18 18 18 
05865     18 00 00 00 
05869     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0586d     7C 7E 66 66 
05871     66 66 7E 7C 
05875     60 7E 3E 00 
05879     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
0587d     3E 7E 66 66 
05881     66 66 66 66 
05885     66 00 00 00 
05889     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
0588d     1C 1C 18 18 
05891     18 18 18 3C 
05895     3C 00 00 00 
05899     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
0589d     30 30 30 30 
058a1     30 30 30 30 
058a5     30          | 	byte	$30[9]
058a6     3E 1E 00 00 
058aa     06 06 06 36 
058ae     36 1E 1E 1E 
058b2     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
058b6     00 00 00 00 
058ba     1C 1C 18 18 
058be     18 18 18 18 
058c2     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
058c6     00 00 00 00 
058ca     00 00 00    | 	byte	$00[7]
058cd     6C FE FE D6 
058d1     D6 C6 C6 C6 
058d5     C6 00 00 00 
058d9     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
058dd     3E 7E 66 66 
058e1     66 66 66 66 
058e5     66 00 00 00 
058e9     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
058ed     3C 7E 66 66 
058f1     66 66 66 7E 
058f5     3C 00 00 00 
058f9     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
058fd     3E 7E 66 66 
05901     66 66 66 7E 
05905     3E 06 06 00 
05909     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
0590d     7C 7E 66 66 
05911     66 66 66 7E 
05915     7C 60 60 00 
05919     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
0591d     3E 7E 66 06 
05921     06 06 06 06 
05925     06 00 00 00 
05929     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
0592d     7C 7E 06 0E 
05931     3C 70 60 7E 
05935     3E 00 00 00 
05939     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
0593d     7E 7E 18 18 
05941     18 18 18 78 
05945     70 00 00 00 
05949     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
0594d     66 66 66 66 
05951     66 66 66    | 	byte	$66[7]
05954     7E 7C 00 00 
05958     00 00 00 00 
0595c     00 66 66 66 
05960     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
05964     18 18 00 00 
05968     00 00 00 00 
0596c     00 C6 C6 D6 
05970     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
05974     C6 82 00 00 
05978     00 00 00 00 
0597c     00 66 66 3C 
05980     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
05984     66 66 00 00 
05988     00 00 00 00 
0598c     00 66 66 66 
05990     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
05994     7C 60 7E 3E 
05998     00 00 00 00 
0599c     00 7E 7E 30 
059a0     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
059a4     7E 7E 00 00 
059a8     00 00 30 18 
059ac     18 18 18 0C 
059b0     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
059b4     18 30 00 00 
059b8     00 00 18 18 
059bc     18 18 18 18 
059c0     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
059c4     18 18 00 00 
059c8     00 00 0C 18 
059cc     18 18 18 30 
059d0     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
059d4     18 0C 00 00 
059d8     00 00 6C 7E 
059dc     36 00 00 00 
059e0     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
059e4     00 00 00 00 
059e8     00 00 00 00 
059ec     00          | 	byte	$00[9]
059ed     18 18 18 18 
059f1     18 18 00 00 
059f5     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
059f8     00 00 00 00 
059fc     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
05a00     00 00 00 00 
05a04     00 80 80 80 
05a08     00 00 00 FF 
05a0c     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
05a10     00 00 00 00 
05a14     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
05a15     80 00 00 00 
05a19     00 80 00 00 
05a1d     80 80 00 00 
05a21     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
05a25     80 00 80 00 
05a29     00 40 80 00 
05a2d     AA AA AA 00 
05a31     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
05a35     FF 00 00 00 
05a39     00 FF 00 00 
05a3d     FF FF 00 00 
05a41     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
05a45     FF 00 FF 00 
05a49     00 FF FF 00 
05a4d     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
05a50     00 00 00 00 
05a54     00          | ataripalette   file "ataripalettep2.def"
05a55     11 11 11 00 
05a59     22 22 22 00 
05a5d     33 33 33 00 
05a61     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
05a65     55 55 55 00 
05a69     66 66 66 00 
05a6d     77 77 77 00 
05a71     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
05a75     99 99 99 00 
05a79     AA AA AA 00 
05a7d     BB BB BB 00 
05a81     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
05a85     DD DD DD 00 
05a89     EE EE EE 00 
05a8d     FF FF FF 00 
05a91     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
05a95     00 14 40 00 
05a99     00 1E 60 00 
05a9d     00 28 80 00 
05aa1     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
05aa5     00 3C BF 00 
05aa9     00 46 DF 00 
05aad     00 50 FF 00 
05ab1     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
05ab5     39 77 FF 00 
05ab9     55 8A FF 00 
05abd     71 9E FF 00 
05ac1     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
05ac5     AA C5 FF 00 
05ac9     C6 D8 FF 00 
05acd     E3 EC FF 00 
05ad1     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
05ad5     00 00 40 00 
05ad9     00 00 60 00 
05add     00 00 80 00 
05ae1     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
05ae5     00 00 BF 00 
05ae9     00 00 DF 00 
05aed     00 00 FF 00 
05af1     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
05af5     39 39 FF 00 
05af9     55 55 FF 00 
05afd     71 71 FF 00 
05b01     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
05b05     AA AA FF 00 
05b09     C6 C6 FF 00 
05b0d     E3 E3 FF 00 
05b11     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
05b15     20 00 40 00 
05b19     30 00 60 00 
05b1d     40 00 80 00 
05b21     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
05b25     60 00 BF 00 
05b29     70 00 DF 00 
05b2d     80 00 FF 00 
05b31     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
05b35     9C 39 FF 00 
05b39     AA 55 FF 00 
05b3d     B8 71 FF 00 
05b41     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
05b45     D5 AA FF 00 
05b49     E3 C6 FF 00 
05b4d     F1 E3 FF 00 
05b51     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
05b55     40 00 40 00 
05b59     60 00 60 00 
05b5d     80 00 80 00 
05b61     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
05b65     BF 00 BF 00 
05b69     DF 00 DF 00 
05b6d     FF 00 FF 00 
05b71     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
05b75     FF 39 FF 00 
05b79     FF 55 FF 00 
05b7d     FF 71 FF 00 
05b81     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
05b85     FF AA FF 00 
05b89     FF C6 FF 00 
05b8d     FF E3 FF 00 
05b91     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
05b95     40 00 20 00 
05b99     60 00 30 00 
05b9d     80 00 40 00 
05ba1     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
05ba5     BF 00 60 00 
05ba9     DF 00 70 00 
05bad     FF 00 80 00 
05bb1     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
05bb5     FF 39 9C 00 
05bb9     FF 55 AA 00 
05bbd     FF 71 B8 00 
05bc1     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
05bc5     FF AA D5 00 
05bc9     FF C6 E3 00 
05bcd     FF E3 F1 00 
05bd1     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
05bd5     40 00 00 00 
05bd9     60 00 00 00 
05bdd     80 00 00 00 
05be1     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
05be5     BF 00 00 00 
05be9     DF 00 00 00 
05bed     FF 00 00 00 
05bf1     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
05bf5     FF 39 39 00 
05bf9     FF 55 55 00 
05bfd     FF 71 71 00 
05c01     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
05c05     FF AA AA 00 
05c09     FF C6 C6 00 
05c0d     FF E3 E3 00 
05c11     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
05c15     40 10 00 00 
05c19     60 18 00 00 
05c1d     80 20 00 00 
05c21     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
05c25     BF 30 00 00 
05c29     DF 38 00 00 
05c2d     FF 40 00 00 
05c31     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
05c35     FF 6A 39 00 
05c39     FF 80 55 00 
05c3d     FF 95 71 00 
05c41     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
05c45     FF BF AA 00 
05c49     FF D5 C6 00 
05c4d     FF EA E3 00 
05c51     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
05c55     40 20 00 00 
05c59     60 30 00 00 
05c5d     80 40 00 00 
05c61     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
05c65     BF 60 00 00 
05c69     DF 70 00 00 
05c6d     FF 80 00 00 
05c71     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
05c75     FF 9C 39 00 
05c79     FF AA 55 00 
05c7d     FF B8 71 00 
05c81     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
05c85     FF D5 AA 00 
05c89     FF E3 C6 00 
05c8d     FF F1 E3 00 
05c91     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
05c95     40 30 00 00 
05c99     60 48 00 00 
05c9d     80 60 00 00 
05ca1     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
05ca5     BF 90 00 00 
05ca9     DF A8 00 00 
05cad     FF C0 00 00 
05cb1     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
05cb5     FF CE 39 00 
05cb9     FF D5 55 00 
05cbd     FF DC 71 00 
05cc1     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
05cc5     FF EA AA 00 
05cc9     FF F1 C6 00 
05ccd     FF F8 E3 00 
05cd1     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
05cd5     30 40 00 00 
05cd9     48 60 00 00 
05cdd     60 80 00 00 
05ce1     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
05ce5     90 BF 00 00 
05ce9     A8 DF 00 00 
05ced     C0 FF 00 00 
05cf1     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
05cf5     CE FF 39 00 
05cf9     D5 FF 55 00 
05cfd     DC FF 71 00 
05d01     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
05d05     EA FF AA 00 
05d09     F1 FF C6 00 
05d0d     F8 FF E3 00 
05d11     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
05d15     00 40 00 00 
05d19     00 60 00 00 
05d1d     00 80 00 00 
05d21     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
05d25     00 BF 00 00 
05d29     00 DF 00 00 
05d2d     00 FF 00 00 
05d31     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
05d35     39 FF 39 00 
05d39     55 FF 55 00 
05d3d     71 FF 71 00 
05d41     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
05d45     AA FF AA 00 
05d49     C6 FF C6 00 
05d4d     E3 FF E3 00 
05d51     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
05d55     00 40 14 00 
05d59     00 60 1E 00 
05d5d     00 80 28 00 
05d61     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
05d65     00 BF 3C 00 
05d69     00 DF 46 00 
05d6d     00 FF 50 00 
05d71     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
05d75     39 FF 77 00 
05d79     55 FF 8A 00 
05d7d     71 FF 9E 00 
05d81     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
05d85     AA FF C5 00 
05d89     C6 FF D8 00 
05d8d     E3 FF EC 00 
05d91     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
05d95     00 40 28 00 
05d99     00 60 3C 00 
05d9d     00 80 50 00 
05da1     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
05da5     00 BF 78 00 
05da9     00 DF 8C 00 
05dad     00 FF A0 00 
05db1     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
05db5     39 FF B5 00 
05db9     55 FF C0 00 
05dbd     71 FF CA 00 
05dc1     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
05dc5     AA FF DF 00 
05dc9     C6 FF EA 00 
05dcd     E3 FF F4 00 
05dd1     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
05dd5     00 40 40 00 
05dd9     00 60 60 00 
05ddd     00 80 80 00 
05de1     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
05de5     00 BF BF 00 
05de9     00 DF DF 00 
05ded     00 FF FF 00 
05df1     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
05df5     39 FF FF 00 
05df9     55 FF FF 00 
05dfd     71 FF FF 00 
05e01     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
05e05     AA FF FF 00 
05e09     C6 FF FF 00 
05e0d     E3 FF FF 00 
05e11     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
05e15     00 28 40 00 
05e19     00 3C 60 00 
05e1d     00 50 80 00 
05e21     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
05e25     00 78 BF 00 
05e29     00 8C DF 00 
05e2d     00 A0 FF 00 
05e31     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
05e35     39 B5 FF 00 
05e39     55 C0 FF 00 
05e3d     71 CA FF 00 
05e41     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
05e45     AA DF FF 00 
05e49     C6 EA FF 00 
05e4d     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
05e50                 | '**********************************************************************************
05e50                 | '
05e50                 | '        Timings and colors definitions
05e50                 | '
05e50                 | '**********************************************************************************
05e50                 | 
05e50                 |    'streamer sets for text mode, to add to timings[0..5]
05e50                 | 
05e50                 | 
05e50                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
05e50     10 00 00 00 
05e54     50 00 00 00 
05e58     14 00 00 00 
05e5c     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
05e60     70 00 00 00 
05e64     08 00 00 00 
05e68     30 00 00 00 
05e6c     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
05e70     10 00 00 00 
05e74     10 00 00 00 
05e78     00 00 00 00 
05e7c     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
05e80     E0 01 00 00 
05e84     F6 32 24 15 
05e88     FB 6C C3 01 
05e8c     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
05e90                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
05e90     12 00 00 00 
05e94     30 00 00 00 
05e98     10 00 00 00 
05e9c     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
05ea0     18 00 00 00 
05ea4     08 00 00 00 
05ea8     18 00 00 00 
05eac     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
05eb0     20 00 00 00 
05eb4     18 00 00 00 
05eb8     40 00 00 00 
05ebc     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
05ec0     F0 01 00 00 
05ec4     00 D0 12 13 
05ec8     FB 0F 00 01 
05ecc     20 02 00 00 | 	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
05ed0     10 00 00 00 
05ed4     40 00 00 00 
05ed8     10 00 00 00 
05edc     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
05ee0     08 00 00 00 
05ee4     08 00 00 00 
05ee8     08 00 00 00 
05eec     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
05ef0     40 00 00 00 
05ef4     20 00 00 00 
05ef8     80 00 00 00 
05efc     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
05f00     E0 01 00 00 
05f04     70 AE E9 10 
05f08     FB 8B FF 01 
05f0c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
05f10     10 00 00 00 
05f14     50 00 00 00 
05f18     14 00 00 00 
05f1c     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
05f20     00 00 00 00 
05f24     08 00 00 00 
05f28     00 00 00 00 
05f2c     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
05f30     10 00 00 00 
05f34     10 00 00 00 
05f38     C0 00 00 00 
05f3c     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
05f40     40 02 00 00 
05f44     F6 32 24 15 
05f48     FB 6C C3 01 
05f4c     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
05f50     50 00 00 00 
05f54     A0 00 00 00 
05f58     54 00 00 00 
05f5c     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
05f60     08 00 00 00 
05f64     08 00 00 00 
05f68     08 00 00 00 
05f6c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05f70     0C 00 00 00 
05f74     08 00 00 00 
05f78     00 01 00 00 
05f7c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
05f80     E0 01 00 00 
05f84     10 06 56 15 
05f88     FB 64 C3 01 
05f8c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
05f90     50 00 00 00 
05f94     32 00 00 00 
05f98     50 00 00 00 
05f9c     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
05fa0     08 00 00 00 
05fa4     08 00 00 00 
05fa8     08 00 00 00 
05fac     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05fb0     0C 00 00 00 
05fb4     08 00 00 00 
05fb8     40 01 00 00 
05fbc     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
05fc0     E0 01 00 00 
05fc4     F2 CD 33 13 
05fc8     FB 53 92 01 
05fcc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
05fd0     18 00 00 00 
05fd4     30 00 00 00 
05fd8     18 00 00 00 
05fdc     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
05fe0     08 00 00 00 
05fe4     08 00 00 00 
05fe8     08 00 00 00 
05fec     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05ff0     0C 00 00 00 
05ff4     08 00 00 00 
05ff8     80 01 00 00 
05ffc     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
06000     E0 01 00 00 
06004     F4 8F 11 11 
06008     FB 3A 55 01 
0600c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
06010     20 00 00 00 
06014     40 00 00 00 
06018     22 00 00 00 
0601c     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
06020     00 00 00 00 
06024     08 00 00 00 
06028     00 00 00 00 
0602c     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
06030     0C 00 00 00 
06034     08 00 00 00 
06038     C0 01 00 00 
0603c     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
06040     F0 01 00 00 
06044     F2 CD 33 13 
06048     FB 53 92 01 
0604c     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
06050                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
06050     00 75 C7 97 
06054     27 47 F6 0A 
06058     05 79 CB 9B 
0605c     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
06060                 | 
06060     28 12 64 FD | hdmi            setq    #9
06064     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
06068                 |            '     setq2   #255
06068                 |             '    rdlong  $100, paletteptr 
06068     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
0606c     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
06070     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
06074     78 F9 02 F1 |                 add     ii,hbase
06078     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
0607c     7B 0B 80 FF 
06080     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
06084                 | 
06084     66 66 86 FF 
06088     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
0608c                 | 
0608c                 | 
0608c                 | ''--------  frame rendering main loop  ---------------------------------------------------
0608c                 | 
0608c                 | p101
0608c     28 14 64 FD |                 setq    #10
06090     00 DF 06 FB |                 rdlong  framebuf,  ptra
06094     28 1E 64 FD |                 setq    #15
06098     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
0609c     71 99 02 FB |                 rdlong  border,borderptr
060a0                 | 
060a0     01 C4 06 F1 |                 add     frames,#1
060a4     76 F5 02 F6 |                 mov     dlptr2,dlptr
060a8                 | 
060a8     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
060ac     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
060b0     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
060b4     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
060b8                 |  '' up porch
060b8                 | 
060b8     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
060bc     49 FF 02 F6 |                 mov     hsync1,sync_001
060c0     37 A8 46 FB |                 callpa  i_upporch ,#blank
060c4     72 01 68 FC |                 wrlong  #0,vblankptr
060c8                 |                 
060c8     1F EA 16 F4 |                 testb   paletteptr,#31 wc
060cc     29 FE 65 3D |          if_nc  setq2   #255
060d0     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
060d4                 | 
060d4                 | '' cursor blinking
060d4                 | 
060d4     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
060d8     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
060dc                 | 
060dc                 | '' main screen
060dc                 | 
060dc     00 BE 06 F6 |                 mov linenum,#0
060e0     00 18 07 F6 |                 mov rcnt,#0
060e4     00 1C 07 F6 |                 mov rcnt2a,#0
060e8                 | 
060e8                 | 
060e8     00 18 0F F2 | p301            cmp rcnt,#0 wz
060ec     18 00 90 AD |         if_z    jmp #p306
060f0     01 18 87 F1 |                 sub rcnt,#1
060f4     90 F7 02 F6 |                 mov dl,rdl
060f8     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
060fc     8F F7 02 A1 |    if_z        add dl,roffset  
06100     7B 21 03 F6 |                 mov rdl,dl
06104     04 00 90 FD |                 jmp #p307          
06108                 |           
06108                 |                 
06108     7A F7 02 FB | p306            rdlong  dl,dlptr2
0610c     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
06110     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
06114     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
06118                 | 
06118                 | '' Special entry:
06118                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
06118                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
06118                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
06118                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
06118                 | '' todo: set horizontal scroll (if needed)
06118                 | 
06118     02 FA 66 F0 |                 shl framebuf2,#2
0611c     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
06120     04 22 0F F2 |                 cmp dlc,#%100 wz
06124                 |   
06124                 |                 
06124     04 F4 06 F1 |                 add dlptr2,#4
06128     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
0612c     7A 21 03 FB |                  rdlong rdl,dlptr2
06130     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
06134     04 18 47 F0 |                  shr rcnt,#4
06138                 |              
06138     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
0613c     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
06140                 |                 
06140     04 1E 47 F0 |                  shr roffset,#4
06144     0C 1E 67 F0 |                  shl roffset,#12
06148                 |   
06148     9C FF 9F FD |                  jmp #p301
0614c                 |                  
0614c                 |                  
0614c                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
0614c     0C FA 46 F0 |                 shr     framebuf2,#12
06150     02 FA 66 F0 |                 shl     framebuf2,#2
06154                 | 
06154     7B 03 E3 F8 |                 getbyte t1,dl,#0
06158     00 02 0F F2 |                 cmp     t1,#0 wz
0615c     34 00 90 AD |     if_z        jmp     #borderline
06160                 | 
06160     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
06164     50 00 90 CD |           if_c   jmp     #textline
06168     50 02 90 3D |           if_nc  jmp     #graphline
0616c                 | '
0616c     01 BE 06 F1 | p302            add     linenum,#1
06170     04 F4 06 F1 |                 add     dlptr2,#4
06174     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
06178     6C FF 9F 5D |          if_nz  jmp     #p301
0617c                 | 
0617c     72 03 68 FC | p112            wrlong  #1,vblankptr
06180     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
06184                 | 
06184     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
06188     4B FF 02 F6 |                 mov     hsync1,sync_223
0618c     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
06190     F8 FE 9F FD |                 jmp     #p101
06194                 | 
06194                 | '' ---------------  END of frame rendering loop -------------------------------------------
06194                 | 
06194                 | 
06194     14 00 B0 FD | borderline      call    #hsync                      ' make a border
06198     4C A1 C2 FC |                 xcont   m_vi,border
0619c     CC FF 9F FD |                 jmp     #p302
061a0                 | 
061a0                 | 
061a0     08 00 B0 FD | blank           call    #hsync                          'blank lines
061a4     7E A1 C2 FC |                 xcont   m_vi,hsync0
061a8     FD ED 6F 0B |         _ret_   djnz    pa,#blank
061ac                 | 
061ac     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
061b0     7F 9D B2 FC |                 xzero   m_sn,hsync1
061b4     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
061b8                 | 
061b8                 | 
061b8                 | 
061b8                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
061b8                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
061b8                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
061b8                 | 
061b8                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
061b8                 | 
061b8     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
061bc                 | 
061bc     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
061c0     7B 17 5B F8 |                 getnib  zoom, dl,#3
061c4     03 16 07 F5 |                 and             zoom, #3
061c8                 | 
061c8                 | 
061c8                 | 
061c8     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
061cc     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
061d0     3F BC 06 F5 |                 and     linestart,#63
061d4     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
061d8     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
061dc                 | 
061dc     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
061e0                 | 
061e0                 |                        ' if fontline =0, get a border color
061e0                 | 
061e0     51 03 33 F9 | p102            getword t1,m_border,#0
061e4     00 02 0F F2 |                 cmp     t1, #0 wz
061e8     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
061ec                 | 
061ec     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
061f0     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
061f4     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
061f8     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
061fc     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
06200     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
06204     52 BB 02 F6 |                 mov m_lut2, m_lut1
06208     6A BB 02 F1 |                 add m_lut2, lutt1
0620c     58 0F 03 F6 |                 mov cpl2,i_cpl
06210                 | 
06210     02 16 0F F2 |                cmp zoom,#2 wz
06214     E4 00 90 AD |           if_z jmp #p420
06218     01 16 0F F2 |                cmp zoom,#1 wz
0621c     64 00 90 AD |           if_z jmp #p410
06220     00 16 0F F2 |                 cmp zoom,#0 wz
06224     04 00 90 AD |           if_z jmp #p400
06228     50 01 90 FD |                jmp #p430
0622c                 | 
0622c                 |                    '
0622c                 |  ''---------------------------------------------------------------------------------------------------------
0622c     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
06230     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
06234     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
06238     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
0623c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
06240     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
06244     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
06248     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
0624c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
06250     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
06254                 | 
06254     81 BB C2 FC |                         xcont m_lut2,t1
06258                 | 
06258     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
0625c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
06260     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
06264     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
06268     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
0626c     01 C0 86 F1 |                         sub     lutaddr,#1
06270                 | 
06270     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
06274     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
06278     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
0627c                 | 
0627c     EB 0F 6F FB |                         djnz   cpl2,#p400
06280     28 01 90 FD |  p401                   jmp    #p103
06284                 | 
06284                 | ''------------------------------------------------------------------------------------------------------------
06284                 | 
06284     01 0E 47 F0 |  p410                   shr cpl2,#1
06288                 | 
06288                 | ''---------------------------------------------------------------------------------------------------------
06288     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
0628c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
06290     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
06294     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
06298     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
0629c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
062a0     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
062a4     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
062a8     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
062ac     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
062b0                 | 
062b0                 | 
062b0     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
062b4     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
062b8     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
062bc     03 02 07 FA |                         mul t1,#3
062c0     81 BB C2 FC |                         xcont m_lut2,t1
062c4     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
062c8     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
062cc     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
062d0     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
062d4     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
062d8     01 C0 86 F1 |                         sub     lutaddr,#1
062dc     63 06 63 FD |                         mergew t3
062e0     03 06 07 FA |                         mul t3,#3
062e4     83 BB C2 FC |                         xcont m_lut2,t3
062e8                 | 
062e8     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
062ec     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
062f0                 | 
062f0     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
062f4                 | 
062f4     E4 0F 6F FB |                         djnz   cpl2,#p412
062f8     B0 00 90 FD |  p411                   jmp    #p103
062fc                 | 
062fc                 | ''------------------------------------------------------------------------------------------------------------
062fc                 | 
062fc     02 0E 47 F0 |  p420                   shr cpl2,#2
06300                 | 
06300                 | ''---------------------------------------------------------------------------------------
06300     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
06304     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
06308     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
0630c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
06310     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
06314     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
06318     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
0631c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
06320     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
06324     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
06328                 | 
06328     61 02 63 FD |                         mergeb t1
0632c     81 07 3B F9 |                         getword t3,t1,#1
06330     0F 02 07 FA |                         mul t1,#15
06334     81 BB C2 FC |                         xcont m_lut2,t1
06338                 | 
06338     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
0633c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
06340     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
06344     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
06348     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
0634c     01 C0 86 F1 |                         sub     lutaddr,#1
06350                 | 
06350     81 09 EB F8 |                         getbyte t4,t1,#1        '
06354     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
06358                 | 
06358     0F 06 07 FA |                         mul t3,#15
0635c     83 BB C2 FC |                         xcont m_lut2,t3
06360                 | 
06360     83 0B EB F8 |                         getbyte t5,t3,#1
06364     85 BB C2 FC |                         xcont m_lut2, t5
06368     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
0636c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
06370                 | 
06370     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
06374                 | 
06374     E2 0F 6F FB |                         djnz   cpl2,#p422
06378     30 00 90 FD |  p421                   jmp    #p103
0637c                 | 
0637c                 | '--------------------------------------------------------------------------------------------------------------
0637c                 | 
0637c     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
06380     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
06384     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
06388                 | 
06388     00 BA C6 FC |                         xcont m_lut2,#0
0638c                 | 
0638c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
06390     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
06394     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
06398     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
0639c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
063a0     01 C0 86 F1 |                         sub     lutaddr,#1
063a4                 | 
063a4     F5 0F 6F FB |                         djnz   cpl2,#p430
063a8     00 00 90 FD |  p431                   jmp    #p103
063ac                 | 
063ac                 | ''------------------------------------------------------------------------------------------------------------
063ac                 | 
063ac                 | 
063ac                 | 
063ac     51 25 33 F9 | p103            getword  mb2,m_border,#0
063b0     00 24 0F F2 |                 cmp      mb2, #0 wz
063b4     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
063b8                 | 
063b8     B0 FD 9F FD |                 jmp #p302
063bc                 | 
063bc                 | '' -------------------------------------- END of text line ---------------------------------
063bc                 | 
063bc                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
063bc                 | 
063bc     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
063c0                 | 
063c0                 | 
063c0     51 25 33 F9 | p202            getword mb2,m_border,#0
063c4     00 24 0F F2 |                 cmp     mb2, #0 wz
063c8     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
063cc                 | 
063cc                 | '----------------------------------------- display pixels
063cc                 | 
063cc     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
063d0     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
063d4                 | 
063d4     7B 17 5B F8 |                 getnib  zoom, dl,#3
063d8     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
063dc                 | 
063dc     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
063e0     0C BC 06 F5 |                 and     colordepth,#12
063e4                 | 
063e4     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
063e8     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
063ec     64 00 90 AD |           if_z  jmp     #p240
063f0                 | 
063f0     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
063f4     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
063f8     98 00 90 AD |           if_z  jmp     #p250
063fc                 | 
063fc     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
06400     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
06404     FC 00 90 AD |           if_z  jmp     #p260
06408                 | 
06408     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
0640c                 | 
0640c                 | '' --- 8 bit color modes
0640c                 | 
0640c     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
06410     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
06414                 | 
06414     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
06418     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
0641c                 |        
0641c                 |  '  
0641c     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
06420     25 0C 07 A6 |                 if_z mov skippattern,#%100101
06424                 |     
06424                 |  
06424     05 0C 07 56 |                 if_nz mov skippattern,#%000101
06428     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
0642c                 |         
0642c                 | 
0642c                 |         
0642c     7D 11 03 FB | p235               rdlong  char,framebuf2
06430     32 0C 63 FD |                    skipf skippattern
06434     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
06438     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
0643c     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
06440     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
06444     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
06448     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
0644c     F7 0F 6F FB |                    djnz    cpl2,#p235
06450                 | 
06450     20 01 90 FD |                jmp    #p203
06454                 |                   
06454                 | 
06454                 | 
06454                 | '' --- 1 bit color modes
06454                 | 
06454     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
06458     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
0645c                 | 
0645c     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
06460     13 0C 07 A6 |        if_z   mov skippattern,#%10011
06464     08 0C 07 56 |        if_nz  mov skippattern,#%01000
06468                 | 
06468                 | 
06468     7D 11 E3 FA | p241               rdword  char,framebuf2
0646c     44 10 FF F9 |                    movbyts char,#%01000100
06470     63 10 63 FD |                    mergew  char
06474     32 0C 63 FD |                    skipf skippattern
06478     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
0647c     63 10 63 FD |                    mergew  char                    ' 1 0
06480     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
06484     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
06488     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
0648c     F6 0F 6F FB |                    djnz   cpl2,#p241
06490                 | 
06490                 | 
06490     E0 00 90 FD |                jmp    #p203
06494                 | 
06494                 | '' --- 2 bit color modes
06494                 | 
06494     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
06498     C8 00 90 AD |        if_z   jmp #p251
0649c                 | 
0649c     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
064a0     30 00 90 AD |        if_z   jmp #p252
064a4                 | 
064a4                 | 
064a4     7D 11 C3 FA | p254               rdbyte char,framebuf2
064a8     04 0A 07 F6 |                    mov  t5,#4
064ac     02 10 67 F0 | p255               shl  char,#2
064b0     88 03 53 F8 |                    getnib  t1,char,#2
064b4     03 02 07 F5 |                    and     t1,#3
064b8     55 02 07 FA |                    mul     t1,#$55
064bc     81 05 03 F9 |                    rolbyte  t2,t1,#0
064c0     FA 0B 6F FB |                    djnz    t5,#p255
064c4     82 BB C2 FC |                    xcont   m_lut2,t2
064c8     01 FA 06 F1 |                    add     framebuf2,#1
064cc     F5 0F 6F FB |                    djnz    cpl2,#p254
064d0     A0 00 90 FD |                    jmp     #p203
064d4                 | 
064d4     7D 11 E3 FA | p252               rdword char,framebuf2
064d8     08 0A 07 F6 |                    mov  t5,#8
064dc     02 10 67 F0 | p253               shl  char,#2
064e0     88 03 63 F8 |                    getnib  t1,char,#4
064e4     03 02 07 F5 |                    and     t1,#3
064e8     05 02 07 FA |                    mul     t1,#5
064ec     81 05 83 F8 |                    rolnib  t2,t1,#0
064f0     FA 0B 6F FB |                    djnz    t5,#p253
064f4     82 BB C2 FC |                    xcont   m_lut2,t2
064f8     02 FA 06 F1 |                    add     framebuf2,#2
064fc     F5 0F 6F FB |                    djnz    cpl2,#p252
06500     70 00 90 FD |                    jmp     #p203
06504                 | 
06504                 | '' ------ 4 bit color modes
06504                 | 
06504     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
06508     58 00 90 AD |        if_z   jmp #p251
0650c                 | 
0650c     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
06510     2C 00 90 AD |        if_z   jmp #p262
06514                 | 
06514                 | 
06514     7D 11 C3 FA | p263               rdbyte char,framebuf2
06518     02 0A DC FC |                            rep #5,#2
0651c     88 05 8B F8 |                              rolnib t2,char,#1
06520     88 05 8B F8 |                                  rolnib t2,char,#1
06524     88 05 8B F8 |                              rolnib t2,char,#1
06528     88 05 8B F8 |                                  rolnib t2,char,#1
0652c     04 10 67 F0 |                              shl char,#4
06530     82 BB C2 FC |                    xcont   m_lut2,t2
06534     01 FA 06 F1 |                    add     framebuf2,#1
06538     F6 0F 6F FB |                    djnz    cpl2,#p263
0653c     34 00 90 FD |                    jmp     #p203
06540                 | 
06540     7D 11 E3 FA | p262               rdword  char,framebuf2
06544     04 06 DC FC |                            rep #3,#4
06548     88 05 9B F8 |                              rolnib t2,char,#3
0654c     88 05 9B F8 |                                  rolnib t2,char,#3
06550     04 10 67 F0 |                              shl char,#4
06554     82 BB C2 FC |                    xcont   m_lut2,t2
06558     02 FA 06 F1 |                    add     framebuf2,#2
0655c     F8 0F 6F FB |                    djnz    cpl2,#p262
06560     10 00 90 FD |                    jmp     #p203
06564                 | 
06564                 | ''---------- all color modes without zoom
06564                 | 
06564     87 07 D8 FC | p251               rep  #3,cpl2
06568     7D 11 03 FB |                    rdlong  char,framebuf2
0656c     04 FA 06 F1 |                    add     framebuf2,#4
06570     88 BB C2 FC |                    xcont   m_lut2,char
06574                 |           
06574                 |  ''-----------------------------------------------------------------------------------------
06574                 | p203           ' getword  mb2,m_border,#0
06574     00 24 0F F2 |                 cmp      mb2, #0 wz
06578     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
0657c                 | 
0657c     EC FB 9F FD |                 jmp #p302
06580                 | 
06580                 | '' -------------------------------------- END of graph  line ---------------------------------
06580                 | 
06580                 | '' consts and vars
06580                 | 
06580     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
06584     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
06588     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
0658c     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
06590                 | 
06590     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
06594                 | 
06594                 | '------ these longs will be set by setmode function
06594                 | 
06594     00 00 00 00 | m_bs            long    0        'blanks before sync
06598     00 00 00 00 | m_sn            long    0        'sync
0659c     00 00 00 00 | m_bv            long    0        'blanks before visible
065a0     00 00 00 00 | m_vi            long    0        'visible pixels #
065a4     00 00 00 00 | m_border        long    0        'left/right borders
065a8     00 00 00 00 | m_lut1          long    0        'characters
065ac     00 00 00 00 | i_vborder       long    0        'up/down borders
065b0     00 00 00 00 | i_upporch       long    0        'up porch lines
065b4     00 00 00 00 | i_vsync         long    0        'vsync lines
065b8     00 00 00 00 | i_downporch     long    0        'down porch lines
065bc     00 00 00 00 | i_modenum       long    0        'mode #
065c0     00 00 00 00 | i_cpl           long    0        'chars/longs per line
065c4     00 00 00 00 | i_lines         long    0        'scanlines #
065c8     00 00 00 00 | i_clock         long    0
065cc     00 00 00 00 | i_hubset        long    0
065d0     00 00 00 00 | i_totalvis      long    0
065d4                 | 
065d4                 | '-------------------------------------
065d4                 | 
065d4     00 00 00 00 | m_lut2          long    0
065d8                 | 
065d8                 | colordepth
065d8     00 00 00 00 | linestart       long    0
065dc     00 00 00 00 | linenum         long    0
065e0     00 01 00 00 | lutaddr         long    256
065e4                 | 
065e4     0E 00 00 00 | cursorsh        long    14
065e8     00 00 00 00 | frames          long    0
065ec     00 00 00 00 | cursorx         long    0
065f0     00 00 00 00 | cursory         long    0
065f4     00 00 00 00 | cursorpos       long    0
065f8     00 00 00 00 | cursorpos2      long    0
065fc     00 00 00 00 | fontstart       long    0
06600     00 00 00 00 | border2         long 0
06604     00 00 81 70 | lutiv           long $70810000
06608     00 00 88 00 | lutt1           long $00880000
0660c     00 00 80 00 | lutg1           long $00800000
06610     00 00 80 10 | lutg2           long $10800000
06614     00 00 80 20 | lutg4           long $20800000
06618     00 00 80 30 | lutg8           long $30800000
0661c     00 00 00 00 | framebuf        long 0
06620     00 00 00 00 | fontbuf         long 0
06624     00 00 00 00 | borderptr       long 0
06628     00 00 00 00 | vblankptr       long 0
0662c     00 00 00 00 | cursorptr       long 0
06630     00 00 00 00 | modeptr         long 0
06634     00 00 00 00 | paletteptr      long 0
06638     00 00 00 00 | dlptr           long 0
0663c                 | fontnumptr      res     1
0663c                 | fontnumptr      res     1
0663c                 | hbase           res     1
0663c                 | hbase           res     1
0663c                 | borderptr2      res     1
0663c                 | borderptr2      res     1
0663c                 | dlptr2 res 1
0663c                 | dlptr2 res 1
0663c                 | dl              res 1
0663c                 | dl              res 1
0663c                 | ii              res     1
0663c                 | ii              res     1
0663c                 | framebuf2       res     1
0663c                 | framebuf2       res     1
0663c                 | hsync0          res     1
0663c                 | hsync0          res     1
0663c                 | hsync1          res     1
0663c                 | hsync1          res     1
0663c                 | fontline        res     1
0663c                 | fontline        res     1
0663c                 | t1              res     1
0663c                 | t1              res     1
0663c                 | t2              res     1
0663c                 | t2              res     1
0663c                 | t3 res 1
0663c                 | t3 res 1
0663c                 | t4 res 1
0663c                 | t4 res 1
0663c                 | t5 res 1
0663c                 | t5 res 1
0663c                 | skippattern res 1
0663c                 | skippattern res 1
0663c                 | cpl2 res 1
0663c                 | cpl2 res 1
0663c                 | char            res     1
0663c                 | char            res     1
0663c                 | backcolor       res     1
0663c                 | backcolor       res     1
0663c                 | charcolor       res     1
0663c                 | charcolor       res     1
0663c                 | zoom res 1
0663c                 | zoom res 1
0663c     00 00 00 00 | rcnt long 0 'dl repeat count
06640     00 00 00 00 | rcnt2 long 0
06644     00 00 00 00 | rcnt2a long 0
06648     00 00 00 00 | roffset long 0
0664c     00 00 00 00 | rdl long 0  'dl repeat line
06650     00 00 00 00 | dlc long 0 'dl command
06654     00 00 00 00 | mb2 long 0
06658     00 00 00 00 | aend             long 0
0665c                 |                 fit     496                     '
0665c                 | __system__dat_
0665c     00 00 00 00 
06660     00 00 00 00 | 	byte	$00[8]
06664     03 00 00 00 
06668     00 00 00 00 
0666c     00 00 00 00 
06670     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06674     00 00 00 00 
06678     00 00 00 00 
0667c     00 00 00 00 
06680     00 00 00 00 | 	byte	$00[16]
06684     05 00 00 00 
06688     00 00 00 00 
0668c     00 00 00 00 
06690     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06694     5C 68 00 00 | 	long	@@@__system__dat_ + 512
06698     64 68 00 00 | 	long	@@@__system__dat_ + 520
0669c     00 00 00 00 | 	byte	$00, $00, $00, $00
066a0     6C 68 00 00 | 	long	@@@__system__dat_ + 528
066a4     74 68 00 00 | 	long	@@@__system__dat_ + 536
066a8     00 00 00 00 
066ac     00 00 00 00 | 	byte	$00[8]
066b0     01 00 00 00 
066b4     06 00 00 00 
066b8     00 00 00 00 
066bc     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
066c0     00 00 00 00 | 	byte	$00, $00, $00, $00
066c4     7C 68 00 00 | 	long	@@@__system__dat_ + 544
066c8     84 68 00 00 | 	long	@@@__system__dat_ + 552
066cc     00 00 00 00 | 	byte	$00, $00, $00, $00
066d0     8C 68 00 00 | 	long	@@@__system__dat_ + 560
066d4     94 68 00 00 | 	long	@@@__system__dat_ + 568
066d8     00 00 00 00 
066dc     00 00 00 00 | 	byte	$00[8]
066e0     01 00 00 00 
066e4     06 00 00 00 
066e8     00 00 00 00 
066ec     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
066f0     00 00 00 00 | 	byte	$00, $00, $00, $00
066f4     9C 68 00 00 | 	long	@@@__system__dat_ + 576
066f8     A4 68 00 00 | 	long	@@@__system__dat_ + 584
066fc     00 00 00 00 | 	byte	$00, $00, $00, $00
06700     AC 68 00 00 | 	long	@@@__system__dat_ + 592
06704     B4 68 00 00 | 	long	@@@__system__dat_ + 600
06708     00 00 00 00 
      ...             
06858     00 00 00 00 
0685c     00 00 00 00 | 	byte	$00[344]
06860     00 20 00 00 | 	long	@@@__system___tx
06864     00 00 00 00 | 	byte	$00, $00, $00, $00
06868     40 20 00 00 | 	long	@@@__system___rx
0686c     00 00 00 00 | 	byte	$00, $00, $00, $00
06870     74 3B 00 00 | 	long	@@@__system___rxtxioctl_0190
06874     00 00 00 00 | 	byte	$00, $00, $00, $00
06878     E4 3B 00 00 | 	long	@@@__system____dummy_flush_0191
0687c     00 00 00 00 | 	byte	$00, $00, $00, $00
06880     00 20 00 00 | 	long	@@@__system___tx
06884     00 00 00 00 | 	byte	$00, $00, $00, $00
06888     40 20 00 00 | 	long	@@@__system___rx
0688c     00 00 00 00 | 	byte	$00, $00, $00, $00
06890     74 3B 00 00 | 	long	@@@__system___rxtxioctl_0190
06894     00 00 00 00 | 	byte	$00, $00, $00, $00
06898     E4 3B 00 00 | 	long	@@@__system____dummy_flush_0191
0689c     00 00 00 00 | 	byte	$00, $00, $00, $00
068a0     00 20 00 00 | 	long	@@@__system___tx
068a4     00 00 00 00 | 	byte	$00, $00, $00, $00
068a8     40 20 00 00 | 	long	@@@__system___rx
068ac     00 00 00 00 | 	byte	$00, $00, $00, $00
068b0     74 3B 00 00 | 	long	@@@__system___rxtxioctl_0190
068b4     00 00 00 00 | 	byte	$00, $00, $00, $00
068b8     E4 3B 00 00 | 	long	@@@__system____dummy_flush_0191
068bc                 | __heap_base
068bc     00 00 00 00 
      ...             
078bc     00 00 00 00 
078c0     00 00 00 00 | 	long	0[1026]
078c4                 | objmem
078c4     00 00 00 00 | 	long	0[1]
078c8 0fe             | 	org	COG_BSS_START
078c8 0fe             | _var01
078c8 0fe             | 	res	1
078c8 0ff             | _var02
078c8 0ff             | 	res	1
078c8 100             | _var03
078c8 100             | 	res	1
078c8 101             | _var04
078c8 101             | 	res	1
078c8 102             | _var05
078c8 102             | 	res	1
078c8 103             | _var06
078c8 103             | 	res	1
078c8 104             | arg01
078c8 104             | 	res	1
078c8 105             | arg02
078c8 105             | 	res	1
078c8 106             | arg03
078c8 106             | 	res	1
078c8 107             | arg04
078c8 107             | 	res	1
078c8 108             | local01
078c8 108             | 	res	1
078c8 109             | local02
078c8 109             | 	res	1
078c8 10a             | local03
078c8 10a             | 	res	1
078c8 10b             | local04
078c8 10b             | 	res	1
078c8 10c             | local05
078c8 10c             | 	res	1
078c8 10d             | local06
078c8 10d             | 	res	1
078c8 10e             | local07
078c8 10e             | 	res	1
078c8 10f             | local08
078c8 10f             | 	res	1
078c8 110             | local09
078c8 110             | 	res	1
078c8 111             | local10
078c8 111             | 	res	1
078c8 112             | local11
078c8 112             | 	res	1
078c8 113             | local12
078c8 113             | 	res	1
078c8 114             | local13
078c8 114             | 	res	1
078c8 115             | local14
078c8 115             | 	res	1
078c8 116             | local15
078c8 116             | 	res	1
078c8 117             | local16
078c8 117             | 	res	1
078c8 118             | local17
078c8 118             | 	res	1
078c8 119             | local18
078c8 119             | 	res	1
078c8 11a             | local19
078c8 11a             | 	res	1
078c8 11b             | local20
078c8 11b             | 	res	1
078c8 11c             | local21
078c8 11c             | 	res	1
078c8 11d             | local22
078c8 11d             | 	res	1
078c8 11e             | local23
078c8 11e             | 	res	1
078c8 11f             | local24
078c8 11f             | 	res	1
078c8 120             | local25
078c8 120             | 	res	1
078c8 121             | local26
078c8 121             | 	res	1
078c8 122             | local27
078c8 122             | 	res	1
078c8 123             | local28
078c8 123             | 	res	1
078c8 124             | local29
078c8 124             | 	res	1
078c8 125             | local30
078c8 125             | 	res	1
078c8 126             | local31
078c8 126             | 	res	1
078c8 127             | local32
078c8 127             | 	res	1
078c8 128             | local33
078c8 128             | 	res	1
078c8 129             | local34
078c8 129             | 	res	1
078c8 12a             | local35
078c8 12a             | 	res	1
078c8 12b             | local36
078c8 12b             | 	res	1
078c8 12c             | local37
078c8 12c             | 	res	1
078c8 12d             | local38
078c8 12d             | 	res	1
078c8 12e             | local39
078c8 12e             | 	res	1
078c8 12f             | local40
078c8 12f             | 	res	1
078c8 130             | local41
078c8 130             | 	res	1
078c8 131             | local42
078c8 131             | 	res	1
078c8 132             | local43
078c8 132             | 	res	1
078c8 133             | local44
078c8 133             | 	res	1
078c8 134             | local45
078c8 134             | 	res	1
078c8 135             | local46
078c8 135             | 	res	1
078c8 136             | local47
078c8 136             | 	res	1
078c8 137             | local48
078c8 137             | 	res	1
078c8 138             | local49
078c8 138             | 	res	1
078c8 139             | muldiva_
078c8 139             | 	res	1
078c8 13a             | muldivb_
078c8 13a             | 	res	1
078c8 13b             | 	fit	480
078c8 13b             | 
