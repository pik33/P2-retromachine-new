' A GUS inspired interpolating audio driver for a P2
' v. 0.03 - 20241218
' MIT license
' Piotr Kardasz pik33@o2.pl with the help from P2 forum community :) 
' 16 channel version
'-------------------------------------------------------------------
con


left= 14
right=15

c4=262
d4=294
e4=330
f4=349
g4=392
a4=440
h4=494

var

{{
Channel registers:
long #0: the sample phase accumulator fractional part
long #1: the sample phase accumulator integer part
long #2: the current sample generated, 2 words, right:left
long #3: the raw sample value, 2 words: previous:current
long #4: envelope phase accumulator
long #5: the sample pointer.
         Set bit #31 to 0 if the sample is 8 bit, 1 for 16 bit. 
         Set bit #30 to 1 to start playing the sample from the beginning
         Set bit #29 to 1 to synchronize channels 0 and 1 for playing stereo without the phase error
         Set bit #28 to 1 to use interleaved samples (as in .wav file) with fractional skip enabled 
         Set bit #27 to 1 to generate noise instead of audio
long #6: sample loop start point
long #7: sample loop end point. 
         If the sample has to no loop and stop at the end, set loop start=end of sample, loop end=loop start +1 or 2 (for 16 bit)
long #8: volume and pan
         word #10: volume, 0..16384(=1). Values more than 16384 could cause clipping if sample is normalized
         word #11: pan. 16384: full left, 8192: center, 0: full right
long #9  frequency in 8:24 format; $01000000 = sample rate * 1.0
         word #11: period. This is the number of Paula cycles between two samples. 
         word #12: skip 
         From version 0.93 it is 8.8 fixed point, so set it to 256 for 8 bit or 512 for 16-bit samples. (was: 1 and 2) 
         Setting higher skip value skips the samples while playing, allows for higher frequencies for the same period
long #10 sample rate (the divider for clkfreq; for 338688000 7680 gives 44100 Hz) - bit 31 set=no change
long #11 envelope pointer. Points to the start of the envelope definition
long #12 envelope speed. Number of Paula's periods between 2 envelope values. 
long #13 envelope length
long #14..15 reserved, unused
}}

'
long mailboxaddr
long scope_ptr
long cache_ptr
long channel0[16]
long channel1[16]
long channel2[16]
long channel3[16]
long channel4[16]
long channel5[16]
long channel6[16]
long channel7[16]
long channel8[16]
long channel9[16]
long channela[16]
long channelb[16]
long channelc[16]
long channeld[16]
long channele[16]
long channelf[16]



'--------------------------------------------------------------
'---------- Init the variables, start the cog. ----------------
'--------------------------------------------------------------

pub start(mbox,scope,cache) :cog,base | iii

' mbox: PSRAM mailbox or 0 if no PSRAM
' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
' cache: a pointer to 2 KB long HUB cache for PSRAM audio data

mailboxaddr:=mbox 
scope_ptr:=scope
cache_ptr:=cache
base:=@channel0[0]

repeat iii from 0 to 15
  long[base+64*iii]:=0
  long[base+64*iii+4]:=0  		
  long[base+64*iii+8]:=0
  long[base+64*iii+12]:=0
  long[base+64*iii+16]:=0
  long[base+64*iii+20]:=0
  long[base+64*iii+24]:=0
  long[base+64*iii+28]:=0
  word[base+64*iii+32]:=8192
  word[base+64*iii+34]:=8192
  long[base+64*iii+36]:=0
  long[base+64*iii+40]:=0
  long[base+64*iii+44]:=0
  long[base+64*iii+48]:=0
  long[base+64*iii+52]:=0
  
cog:=coginit(16,@audio,@mailboxaddr)
waitms(10)
return cog,base

' a simple play procedure to not poke everything. 


pub setenv(channel,env,envlen) | base2

base2:=@channel1[0]+64*channel


pub play16(channel,sample,splfreq,vol,len,loop,delay) | base2

base2:=@channel0[0]+64*channel
long[base2+20]:=sample+$C0000000 
long[base2+28]:= len
'if loop >=0 
'  long[base2+24]:= loop
'else
'  long[base2+24]:= len
word[base2+32]:=vol
long[base2+36]:= splfreq*389566
waitms(delay)

'--------------------------------------------------------------
'------ PASM driver code --------------------------------------
'-------------------------------------------------------------- 

dat

audio       	org     0

            	rdlong  mailbox2, ptra++     ' get start address of all mailboxes
            	rdlong  scbase, ptra++       ' get start address of scope buffer
            	rdlong  hubptr, ptra++       ' get start address of PSRAM cache

            	cogid   pa                   ' compute cogid
            	mul     pa, #12              ' and mailbox spacing
            	add     mailbox2, pa         ' add offset to find this COG's mailbox
            	mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram

            	mov     ptrb,#0              ' A tail pointer for the buffer
            	wrpin   dac2,#left           ' PWM DACs at 44100@339 MHz
            	wxpin   sr44100,#left     	 ' 30*256
            	wrpin   dac2,#right
            	wxpin   sr44100,#right    
            	dirh    #left addpins 1
            	setse1  #%001<<6 + left      ' Set the event - DAC empty
 
            
'---------------------------------------------------------------------------------        
'----------------- The main loop -------------------------------------------------
'---------------------------------------------------------------------------------

loop       	mov 	    cn,#15 '7

'----------------------------------------------------------------------------------
'------------- Get parameters and execute commands if any -------------------------
'----------------------------------------------------------------------------------


p401        	mov     channeladd,cn             	' compute the pointer to channel parameters block
            	shl     channeladd,#6
            	add     ptra,channeladd

            	setq    #13                       	' read parameters
            	rdlong  pointer0,ptra
p408        	bitl    command0,#31 wcz	      	' bit #31 command - set the DAC sample rate
    	if_nc   jmp     #p404                     	' if not set, proceed
            	mov     qq,command0             	' get the new rate
            	wxpin   qq,#left addpins 1        	' and program the pins
            	getbyte qq,qq,#0 		      	' check if the rate is n*256
            	cmp     qq,#0 wz                         
    	if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
    	if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
                
               	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
    	if_z    mov     pointer0, #0  
    	if_z    mov     pointer0h, #0  
    	if_z    mov     envph0, #0  
    	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
    	
p404        	mov     qq,sstart0		     	' check if start>$80000
		and 	qq,##$7FFFFFF 
                cmp 	qq,##$80000 wcz
    	if_ge   mov     mailbox,mailbox2          	' if yes, use PSRAM
    	if_lt   mov     mailbox,#0                	' if not, use HUB 

p405           	getword apan0,volpan0,#1          	' extract vol,pan from longs 
    	    	getword avol0,volpan0,#0
    	    	
'----------------------------------------------------------------------------------
'------------- Compute the envelope, if exists ------------------------------------
'----------------------------------------------------------------------------------
            
            	cmp     envptr0,#0 wcz     		' read the pointer
    	if_z    mov     envs1,##$4000			' if 0, no envelope, load $4000=1 for scas
    	if_z    jmp     #p410				' and run away	

           	add     envph0,envspd0			' envelope PA update
           	           
      	    	mov     envhi, envph0			' move phase acc to high part of env pointer
		shr     envhi,#6			' leave 10 bits in hi
	   	getword envlo,envhi,#0              	' and 16 bit in lo
	    	shr     envhi,#16			' move 10 bits of hi to the lower word
	    	cmp     envhi,envlen0 wcz		' compare this to envelope length
	    	'debug(udec(envhi,envlen0))
    	if_ge  	mov     envhi,envlen0			' if greater than, set it at envlen
    	if_ge   mov     envlo,#0
    	if_ge   mov     envph0,envlen0             	' and set envph0 at the end of the envelope
    	if_ge   shl     envph0,#22

            	mov 	envs1,envhi			' 10 high bits of PA is the offset to the envelope entry
            	shl 	envs1,#1                        ' these entries are 16 bit so multiply the offset by 2
            	add 	envs1,envptr0                   ' and add it to the pointer
            	rdlong 	envs1,envs1			' and then read 2 entries in one rdlong
            	getword envs2,envs1,#1			' then separate them		
           	getword envs1,envs1,#0
            	mul     envs2,envlo                     ' and do linear interpolation based on lower bits of the offset
            	not     envlo
            	mul     envs1,envlo
            	add     envs1,envs2
            	shr     envs1,#18			' we need only 14 bits for scas
              
'----------------------------------------------------------------------------------
'------------- Generate the noise if bit 27 of the pointer is set -----------------
'----------------------------------------------------------------------------------

p410        	testb   sstart0, #27 wz
    	if_z    getrnd  spl
    	if_z    jmp     #p406
    	
'----------------------------------------------------------------------------------
'------------- Get the sample -----------------------------------------------------
'----------------------------------------------------------------------------------    	
 
		mov	oldptrh,pointer0h
           	getbyte	afreq0,freqskip0,#3         	' the frequency is in 8:24 format, so get integer in afreq0
           	shl	freqskip0,#8                	' and keep the fractional in freqskip0
           	add     pointer0,freqskip0 wcz      	' compute the pointer to the next sample   
           	                                                                                                     'debug(udec(afreq0))  
           	addx	pointer0h,afreq0  
                                                                                                          '       	debug(udec(pointer0h, pointer0))
		cmp	pointer0h,oldptrh wcz

	if_e 	jmp 	#p411				' if the pointer didn't change, no sample has to be read
     	
            	testb   sstart0,#31 wz       	   	' bit 31 : 16 bit sample  
     	if_z    shl     pointer0h,#1        
            	testb   sstart0,#28 wz  		' bit 28 : interleaved sample         
     	if_z    shl     pointer0h,#1        
												'debug(udec(pointer0h))
            	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
   	if_ge   sub     pointer0h,lend0       
        if_ge   add     pointer0h,lstart0
        	
        	'   debug(udec(pointer0h))	
                       	
            	mov     qq,pointer0h              	' compute place in the memory from where the sample will be loaded
           	add     qq,sstart0            
           	cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
    	if_le   rdword  spl,qq                      	' if not, use HUB RAM for samples
    	if_gt   call    #cache_read
                testb   sstart0,#31 wz 
    	if_nz   shl     spl,#8				' convert 8 to 16 bit if needed
        if_z    shr     pointer0h,#1
               testb   sstart0,#28 wz            
    	if_z    shr     pointer0h,#1    
                rolword rawspl0,spl,#0			' now rawspl0 has oldsample:newsample in it
                
           
                
                
p411	      	getword spl,rawspl0,#1
		getword oldspl,rawspl0,#1		' then separate them		
		mov	envlo,pointer0
		shr 	envlo,#18
'		     debug(udec(spl))

		
            	scas    oldspl,envlo                     	' and do linear interpolation
            	mov 	oldspl,0-0
            	not     envlo
          	and     envlo,##$3FFF
           	scas    spl,envlo
            	mov     spl,0-0
                add     spl, oldspl

         		
		 
p406        	scas    spl, envs1
            	mov     spl,0-0
            	scas    spl,avol0                 	' apply volume
            	mov     spl,0-0
 
            	scas    spl,apan0                 	' apply pan
            	mov     ls0,0-0
            	mov     qq,##16384
            	sub     qq,apan0
            	scas    spl,qq
            	mov     rs0, 0-0
            	
            	
     
                setword sample0,rs0,#1           ' pack samples into long
                setword sample0,ls0,#0
                
                add  lsample,ls0
                add  rsample,rs0
                
            
            bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointers needs resetting  
    if_z    mov     pointer0, #0  
    if_z    mov     pointer0h, #0  
    if_z    mov     envph0, #0  
    if_z    wrlong  sstart0, ptra[5]          ' reset bit #30 in hub


            
p403        setq #4                          ' write new pointer, sample values and env pointer to the hub

            wrlong  pointer0,ptra
            sub     ptra, channeladd         ' reset the pointer to channel parameters
                      

            djnf    cn, #p401
            bitnot rsample,#15
            bitnot lsample, #15
            
            waitse1
   '         waitx ##33800000
     
            
            wypin   lsample,#left        '2      
            
            wypin   rsample,#right       '4
            mov rsample,#0
            mov lsample, #0

 
		
	    cmp     scbase,#0 wz
    if_z    jmp #p302	   
 
 
            incmod  scope,#1 wc            '  todo: scope speed instead of const  
   if_c    mov scptr2,scptr
    if_c    shl scptr2,#2
    if_c    add scptr2,scbase     
            wrlong scptr2,#$60
    if_c    wrlong oldsample,scptr2
    if_c    incmod scptr,##639
			    

            
            
            
            
            
 p302           jmp     #loop            'loop

'----------------------------------------------------------------------------------
'------------- This is the end of the main loop -----------------------------------
'----------------------------------------------------------------------------------

'----------------------------------------------------------------------------------
'------------- PSRAM cache ----------- --------------------------------------------
'----------------------------------------------------------------------------------

' There are 8 cache pointers for 8 channels
' if 24 higher bits of address=cache, then get a word from the cache
' else load the cache from PSRAM, update the pointer, then read a sample


cache_read  	getbyte addrlo,qq,#0 			' when this is called, qq is the addres of the sample			
            
	   	mov     addrhi,qq		
	    	shr     addrhi,#8		        ' get 24 upper bits
	    	alts    cn,#cache1            
	    	cmp	addrhi,0-0 wz               	' and compare with the cache pointer for the channel
    	if_z    jmp     #p701	    			' if equal, cache hit, read the sample from it
	
p702	    	altd    cn,#cache1			' cache miss. 
	    	mov     0-0,addrhi                  	' update the pointer
	    	mov     cmd,addrhi			' prepare the mailbox
	    	shl     cmd,#8
            	setnib  cmd, #%1011, #7             	' read burst from the external memory
            	mov     hubaddr,cn                  	' to the channel cache
            	shl     hubaddr,#8                  	'
            	add     hubaddr,hubptr 
            	mov     count,#256                  	' 256 bytes
            	setq    #2                          	' write 3 longs
            	wrlong  cmd, mailbox                	' run it
poll1       	rdlong  cmd, mailbox                	' poll mailbox for result
            	tjs     cmd, #poll1                 	' retry until valid 
            
	
p701	    	mov     qq,cn				' cache hit
	    	shl     qq,#8				' compute the cache start
	    	add     qq,hubptr
	    	add	qq,addrlo			' add 8 lower bits to the cache addredd
    	_ret_   rdword  spl,qq                      	' read a long from the cache
          
  


'---------------------------------------------------------------------------
'------- Variables ---------------------------------------------------------
'---------------------------------------------------------------------------

' constants

a40000000   long $40000000
a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before





channeladd long 0

front       long 0

' temporary variables 
qq          long 0
spl         long 0
zero        long 0
mailbox     long 0
mailbox2 long 0

' Interrupt ISR variables

lsample     long 0
rsample     long 0
lsnext      long 0
rsnext      long 0 

' channel parameter block

pointer0    long 0   
pointer0h   long 0  
sample0     long 0
rawspl0	    long 0
envph0	    long 0
sstart0     long 0     ' start pointer and type at bit 31
lstart0     long 0
lend0       long 0
volpan0     long 0
freqskip0   long 0
command0    long 0
envptr0	    long 0
envspd0	    long 0
envlen0	    long 0
res5	    long 0
res6	    long 0
res7	    long 0
res8	    long 0
oldspl		long 0
afreq0      long 0
askip0      long 0
avol0       long 0
apan0       long 0
oldptrh	    long 0
oldt0       long $FFFFFFFF    'Temporary time variables
cn          long 0
ct          long 0
dt0         long 0

' Samples
oldls       long 0
oldrs       long 0

ls0         long 0
rs0         long 0

ls          long 0    
rs          long 0

oldsample   long 0
newsample   long 0

nrsample    long 0
nlsample    long 0

scbase long 0
scptr long 0
scptr2 long 0
scope long 0

dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   

hubptr      long $71800
sr44100     long 30*256
cache1      long 0
cache2      long 0
cache3      long 0
cache4      long 0
cache5      long 0
cache6      long 0
cache7      long 0
cache8      long 0


cmd         long 0
hubaddr     long 0
count       long 256
addrlo long 0
addrhi long 0
pointer00 long 0
envhi long 0
envlo long 0
envs1 long 0
envs2 long 0
noise0 long 0

ct1 long 0
ct2 long 0
'-----------------------------------------------------------------------------------------
'------ PASM driver ends here ------------------------------------------------------------
'----------------------------------------------------------------------------------------- 

'
dat 
null  			long 	0,0           ' for channel reset
'sinewave 		file 	"sinus.s2"    ' for testing
