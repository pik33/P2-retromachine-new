' A frequency modulation synthesizer/audio driver for a P2
' v. 0.09- 20220715
' MIT license
' Piotr Kardasz pik33@o2.pl with the help from P2 forum community :) 
' 16 channel version
'-------------------------------------------------------------------------------------


con

left= 14
right=15
channels=16
var
long lutptr
long channel1[716]

'------------------- Start the driver --------------------------------------------

pub start() :cog,base 

channel1[0]:=@audiolut
base:=@channel1[0]
debug(uhex(lutptr,base))
cog:=coginit(16,@audio,base)
waitms(100)
return cog,base

'------------------ PASM driver code --------------------------------------------

dat

audio       	org     0
            	wrpin   dac,#left           
            	wxpin   ##2*4096,#left    	 
            	wrpin   dac,#right
            	wxpin   ##2*4096,#right    
            	dirh    #left addpins 1
            	setse1  #%001<<6 + left      		' Set the event - DAC empty

                rdlong  ptrb,ptra
                setq2   #511
                rdlong  0,ptrb
             
                jmp #$200 


' temporary variables 

spl0 long 0
spl1 long 0
spl2 long 0
spl3 long 0
spl4 long 0
spl5 long 0


adccng long 0
qq          long 0
cn          long 0
pointer00   long 0
ls          long 0    
rs          long 0
advalue0     long 0
advalue1     long 0
advalue2    long 0
advalue3     long 0
advalue4     long 0
advalue5    long 0

' channel parameter block:

'------  Variables different per channel that change everytime. They are kept in HUB and reloaded and saved every new channel 

pointer0    long 0      
adcptr0	    long 0
adccnt0     long 0
mod0	    long 0

pointer1    long 0      
adcptr1	    long 0
adccnt1     long 0
mod1	    long 0

pointer2    long 0      
adcptr2	    long 0
adccnt2     long 0
mod2	    long 0

pointer3    long 0      
adcptr3	    long 0
adccnt3     long 0
mod3	    long 0

pointer4    long 0      
adcptr4	    long 0
adccnt4     long 0
mod4	    long 0

pointer5    long 0      
adcptr5	    long 0
adccnt5     long 0
mod5	    long 0



'------ These variables have to be loaded at note on and not saved except vol0

vol0	  	long 0
freq0		long 0
vol1		long 0
freq1		long 0
vol2 		long 0
freq2		long 0
vol3		long 0
freq3		long 0
vol4		long 0
freq4		long 0
vol5		long 0
freq5		long 0

' ------ These variables are common for all channels to be loaded at sound change, This needs to be additionally triggered.

'---- op 1

adr01        	long 0     
adr02        	long 0
adr03        	long 0
adr04        	long 0

adc01        	long $70
adc02        	long $0
adc03       	long $0
adc04        	long $0

m00      	long 0
m01	        long 0
m02		long 0
m03		long 0
m04		long 0
m05		long 0
m06		long 0
amsense0	long 0  
fmsense0        long 0
ratescale0      long 0 

'---- op 2
 
adr11        	long 0      
adr12        	long 0
adr13        	long 0
adr14        	long 0

adc11        	long $7FFF_0000
adc12        	long $77FF_0000
adc13        	long $6FFF_0000
adc14        	long $0200_0000

m10		long 0
m11      	long 0
m12	        long 0
m13		long 0
m14		long 0
m15		long 0
m16		long 0
amsense1	long 0  
fmsense1        long 0
ratescale1      long 0 




' constants

dac         	long 	%10111_00000000_01_00011_0     'pwm dac
affffffff   	long 	$FFFF_FFFF   
a7fffffff   	long 	$7FFF_FFFF   
aptra	    	long 	144*channels-48
a7fff     long $7fff
affff     long $ffff

t1 long 0
t2 long 0




awrite      long 23

a58000000 long $5800_0000 
a44000000 long $4400_0000
fit 400


dat

audiolut org $200

'----------------- The main loop -------------------------------------------------

loop        	mov  	cn,#channels-1              
              	mov  	rs,#0
                        
p401        	
                setq    #35                     	' read parameters
            	rdlong  pointer0,ptra
getct   t1
p403	      	bitl    vol0,#30 wcz            	' if bit #30 of start pointer is set, the current pointer needs resetting  
    if_nz       jmp #p501	 	' there is no note on, skip'

        	mov     pointer0, #0                    ' note on
        	mov     pointer1, #0                    ' note on
                mov     awrite,#24
                mov 	adccnt0,affffffff
        	mov     adccnt1,affffffff
        	mov 	awrite,#24
		jmp     #p502
        	
 
p501   	        bitl    vol0,#31 wcz 			' note off
    if_nz	jmp #p502
                mov 	adr0,adr04
                mov 	adr1,adr14
                mov 	awrite,#24


p502           	add     pointer0,freq0          	  
            	add	mod0,pointer0 
            	shl     mod0,#4
                qrotate a7fff,mod0        

   	        add     pointer1,freq1          	   
            	add	mod1,pointer1
            	shl     mod1,#4
                qrotate a7fff,mod1
 
p601		nop
p602		nop
		mucc    addcng,#1
		qexp	adcptr0

p611		nop
p612		nop
		muxc	adccng,#2
		qexp	adcptr1

                getqx 	spl0
                getqx 	spl1   
         
                getqx 	advalue0
                getqx 	advalue1 
                        
                mov 	mod0,#0
                mov 	mod1,#0
                
                mul     advalue0,vol0
                shr     advalue0,#18
           	scas    spl0,advalue0                  	' apply volume
            	add     rs,0-0
 
                mul     advalue1,vol1
                shr     advalue1,#18
           	scas    spl1,advalue1                  	' apply volume
            	add     rs,0-0
 
            	bitnot  spl0,#15
 
                sca     spl0,m00
                add     mod0,0-0
                sca     spl0,m10
 		add     mod1,0-0
'      
            	bitnot  spl1,#15
 
                sca     spl0,m01
                add     mod0,0-0
                sca     spl0,m11
 		add     mod1,0-0
'                

          	shl     mod0,#18
          	shl 	mod1,#18
'          	
        	setq 	awrite                      	' write new pointer and sample value to the hub
            	wrlong  pointer0,ptra
		mov     awrite,#35
           	add 	ptra,#144   ' next channel
           	
  	
           	
getct   t2
sub t2,t1
wrlong t2,#$70
            	djnf    cn,#p401 

' now all channels processed

		bitl    vol0,#29 wcz			' program change
    if_nz	jmp 	#p503
    

           	setq	#35   '108
   		rdlong  adr01,ptra
 	        sub     ptra,#48
  		wrlong  vol0,ptra


    

p503	debug(uhex(ptra))
   if_nz        sub ptra,#48           
 
 '---------
 
           		' convert to unsigned. 
	   	bitnot  rs,#15		  
 
  		waitse1
  		
            	wypin   rs,#left       		      	' output the sample     
            	wypin   rs,#right         
	        sub 	ptra,aptra
                jmp     #\loop            

fit 1023


{{
        
        Variables for ALL channels  operator specific (x6) that changes only when sound definition change:
        -r1,r2,r3,r4,l1,l2,l3,l4, feedback , mod sense. These are 60 longs = 10 var*6 op
        
        Variables different per channel that change on note on 
        - volume, frequency, trigger at Op 1, that are 192 longs
        
        Variables in main cog
        split breakpoint,key velocity, main level
        
         Variables different per channel that change everytime     
        -pointer, adcptr, envstate, mod input, that are 384 longs  

}}
